{
  "menu": [
    {
      "label": "Packages",
      "items": [
        "examples",
        "packages.global-linking",
        "packages.uikit-utils"
      ]
    },
    {
      "label": "VueComponents",
      "items": [
        "src.vue.Container.vue",
        "src.vue.Element.vue",
        "src.vue.Modal.vue",
        "src.vue.SpecialElement.vue"
      ]
    },
    {
      "label": "UIkitComponents",
      "items": [
        "src.uikit.accordion.js",
        "src.uikit.togglable.js"
      ]
    },
    {
      "label": "Modules",
      "items": [
        "packages.global-linking.src.config.js",
        "packages.global-linking.src.test.js",
        "packages.uikit-utils.src.ajax.js",
        "src.uikit.types.js",
        "src.utils.animation.js"
      ]
    }
  ],
  "types": {
    "NodeLike": "src.uikit.types.js",
    "TestConfig": "packages.global-linking.src.config.js"
  },
  "globals": [
    "Object",
    "Function",
    "Array",
    "Number",
    "parseFloat",
    "parseInt",
    "Infinity",
    "NaN",
    "undefined",
    "Boolean",
    "String",
    "Symbol",
    "Date",
    "Promise",
    "RegExp",
    "Error",
    "EvalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError",
    "JSON",
    "Math",
    "console",
    "Intl",
    "ArrayBuffer",
    "Uint8Array",
    "Int8Array",
    "Uint16Array",
    "Int16Array",
    "Uint32Array",
    "Int32Array",
    "Float32Array",
    "Float64Array",
    "Uint8ClampedArray",
    "DataView",
    "Map",
    "Set",
    "WeakMap",
    "WeakSet",
    "Proxy",
    "Reflect",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape",
    "eval",
    "isFinite",
    "isNaN",
    "SharedArrayBuffer",
    "Atomics",
    "WebAssembly",
    "DTRACE_NET_SERVER_CONNECTION",
    "DTRACE_NET_STREAM_END",
    "DTRACE_HTTP_SERVER_REQUEST",
    "DTRACE_HTTP_SERVER_RESPONSE",
    "DTRACE_HTTP_CLIENT_REQUEST",
    "DTRACE_HTTP_CLIENT_RESPONSE",
    "global",
    "process",
    "GLOBAL",
    "root",
    "Buffer",
    "clearImmediate",
    "clearInterval",
    "clearTimeout",
    "setImmediate",
    "setInterval",
    "setTimeout",
    "doctoolsConfig",
    "__core-js_shared__",
    "Base64"
  ],
  "resources": {
    "examples": {
      "_events": {},
      "_eventsCount": 1,
      "package": null,
      "path": "/Users/jms/yootheme-doctools/examples",
      "fileInPackage": "./",
      "name": "examples",
      "resource": "examples",
      "type": "package",
      "resources": {
        "src.uikit.accordion.js": "src.uikit.accordion.js",
        "src.uikit.togglable.js": "src.uikit.togglable.js",
        "src.uikit.types.js": "src.uikit.types.js",
        "src.utils.animation.js": "src.utils.animation.js",
        "src.vue.Container.vue": "src.vue.Container.vue",
        "src.vue.Element.vue": "src.vue.Element.vue",
        "src.vue.Modal.vue": "src.vue.Modal.vue",
        "src.vue.SpecialElement.vue": "src.vue.SpecialElement.vue"
      },
      "globals": {
        "trigger": [
          {
            "comment": "<!-- @trigger elementHover triggered when an element in the layout editor is hovered-->",
            "kind": "trigger",
            "type": {
              "names": [
                null
              ]
            },
            "name": "elementHover",
            "description": "triggered when an element in the layout editor is hovered",
            "params": [],
            "resource": "src.vue.Element.vue",
            "template": "function",
            "simpleName": "elementHover",
            "tables": {
              "arguments": [
                {}
              ]
            },
            "signature": "elementHover ()"
          },
          {
            "comment": "<!-- @trigger elementLeave triggered when the mouse leaves a layout editor element -->",
            "kind": "trigger",
            "type": {
              "names": [
                null
              ]
            },
            "name": "elementLeave",
            "description": "triggered when the mouse leaves a layout editor element",
            "params": [],
            "resource": "src.vue.Element.vue",
            "template": "function",
            "simpleName": "elementLeave",
            "tables": {
              "arguments": [
                {}
              ]
            },
            "signature": "elementLeave ()"
          },
          {
            "comment": "<!-- @trigger saveElement triggered when the save save button is clicked -->",
            "kind": "trigger",
            "type": {
              "names": [
                null
              ]
            },
            "name": "saveElement",
            "description": "triggered when the save save button is clicked",
            "params": [],
            "resource": "src.vue.Element.vue",
            "template": "function",
            "simpleName": "saveElement",
            "tables": {
              "arguments": [
                {}
              ]
            },
            "signature": "saveElement ()"
          }
        ]
      },
      "packages": {
        "global-linking": "packages.global-linking",
        "uikit-utils": "packages.uikit-utils"
      },
      "script": "{\n  \"name\": \"yootheme-doctools-example-package\",\n  \"version\": \"1.0.0\",\n  \"description\": \"simple example package\",\n  \"main\": \"parser.js\",\n  \"bin\": {\n    \"doctools\": \"./bin/doctools.js\"\n  },\n  \"scripts\": {\n    \"dev\": \"./bin/doctools.js\"\n  },\n  \"extra\": {\n      \"scriptDocs\": {\n        \"dev\": \"launches the examples of this package\"\n      }\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"dasdeck/random-repo\"\n  },\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"glob\": \"^7.1.2\",\n    \"jsdoc-api\": \"^4.0.3\",\n    \"jsdom\": \"^11.7.0\",\n    \"lodash\": \"^4.17.5\",\n    \"minimist\": \"^1.2.0\",\n    \"vue-router\": \"^3.0.1\",\n    \"babel-core\": \"^6.26.0\",\n    \"babel-loader\": \"^7.1.4\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"babel-preset-stage-2\": \"^6.24.1\",\n    \"css-loader\": \"^0.28.11\",\n    \"marked\": \"^0.3.19\",\n    \"uikit\": \"^3.0.0-beta.42\",\n    \"vue\": \"^2.5.16\",\n    \"vue-loader\": \"^14.2.2\",\n    \"vue-template-compiler\": \"^2.5.16\",\n    \"webpack\": \"^4.5.0\",\n    \"webpack-cli\": \"^2.0.14\",\n    \"webpack-dev-server\": \"^3.1.3\"\n  }\n}\n",
      "packageJson": {
        "name": "yootheme-doctools-example-package",
        "version": "1.0.0",
        "description": "simple example package",
        "main": "parser.js",
        "bin": {
          "doctools": "./bin/doctools.js"
        },
        "scripts": {
          "dev": "./bin/doctools.js"
        },
        "extra": {
          "scriptDocs": {
            "dev": "launches the examples of this package"
          }
        },
        "repository": {
          "type": "git",
          "url": "dasdeck/random-repo"
        },
        "author": "",
        "license": "MIT",
        "dependencies": {
          "glob": "^7.1.2",
          "jsdoc-api": "^4.0.3",
          "jsdom": "^11.7.0",
          "lodash": "^4.17.5",
          "minimist": "^1.2.0",
          "vue-router": "^3.0.1",
          "babel-core": "^6.26.0",
          "babel-loader": "^7.1.4",
          "babel-preset-env": "^1.6.1",
          "babel-preset-stage-2": "^6.24.1",
          "css-loader": "^0.28.11",
          "marked": "^0.3.19",
          "uikit": "^3.0.0-beta.42",
          "vue": "^2.5.16",
          "vue-loader": "^14.2.2",
          "vue-template-compiler": "^2.5.16",
          "webpack": "^4.5.0",
          "webpack-cli": "^2.0.14",
          "webpack-dev-server": "^3.1.3"
        }
      },
      "readme": "# The readme files\n\n## this header (h2) is listen in the menu\n\n### this is just a sub header",
      "types": {
        "NodeLike": "src.uikit.types.js"
      }
    },
    "packages.global-linking": {
      "_events": {},
      "_eventsCount": 0,
      "package": "examples",
      "path": "/Users/jms/yootheme-doctools/examples/packages/global-linking",
      "fileInPackage": "./packages/global-linking",
      "name": "global-linking",
      "resource": "packages.global-linking",
      "type": "package",
      "resources": {
        "packages.global-linking.src.config.js": "packages.global-linking.src.config.js",
        "packages.global-linking.src.test.js": "packages.global-linking.src.test.js"
      },
      "globals": {},
      "script": "{\n    \n}",
      "packageJson": {},
      "readme": "# test for global links to types etc.",
      "types": {
        "TestConfig": "packages.global-linking.src.config.js"
      },
      "packages": {}
    },
    "packages.global-linking.src.config.js": {
      "_events": {},
      "_eventsCount": 0,
      "package": "packages.global-linking",
      "path": "/Users/jms/yootheme-doctools/examples/packages/global-linking/src/config.js",
      "fileInPackage": "./packages/global-linking/src/config.js",
      "name": "config",
      "resource": "packages.global-linking.src.config.js",
      "script": "\n /**\n  * defaults\n  * @typedef TestConfig\n  */\nmodule.exports = {\n\n    /**\n     * default value one\n     * @type {String}\n     */\n    configKey1: 'default'\n};",
      "type": "module",
      "module": {
        "all": [
          {
            "comment": "/**\n  * defaults\n  * @typedef TestConfig\n  */",
            "meta": {
              "filename": "eacsg09zp4rb3bgudydw0r.js",
              "lineno": 2,
              "columnno": 1,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "description": "defaults",
            "kind": "typedef",
            "name": "TestConfig",
            "longname": "TestConfig",
            "scope": "global"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                48,
                158
              ],
              "filename": "eacsg09zp4rb3bgudydw0r.js",
              "lineno": 6,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000003",
                "name": "module.exports",
                "type": "ObjectExpression",
                "value": "{\"configKey1\":\"default\"}",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "exports",
            "longname": "module.exports",
            "kind": "member",
            "memberof": "module",
            "scope": "static",
            "code": "module.exports = {\n\n    /**\n     * default value one\n     * @type {String}\n     */\n    configKey1: 'default'\n};"
          },
          {
            "comment": "/**\n     * default value one\n     * @type {String}\n     */",
            "meta": {
              "range": [
                135,
                156
              ],
              "filename": "eacsg09zp4rb3bgudydw0r.js",
              "lineno": 12,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000008",
                "name": "configKey1",
                "type": "Literal",
                "value": "default"
              }
            },
            "description": "default value one",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "configKey1",
            "longname": "module.exports.configKey1",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "configKey1: 'default'\n};"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/eacsg09zp4rb3bgudydw0r.js"
            ]
          }
        ],
        "documented": [
          {
            "comment": "/**\n  * defaults\n  * @typedef TestConfig\n  */",
            "meta": {
              "filename": "eacsg09zp4rb3bgudydw0r.js",
              "lineno": 2,
              "columnno": 1,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "description": "defaults",
            "kind": "typedef",
            "name": "TestConfig",
            "longname": "TestConfig",
            "scope": "global"
          },
          {
            "comment": "/**\n     * default value one\n     * @type {String}\n     */",
            "meta": {
              "range": [
                135,
                156
              ],
              "filename": "eacsg09zp4rb3bgudydw0r.js",
              "lineno": 12,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000008",
                "name": "configKey1",
                "type": "Literal",
                "value": "default"
              }
            },
            "description": "default value one",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "configKey1",
            "longname": "module.exports.configKey1",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "configKey1: 'default'\n};"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/eacsg09zp4rb3bgudydw0r.js"
            ]
          }
        ],
        "global": [
          {
            "comment": "/**\n  * defaults\n  * @typedef TestConfig\n  */",
            "meta": {
              "filename": "eacsg09zp4rb3bgudydw0r.js",
              "lineno": 2,
              "columnno": 1,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "description": "defaults",
            "kind": "typedef",
            "name": "TestConfig",
            "longname": "TestConfig",
            "scope": "global"
          },
          {
            "comment": "/**\n     * default value one\n     * @type {String}\n     */",
            "meta": {
              "range": [
                135,
                156
              ],
              "filename": "eacsg09zp4rb3bgudydw0r.js",
              "lineno": 12,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000008",
                "name": "configKey1",
                "type": "Literal",
                "value": "default"
              }
            },
            "description": "default value one",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "configKey1",
            "longname": "module.exports.configKey1",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "configKey1: 'default'\n};"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/eacsg09zp4rb3bgudydw0r.js"
            ]
          }
        ],
        "types": {
          "typedef": [
            {
              "comment": "/**\n  * defaults\n  * @typedef TestConfig\n  */",
              "meta": {
                "filename": "eacsg09zp4rb3bgudydw0r.js",
                "lineno": 2,
                "columnno": 1,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {}
              },
              "description": "defaults",
              "kind": "typedef",
              "name": "TestConfig",
              "longname": "TestConfig",
              "scope": "global"
            }
          ],
          "member": [
            {
              "comment": "/**\n     * default value one\n     * @type {String}\n     */",
              "meta": {
                "range": [
                  135,
                  156
                ],
                "filename": "eacsg09zp4rb3bgudydw0r.js",
                "lineno": 12,
                "columnno": 4,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000008",
                  "name": "configKey1",
                  "type": "Literal",
                  "value": "default"
                }
              },
              "description": "default value one",
              "type": {
                "names": [
                  "String"
                ]
              },
              "name": "configKey1",
              "longname": "module.exports.configKey1",
              "kind": "member",
              "memberof": "module.exports",
              "scope": "static",
              "code": "configKey1: 'default'\n};"
            }
          ],
          "package": [
            {
              "kind": "package",
              "longname": "package:undefined",
              "files": [
                "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/eacsg09zp4rb3bgudydw0r.js"
              ]
            }
          ]
        }
      },
      "component": {}
    },
    "packages.global-linking.src.test.js": {
      "_events": {},
      "_eventsCount": 0,
      "package": "packages.global-linking",
      "path": "/Users/jms/yootheme-doctools/examples/packages/global-linking/src/test.js",
      "fileInPackage": "./packages/global-linking/src/test.js",
      "name": "test",
      "resource": "packages.global-linking.src.test.js",
      "script": "\nmodule.exports = {\n\n    /**\n     * @param {TestConfig} conf - the config for the test\n     */\n    test(conf) {\n    }\n\n}",
      "type": "module",
      "module": {
        "all": [
          {
            "comment": "",
            "meta": {
              "range": [
                1,
                120
              ],
              "filename": "idusz7h9oxfy7mok6mzrnc.js",
              "lineno": 2,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000003",
                "name": "module.exports",
                "type": "ObjectExpression",
                "value": "{\"test\":\"\"}",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "exports",
            "longname": "module.exports",
            "kind": "member",
            "memberof": "module",
            "scope": "static",
            "code": "module.exports = {\n\n    /**\n     * @param {TestConfig} conf - the config for the test\n     */\n    test(conf) {\n    }\n\n}"
          },
          {
            "comment": "/**\n     * @param {TestConfig} conf - the config for the test\n     */",
            "meta": {
              "range": [
                99,
                117
              ],
              "filename": "idusz7h9oxfy7mok6mzrnc.js",
              "lineno": 7,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000008",
                "name": "test",
                "type": "FunctionExpression"
              }
            },
            "params": [
              {
                "type": {
                  "names": [
                    "TestConfig"
                  ]
                },
                "description": "the config for the test",
                "name": "conf"
              }
            ],
            "name": "test",
            "longname": "module.exports.test",
            "kind": "function",
            "memberof": "module.exports",
            "scope": "static",
            "simpleName": "test",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "conf",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "TestConfig"
                      ]
                    }
                  },
                  "3": "the config for the test"
                }
              ]
            },
            "signature": "test (conf: TestConfig)",
            "code": "test(conf) {\n    }\n\n}"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/idusz7h9oxfy7mok6mzrnc.js"
            ]
          }
        ],
        "documented": [
          {
            "comment": "/**\n     * @param {TestConfig} conf - the config for the test\n     */",
            "meta": {
              "range": [
                99,
                117
              ],
              "filename": "idusz7h9oxfy7mok6mzrnc.js",
              "lineno": 7,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000008",
                "name": "test",
                "type": "FunctionExpression"
              }
            },
            "params": [
              {
                "type": {
                  "names": [
                    "TestConfig"
                  ]
                },
                "description": "the config for the test",
                "name": "conf"
              }
            ],
            "name": "test",
            "longname": "module.exports.test",
            "kind": "function",
            "memberof": "module.exports",
            "scope": "static",
            "simpleName": "test",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "conf",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "TestConfig"
                      ]
                    }
                  },
                  "3": "the config for the test"
                }
              ]
            },
            "signature": "test (conf: TestConfig)",
            "code": "test(conf) {\n    }\n\n}"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/idusz7h9oxfy7mok6mzrnc.js"
            ]
          }
        ],
        "global": [
          {
            "comment": "/**\n     * @param {TestConfig} conf - the config for the test\n     */",
            "meta": {
              "range": [
                99,
                117
              ],
              "filename": "idusz7h9oxfy7mok6mzrnc.js",
              "lineno": 7,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000008",
                "name": "test",
                "type": "FunctionExpression"
              }
            },
            "params": [
              {
                "type": {
                  "names": [
                    "TestConfig"
                  ]
                },
                "description": "the config for the test",
                "name": "conf"
              }
            ],
            "name": "test",
            "longname": "module.exports.test",
            "kind": "function",
            "memberof": "module.exports",
            "scope": "static",
            "simpleName": "test",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "conf",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "TestConfig"
                      ]
                    }
                  },
                  "3": "the config for the test"
                }
              ]
            },
            "signature": "test (conf: TestConfig)",
            "code": "test(conf) {\n    }\n\n}"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/idusz7h9oxfy7mok6mzrnc.js"
            ]
          }
        ],
        "types": {
          "function": [
            {
              "comment": "/**\n     * @param {TestConfig} conf - the config for the test\n     */",
              "meta": {
                "range": [
                  99,
                  117
                ],
                "filename": "idusz7h9oxfy7mok6mzrnc.js",
                "lineno": 7,
                "columnno": 4,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000008",
                  "name": "test",
                  "type": "FunctionExpression"
                }
              },
              "params": [
                {
                  "type": {
                    "names": [
                      "TestConfig"
                    ]
                  },
                  "description": "the config for the test",
                  "name": "conf"
                }
              ],
              "name": "test",
              "longname": "module.exports.test",
              "kind": "function",
              "memberof": "module.exports",
              "scope": "static",
              "simpleName": "test",
              "tables": {
                "arguments": [
                  {
                    "0": "name",
                    "1": "type",
                    "3": "description"
                  },
                  {
                    "0": "conf",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "TestConfig"
                        ]
                      }
                    },
                    "3": "the config for the test"
                  }
                ]
              },
              "signature": "test (conf: TestConfig)",
              "code": "test(conf) {\n    }\n\n}"
            }
          ],
          "package": [
            {
              "kind": "package",
              "longname": "package:undefined",
              "files": [
                "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/idusz7h9oxfy7mok6mzrnc.js"
              ]
            }
          ]
        }
      },
      "component": {}
    },
    "packages.uikit-utils": {
      "_events": {},
      "_eventsCount": 0,
      "package": "examples",
      "path": "/Users/jms/yootheme-doctools/examples/packages/uikit-utils",
      "fileInPackage": "./packages/uikit-utils",
      "name": "uikit-utils",
      "resource": "packages.uikit-utils",
      "type": "package",
      "resources": {
        "packages.uikit-utils.src.ajax.js": "packages.uikit-utils.src.ajax.js"
      },
      "globals": {},
      "script": "{\n    \"name\": \"uikit-utils\"\n}",
      "packageJson": {
        "name": "uikit-utils"
      },
      "packages": {}
    },
    "packages.uikit-utils.src.ajax.js": {
      "_events": {},
      "_eventsCount": 0,
      "package": "packages.uikit-utils",
      "path": "/Users/jms/yootheme-doctools/examples/packages/uikit-utils/src/ajax.js",
      "fileInPackage": "./packages/uikit-utils/src/ajax.js",
      "name": "ajax",
      "resource": "packages.uikit-utils.src.ajax.js",
      "script": "/**\n * @file\n * HTTP transport tools\n * The following functions are to work with asynchronous tasks. They are used for executing code asynchronously.\n */\n// import {on} from './event';\n// import {Promise} from './promise';\n// import {assign, noop} from './lang';\n\n/**\n * Make asynchronous calls to a specific URL and pass it some data.\n *\n * @example\n *\n### Usage\n\n```javascript\nutil.ajax('/api/users', { responseType: 'json' })\n.then(function(xhr) {\n    console.log(xhr.response);\n});\n```\n\n### Result\n\n```json\n{parsed: 'json-object', with: 'some', example: 'data'}\n```\n *\n * @category web\n * @param {String} url - The URL to call\n * @param {Object} [options] - Additional options passed to the ajax call\n * @param {Object} options.data - Additional data passed to the request\n * @param {String} options.method - Method to call the URL, e.g. `GET`, `POST`, `PUT`, `DELETE`\n *\n * @returns {Promise} A promise that resolves with the given payload on success and rejects on failure\n */\nexport function ajax(url, options) {\n    return new Promise((resolve, reject) => {\n\n        const env = assign({\n            data: null,\n            method: 'GET',\n            headers: {},\n            xhr: new XMLHttpRequest(),\n            beforeSend: noop,\n            responseType: ''\n        }, options);\n\n        env.beforeSend(env);\n\n        const {xhr} = env;\n\n        for (const prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */\nexport function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n",
      "type": "module",
      "readme": "",
      "module": {
        "all": [
          {
            "comment": "/**\n * @file\n * HTTP transport tools\n * The following functions are to work with asynchronous tasks. They are used for executing code asynchronously.\n */",
            "meta": {
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 1,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "name": "nwd39gwgm44zypmc1my3k.js",
            "kind": "file",
            "description": "HTTP transport tools\nThe following functions are to work with asynchronous tasks. They are used for executing code asynchronously.",
            "preserveName": true,
            "longname": "nwd39gwgm44zypmc1my3k.js",
            "scope": "global"
          },
          {
            "comment": "/**\n * Make asynchronous calls to a specific URL and pass it some data.\n *\n * @example\n *\n### Usage\n\n```javascript\nutil.ajax('/api/users', { responseType: 'json' })\n.then(function(xhr) {\n    console.log(xhr.response);\n});\n```\n\n### Result\n\n```json\n{parsed: 'json-object', with: 'some', example: 'data'}\n```\n *\n * @category web\n * @param {String} url - The URL to call\n * @param {Object} [options] - Additional options passed to the ajax call\n * @param {Object} options.data - Additional data passed to the request\n * @param {String} options.method - Method to call the URL, e.g. `GET`, `POST`, `PUT`, `DELETE`\n *\n * @returns {Promise} A promise that resolves with the given payload on success and rejects on failure\n */",
            "meta": {
              "range": [
                983,
                2257
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 38,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000002",
                "name": "exports.ajax",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "url",
                  "options"
                ]
              }
            },
            "description": "Make asynchronous calls to a specific URL and pass it some data.",
            "examples": [
              "### Usage\n\n```javascript\nutil.ajax('/api/users', { responseType: 'json' })\n.then(function(xhr) {\n    console.log(xhr.response);\n});\n```\n\n### Result\n\n```json\n{parsed: 'json-object', with: 'some', example: 'data'}\n```"
            ],
            "tags": [
              {
                "originalTitle": "category",
                "title": "category",
                "text": "web",
                "value": "web"
              }
            ],
            "params": [
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "The URL to call",
                "name": "url"
              },
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "optional": true,
                "description": "Additional options passed to the ajax call",
                "name": "options"
              },
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "description": "Additional data passed to the request",
                "name": "data"
              },
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "Method to call the URL, e.g. `GET`, `POST`, `PUT`, `DELETE`",
                "name": "method"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise"
                  ]
                },
                "description": "A promise that resolves with the given payload on success and rejects on failure"
              }
            ],
            "name": "ajax",
            "longname": "ajax",
            "kind": "function",
            "scope": "global",
            "simpleName": "ajax",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "url",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "3": "The URL to call"
                },
                {
                  "0": "options",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "3": "Additional options passed to the ajax call",
                  "optional": true
                }
              ],
              "options": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "data",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "3": "Additional data passed to the request"
                },
                {
                  "0": "method",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "3": "Method to call the URL, e.g. `GET`, `POST`, `PUT`, `DELETE`"
                }
              ]
            },
            "signature": "ajax (url: String, [options: Object]) : Promise",
            "code": "export function ajax(url, options) {\n    return new Promise((resolve, reject) => {\n\n        const env = assign({\n            data: null,\n            method: 'GET',\n            headers: {},\n            xhr: new XMLHttpRequest(),\n            beforeSend: noop,\n            responseType: ''\n        }, options);\n\n        env.beforeSend(env);\n\n        const {xhr} = env;\n\n        for (const prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */\nexport function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                990,
                2257
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 38,
              "columnno": 7,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000003",
                "name": "ajax",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "url",
                  "options"
                ]
              },
              "vars": {
                "": null
              }
            },
            "undocumented": true,
            "name": "ajax",
            "longname": "ajax",
            "kind": "function",
            "scope": "global",
            "params": [],
            "code": "function ajax(url, options) {\n    return new Promise((resolve, reject) => {\n\n        const env = assign({\n            data: null,\n            method: 'GET',\n            headers: {},\n            xhr: new XMLHttpRequest(),\n            beforeSend: noop,\n            responseType: ''\n        }, options);\n\n        env.beforeSend(env);\n\n        const {xhr} = env;\n\n        for (const prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */\nexport function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1081,
                1289
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 41,
              "columnno": 14,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000016",
                "name": "env",
                "type": "CallExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "env",
            "longname": "<anonymous>~env",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "env = assign({\n            data: null,\n            method: 'GET',\n            headers: {},\n            xhr: new XMLHttpRequest(),\n            beforeSend: noop,\n            responseType: ''\n        }, options);\n\n        env.beforeSend(env);\n\n        const {xhr} = env;\n\n        for (const prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n."
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1108,
                1118
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 42,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000021",
                "name": "data",
                "type": "Literal",
                "value": null
              }
            },
            "undocumented": true,
            "name": "data",
            "longname": "data",
            "kind": "member",
            "scope": "global",
            "code": "data: null,\n            method: 'GET',\n            headers: {},\n            xhr: new XMLHttpRequest(),\n            beforeSend: noop,\n            responseType: ''\n        }, options);\n\n        env.beforeSend(env);\n\n        const {xhr} = env;\n\n        for (const prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n      "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1132,
                1145
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 43,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000023",
                "name": "method",
                "type": "Literal",
                "value": "GET"
              }
            },
            "undocumented": true,
            "name": "method",
            "longname": "method",
            "kind": "member",
            "scope": "global",
            "code": "method: 'GET',\n            headers: {},\n            xhr: new XMLHttpRequest(),\n            beforeSend: noop,\n            responseType: ''\n        }, options);\n\n        env.beforeSend(env);\n\n        const {xhr} = env;\n\n        for (const prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an imag"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1159,
                1170
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 44,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000025",
                "name": "headers",
                "type": "ObjectExpression",
                "value": "{}"
              }
            },
            "undocumented": true,
            "name": "headers",
            "longname": "headers",
            "kind": "member",
            "scope": "global",
            "code": "headers: {},\n            xhr: new XMLHttpRequest(),\n            beforeSend: noop,\n            responseType: ''\n        }, options);\n\n        env.beforeSend(env);\n\n        const {xhr} = env;\n\n        for (const prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascri"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1184,
                1209
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 45,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000027",
                "name": "xhr",
                "type": "NewExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "xhr",
            "longname": "xhr",
            "kind": "member",
            "scope": "global",
            "code": "xhr: new XMLHttpRequest(),\n            beforeSend: noop,\n            responseType: ''\n        }, options);\n\n        env.beforeSend(env);\n\n        const {xhr} = env;\n\n        for (const prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n  "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1223,
                1239
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 46,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000030",
                "name": "beforeSend",
                "type": "Identifier",
                "value": "noop"
              }
            },
            "undocumented": true,
            "name": "beforeSend",
            "longname": "beforeSend",
            "kind": "member",
            "scope": "global",
            "code": "beforeSend: noop,\n            responseType: ''\n        }, options);\n\n        env.beforeSend(env);\n\n        const {xhr} = env;\n\n        for (const prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/i"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1253,
                1269
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 47,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000032",
                "name": "responseType",
                "type": "Literal",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "responseType",
            "longname": "responseType",
            "kind": "member",
            "scope": "global",
            "code": "responseType: ''\n        }, options);\n\n        env.beforeSend(env);\n\n        const {xhr} = env;\n\n        for (const prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1337,
                1340
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 52,
              "columnno": 15,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000044",
                "name": "xhr",
                "type": "Identifier",
                "value": "xhr"
              }
            },
            "undocumented": true,
            "name": "xhr",
            "longname": "xhr",
            "kind": "member",
            "scope": "global",
            "code": "xhr} = env;\n\n        for (const prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */\nexport function getImage(src) {\n\n    return new Promise((resolve, reject) =>"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1369,
                1373
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 54,
              "columnno": 19,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000049",
                "name": "prop"
              }
            },
            "undocumented": true,
            "name": "prop",
            "longname": "<anonymous>~prop",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */\nexport function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1458,
                1479
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 58,
              "columnno": 20,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000061",
                "name": "xhr[undefined]",
                "type": "MemberExpression",
                "value": "env[undefined]",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "xhr[undefined]",
            "longname": "xhr[undefined]",
            "kind": "member",
            "scope": "global",
            "code": "xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */\nexport function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1607,
                1613
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 66,
              "columnno": 19,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000083",
                "name": "header"
              }
            },
            "undocumented": true,
            "name": "header",
            "longname": "<anonymous>~header",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */\nexport function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1964,
                1967
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 76,
              "columnno": 20,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000148",
                "name": "xhr",
                "type": "Identifier",
                "value": "xhr"
              }
            },
            "undocumented": true,
            "name": "xhr",
            "longname": "xhr",
            "kind": "member",
            "scope": "global",
            "code": "xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */\nexport function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1989,
                2007
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 77,
              "columnno": 20,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000150",
                "name": "status",
                "type": "MemberExpression",
                "value": "xhr.status"
              }
            },
            "undocumented": true,
            "name": "status",
            "longname": "status",
            "kind": "member",
            "scope": "global",
            "code": "status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */\nexport function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2127,
                2130
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 83,
              "columnno": 70,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000168",
                "name": "xhr",
                "type": "Identifier",
                "value": "xhr"
              }
            },
            "undocumented": true,
            "name": "xhr",
            "longname": "xhr",
            "kind": "member",
            "scope": "global",
            "code": "xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */\nexport function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2210,
                2213
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 84,
              "columnno": 74,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000184",
                "name": "xhr",
                "type": "Identifier",
                "value": "xhr"
              }
            },
            "undocumented": true,
            "name": "xhr",
            "longname": "xhr",
            "kind": "member",
            "scope": "global",
            "code": "xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */\nexport function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */",
            "meta": {
              "range": [
                2601,
                2819
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 109,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000194",
                "name": "exports.getImage",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "src"
                ]
              }
            },
            "description": "Load an image asynchronously.",
            "examples": [
              "### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```"
            ],
            "params": [
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "url to an image",
                "name": "src"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise.<Image, Error>"
                  ]
                },
                "description": "A promise resolving with an Image object"
              }
            ],
            "name": "getImage",
            "longname": "getImage",
            "kind": "function",
            "scope": "global",
            "simpleName": "getImage",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "src",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "3": "url to an image"
                }
              ]
            },
            "signature": "getImage (src: String) : Promise.<Image, Error>",
            "code": "export function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2608,
                2819
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 109,
              "columnno": 7,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000195",
                "name": "getImage",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "src"
                ]
              },
              "vars": {
                "": null
              }
            },
            "undocumented": true,
            "name": "getImage",
            "longname": "getImage",
            "kind": "function",
            "scope": "global",
            "params": [],
            "code": "function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2694,
                2711
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 112,
              "columnno": 14,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000207",
                "name": "img",
                "type": "NewExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "img",
            "longname": "<anonymous>~img",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2722,
                2742
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 114,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000212",
                "name": "img.onerror",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "reject",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "onerror",
            "longname": "<anonymous>~img.onerror",
            "kind": "member",
            "memberof": "<anonymous>~img",
            "scope": "static",
            "code": "img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2752,
                2783
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 115,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000218",
                "name": "img.onload",
                "type": "ArrowFunctionExpression",
                "funcscope": "<anonymous>",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "onload",
            "longname": "<anonymous>~img.onload",
            "kind": "function",
            "memberof": "<anonymous>~img",
            "scope": "static",
            "code": "img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2794,
                2807
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 117,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000227",
                "name": "img.src",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "src",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "src",
            "longname": "<anonymous>~img.src",
            "kind": "member",
            "memberof": "<anonymous>~img",
            "scope": "static",
            "code": "img.src = src;\n    });\n\n}\n"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/nwd39gwgm44zypmc1my3k.js"
            ]
          }
        ],
        "documented": [
          {
            "comment": "/**\n * @file\n * HTTP transport tools\n * The following functions are to work with asynchronous tasks. They are used for executing code asynchronously.\n */",
            "meta": {
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 1,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "name": "nwd39gwgm44zypmc1my3k.js",
            "kind": "file",
            "description": "HTTP transport tools\nThe following functions are to work with asynchronous tasks. They are used for executing code asynchronously.",
            "preserveName": true,
            "longname": "nwd39gwgm44zypmc1my3k.js",
            "scope": "global"
          },
          {
            "comment": "/**\n * Make asynchronous calls to a specific URL and pass it some data.\n *\n * @example\n *\n### Usage\n\n```javascript\nutil.ajax('/api/users', { responseType: 'json' })\n.then(function(xhr) {\n    console.log(xhr.response);\n});\n```\n\n### Result\n\n```json\n{parsed: 'json-object', with: 'some', example: 'data'}\n```\n *\n * @category web\n * @param {String} url - The URL to call\n * @param {Object} [options] - Additional options passed to the ajax call\n * @param {Object} options.data - Additional data passed to the request\n * @param {String} options.method - Method to call the URL, e.g. `GET`, `POST`, `PUT`, `DELETE`\n *\n * @returns {Promise} A promise that resolves with the given payload on success and rejects on failure\n */",
            "meta": {
              "range": [
                983,
                2257
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 38,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000002",
                "name": "exports.ajax",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "url",
                  "options"
                ]
              }
            },
            "description": "Make asynchronous calls to a specific URL and pass it some data.",
            "examples": [
              "### Usage\n\n```javascript\nutil.ajax('/api/users', { responseType: 'json' })\n.then(function(xhr) {\n    console.log(xhr.response);\n});\n```\n\n### Result\n\n```json\n{parsed: 'json-object', with: 'some', example: 'data'}\n```"
            ],
            "tags": [
              {
                "originalTitle": "category",
                "title": "category",
                "text": "web",
                "value": "web"
              }
            ],
            "params": [
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "The URL to call",
                "name": "url"
              },
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "optional": true,
                "description": "Additional options passed to the ajax call",
                "name": "options"
              },
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "description": "Additional data passed to the request",
                "name": "data"
              },
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "Method to call the URL, e.g. `GET`, `POST`, `PUT`, `DELETE`",
                "name": "method"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise"
                  ]
                },
                "description": "A promise that resolves with the given payload on success and rejects on failure"
              }
            ],
            "name": "ajax",
            "longname": "ajax",
            "kind": "function",
            "scope": "global",
            "simpleName": "ajax",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "url",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "3": "The URL to call"
                },
                {
                  "0": "options",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "3": "Additional options passed to the ajax call",
                  "optional": true
                }
              ],
              "options": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "data",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "3": "Additional data passed to the request"
                },
                {
                  "0": "method",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "3": "Method to call the URL, e.g. `GET`, `POST`, `PUT`, `DELETE`"
                }
              ]
            },
            "signature": "ajax (url: String, [options: Object]) : Promise",
            "code": "export function ajax(url, options) {\n    return new Promise((resolve, reject) => {\n\n        const env = assign({\n            data: null,\n            method: 'GET',\n            headers: {},\n            xhr: new XMLHttpRequest(),\n            beforeSend: noop,\n            responseType: ''\n        }, options);\n\n        env.beforeSend(env);\n\n        const {xhr} = env;\n\n        for (const prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */\nexport function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */",
            "meta": {
              "range": [
                2601,
                2819
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 109,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000194",
                "name": "exports.getImage",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "src"
                ]
              }
            },
            "description": "Load an image asynchronously.",
            "examples": [
              "### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```"
            ],
            "params": [
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "url to an image",
                "name": "src"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise.<Image, Error>"
                  ]
                },
                "description": "A promise resolving with an Image object"
              }
            ],
            "name": "getImage",
            "longname": "getImage",
            "kind": "function",
            "scope": "global",
            "simpleName": "getImage",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "src",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "3": "url to an image"
                }
              ]
            },
            "signature": "getImage (src: String) : Promise.<Image, Error>",
            "code": "export function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/nwd39gwgm44zypmc1my3k.js"
            ]
          }
        ],
        "global": [
          {
            "comment": "/**\n * @file\n * HTTP transport tools\n * The following functions are to work with asynchronous tasks. They are used for executing code asynchronously.\n */",
            "meta": {
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 1,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "name": "nwd39gwgm44zypmc1my3k.js",
            "kind": "file",
            "description": "HTTP transport tools\nThe following functions are to work with asynchronous tasks. They are used for executing code asynchronously.",
            "preserveName": true,
            "longname": "nwd39gwgm44zypmc1my3k.js",
            "scope": "global"
          },
          {
            "comment": "/**\n * Make asynchronous calls to a specific URL and pass it some data.\n *\n * @example\n *\n### Usage\n\n```javascript\nutil.ajax('/api/users', { responseType: 'json' })\n.then(function(xhr) {\n    console.log(xhr.response);\n});\n```\n\n### Result\n\n```json\n{parsed: 'json-object', with: 'some', example: 'data'}\n```\n *\n * @category web\n * @param {String} url - The URL to call\n * @param {Object} [options] - Additional options passed to the ajax call\n * @param {Object} options.data - Additional data passed to the request\n * @param {String} options.method - Method to call the URL, e.g. `GET`, `POST`, `PUT`, `DELETE`\n *\n * @returns {Promise} A promise that resolves with the given payload on success and rejects on failure\n */",
            "meta": {
              "range": [
                983,
                2257
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 38,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000002",
                "name": "exports.ajax",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "url",
                  "options"
                ]
              }
            },
            "description": "Make asynchronous calls to a specific URL and pass it some data.",
            "examples": [
              "### Usage\n\n```javascript\nutil.ajax('/api/users', { responseType: 'json' })\n.then(function(xhr) {\n    console.log(xhr.response);\n});\n```\n\n### Result\n\n```json\n{parsed: 'json-object', with: 'some', example: 'data'}\n```"
            ],
            "tags": [
              {
                "originalTitle": "category",
                "title": "category",
                "text": "web",
                "value": "web"
              }
            ],
            "params": [
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "The URL to call",
                "name": "url"
              },
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "optional": true,
                "description": "Additional options passed to the ajax call",
                "name": "options"
              },
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "description": "Additional data passed to the request",
                "name": "data"
              },
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "Method to call the URL, e.g. `GET`, `POST`, `PUT`, `DELETE`",
                "name": "method"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise"
                  ]
                },
                "description": "A promise that resolves with the given payload on success and rejects on failure"
              }
            ],
            "name": "ajax",
            "longname": "ajax",
            "kind": "function",
            "scope": "global",
            "simpleName": "ajax",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "url",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "3": "The URL to call"
                },
                {
                  "0": "options",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "3": "Additional options passed to the ajax call",
                  "optional": true
                }
              ],
              "options": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "data",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "3": "Additional data passed to the request"
                },
                {
                  "0": "method",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "3": "Method to call the URL, e.g. `GET`, `POST`, `PUT`, `DELETE`"
                }
              ]
            },
            "signature": "ajax (url: String, [options: Object]) : Promise",
            "code": "export function ajax(url, options) {\n    return new Promise((resolve, reject) => {\n\n        const env = assign({\n            data: null,\n            method: 'GET',\n            headers: {},\n            xhr: new XMLHttpRequest(),\n            beforeSend: noop,\n            responseType: ''\n        }, options);\n\n        env.beforeSend(env);\n\n        const {xhr} = env;\n\n        for (const prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */\nexport function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "comment": "/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */",
            "meta": {
              "range": [
                2601,
                2819
              ],
              "filename": "nwd39gwgm44zypmc1my3k.js",
              "lineno": 109,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000194",
                "name": "exports.getImage",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "src"
                ]
              }
            },
            "description": "Load an image asynchronously.",
            "examples": [
              "### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```"
            ],
            "params": [
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "url to an image",
                "name": "src"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise.<Image, Error>"
                  ]
                },
                "description": "A promise resolving with an Image object"
              }
            ],
            "name": "getImage",
            "longname": "getImage",
            "kind": "function",
            "scope": "global",
            "simpleName": "getImage",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "src",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "3": "url to an image"
                }
              ]
            },
            "signature": "getImage (src: String) : Promise.<Image, Error>",
            "code": "export function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/nwd39gwgm44zypmc1my3k.js"
            ]
          }
        ],
        "description": "HTTP transport tools\nThe following functions are to work with asynchronous tasks. They are used for executing code asynchronously.",
        "types": {
          "file": [
            {
              "comment": "/**\n * @file\n * HTTP transport tools\n * The following functions are to work with asynchronous tasks. They are used for executing code asynchronously.\n */",
              "meta": {
                "filename": "nwd39gwgm44zypmc1my3k.js",
                "lineno": 1,
                "columnno": 0,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {}
              },
              "name": "nwd39gwgm44zypmc1my3k.js",
              "kind": "file",
              "description": "HTTP transport tools\nThe following functions are to work with asynchronous tasks. They are used for executing code asynchronously.",
              "preserveName": true,
              "longname": "nwd39gwgm44zypmc1my3k.js",
              "scope": "global"
            }
          ],
          "function": [
            {
              "comment": "/**\n * Make asynchronous calls to a specific URL and pass it some data.\n *\n * @example\n *\n### Usage\n\n```javascript\nutil.ajax('/api/users', { responseType: 'json' })\n.then(function(xhr) {\n    console.log(xhr.response);\n});\n```\n\n### Result\n\n```json\n{parsed: 'json-object', with: 'some', example: 'data'}\n```\n *\n * @category web\n * @param {String} url - The URL to call\n * @param {Object} [options] - Additional options passed to the ajax call\n * @param {Object} options.data - Additional data passed to the request\n * @param {String} options.method - Method to call the URL, e.g. `GET`, `POST`, `PUT`, `DELETE`\n *\n * @returns {Promise} A promise that resolves with the given payload on success and rejects on failure\n */",
              "meta": {
                "range": [
                  983,
                  2257
                ],
                "filename": "nwd39gwgm44zypmc1my3k.js",
                "lineno": 38,
                "columnno": 0,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000002",
                  "name": "exports.ajax",
                  "type": "FunctionDeclaration",
                  "paramnames": [
                    "url",
                    "options"
                  ]
                }
              },
              "description": "Make asynchronous calls to a specific URL and pass it some data.",
              "examples": [
                "### Usage\n\n```javascript\nutil.ajax('/api/users', { responseType: 'json' })\n.then(function(xhr) {\n    console.log(xhr.response);\n});\n```\n\n### Result\n\n```json\n{parsed: 'json-object', with: 'some', example: 'data'}\n```"
              ],
              "tags": [
                {
                  "originalTitle": "category",
                  "title": "category",
                  "text": "web",
                  "value": "web"
                }
              ],
              "params": [
                {
                  "type": {
                    "names": [
                      "String"
                    ]
                  },
                  "description": "The URL to call",
                  "name": "url"
                },
                {
                  "type": {
                    "names": [
                      "Object"
                    ]
                  },
                  "optional": true,
                  "description": "Additional options passed to the ajax call",
                  "name": "options"
                },
                {
                  "type": {
                    "names": [
                      "Object"
                    ]
                  },
                  "description": "Additional data passed to the request",
                  "name": "data"
                },
                {
                  "type": {
                    "names": [
                      "String"
                    ]
                  },
                  "description": "Method to call the URL, e.g. `GET`, `POST`, `PUT`, `DELETE`",
                  "name": "method"
                }
              ],
              "returns": [
                {
                  "type": {
                    "names": [
                      "Promise"
                    ]
                  },
                  "description": "A promise that resolves with the given payload on success and rejects on failure"
                }
              ],
              "name": "ajax",
              "longname": "ajax",
              "kind": "function",
              "scope": "global",
              "simpleName": "ajax",
              "tables": {
                "arguments": [
                  {
                    "0": "name",
                    "1": "type",
                    "3": "description"
                  },
                  {
                    "0": "url",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "String"
                        ]
                      }
                    },
                    "3": "The URL to call"
                  },
                  {
                    "0": "options",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "Object"
                        ]
                      }
                    },
                    "3": "Additional options passed to the ajax call",
                    "optional": true
                  }
                ],
                "options": [
                  {
                    "0": "name",
                    "1": "type",
                    "3": "description"
                  },
                  {
                    "0": "data",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "Object"
                        ]
                      }
                    },
                    "3": "Additional data passed to the request"
                  },
                  {
                    "0": "method",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "String"
                        ]
                      }
                    },
                    "3": "Method to call the URL, e.g. `GET`, `POST`, `PUT`, `DELETE`"
                  }
                ]
              },
              "signature": "ajax (url: String, [options: Object]) : Promise",
              "code": "export function ajax(url, options) {\n    return new Promise((resolve, reject) => {\n\n        const env = assign({\n            data: null,\n            method: 'GET',\n            headers: {},\n            xhr: new XMLHttpRequest(),\n            beforeSend: noop,\n            responseType: ''\n        }, options);\n\n        env.beforeSend(env);\n\n        const {xhr} = env;\n\n        for (const prop in env) {\n            if (prop in xhr) {\n                try {\n\n                    xhr[prop] = env[prop];\n\n                } catch (e) {}\n            }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n            xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n\n            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                resolve(xhr);\n            } else {\n                reject(assign(Error(xhr.statusText), {\n                    xhr,\n                    status: xhr.status\n                }));\n            }\n\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), {xhr})));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), {xhr})));\n\n        xhr.send(env.data);\n    });\n}\n/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */\nexport function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
            },
            {
              "comment": "/**\n * Load an image asynchronously.\n * @example\n### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```\n * @param {String} src - url to an image\n * @returns {Promise.<Image, Error>} A promise resolving with an Image object\n */",
              "meta": {
                "range": [
                  2601,
                  2819
                ],
                "filename": "nwd39gwgm44zypmc1my3k.js",
                "lineno": 109,
                "columnno": 0,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000194",
                  "name": "exports.getImage",
                  "type": "FunctionDeclaration",
                  "paramnames": [
                    "src"
                  ]
                }
              },
              "description": "Load an image asynchronously.",
              "examples": [
                "### Usage\n\n```javascript\nutil.getImage('/path/to/image.jpeg')\n.then(function(img) {\n    console.log(img);\n});\n```\n\n### Result\n\n```html\n<img src=\"/path/to/image.jpeg\">\n```"
              ],
              "params": [
                {
                  "type": {
                    "names": [
                      "String"
                    ]
                  },
                  "description": "url to an image",
                  "name": "src"
                }
              ],
              "returns": [
                {
                  "type": {
                    "names": [
                      "Promise.<Image, Error>"
                    ]
                  },
                  "description": "A promise resolving with an Image object"
                }
              ],
              "name": "getImage",
              "longname": "getImage",
              "kind": "function",
              "scope": "global",
              "simpleName": "getImage",
              "tables": {
                "arguments": [
                  {
                    "0": "name",
                    "1": "type",
                    "3": "description"
                  },
                  {
                    "0": "src",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "String"
                        ]
                      }
                    },
                    "3": "url to an image"
                  }
                ]
              },
              "signature": "getImage (src: String) : Promise.<Image, Error>",
              "code": "export function getImage(src) {\n\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = reject;\n        img.onload = () => resolve(img);\n\n        img.src = src;\n    });\n\n}\n"
            }
          ],
          "package": [
            {
              "kind": "package",
              "longname": "package:undefined",
              "files": [
                "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/nwd39gwgm44zypmc1my3k.js"
              ]
            }
          ]
        }
      },
      "component": {}
    },
    "src.uikit.accordion.js": {
      "_events": {},
      "_eventsCount": 0,
      "package": "examples",
      "path": "/Users/jms/yootheme-doctools/examples/src/uikit/accordion.js",
      "fileInPackage": "./src/uikit/accordion.js",
      "name": "accordion",
      "resource": "src.uikit.accordion.js",
      "script": "// import {Class, Togglable} from '../mixin/index';\n// import {$, $$, attr, filter, getIndex, hasClass, includes, index, toggleClass, unwrap, wrapAll} from '../util/index';\nimport Togglable from './togglable';\nconst Class = Togglable;\n\n/**\n *\n * @file\n * @type {UIkitComponent}\n */\n\n /**\n  * test\n  */\nexport function test() {\n\n}\n\n /**\n  * an accordion component\n  */\nexport default {\n\n    mixins: [Class, Togglable],\n\n    props: {\n        /**\n         * CSS selector of the element(s) to toggle.\n         */\n        targets: String,\n        /**\n         * Index of the element to open initially.\n         */\n        active: null,\n        /**\n         * Allow all items to be closed.\n         */\n        collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};",
      "type": "UIkitComponent",
      "readme": "## usage:\n\nThe Accordion component consists of a parent container with the `uk-accordion` attribute, and a title and content part for each accordion item.\n\n| Class                   | Description                                                                |\n|:------------------------|:---------------------------------------------------------------------------|\n| `.uk-accordion-title`   | Defines and styles the toggle for each accordion item. Use `<a>` elements. |\n| `.uk-accordion-content` | Defines the content part for each accordion item.                          |\n\n```html\n<ul uk-accordion>\n    <li>\n        <a class=\"uk-accordion-title\" href=\"#\"></a>\n        <div class=\"uk-accordion-content\"></div>\n    </li>\n</ul>\n```\n\n```run:uikit\n<ul uk-accordion>\n    <li class=\"uk-open\">\n        <a class=\"uk-accordion-title\" href=\"#\">Item 1</a>\n        <div class=\"uk-accordion-content\">\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n        </div>\n    </li>\n    <li>\n        <a class=\"uk-accordion-title\" href=\"#\">Item 2</a>\n        <div class=\"uk-accordion-content\">\n            <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor reprehenderit.</p>\n        </div>\n    </li>\n    <li>\n        <a class=\"uk-accordion-title\" href=\"#\">Item 3</a>\n        <div class=\"uk-accordion-content\">\n            <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat proident.</p>\n        </div>\n    </li>\n</ul>\n```\n\n***\n\n### No collapsing\n\nBy default, all accordion items can be collapsed. To prevent this behavior and always maintain one open item, add the `collapsible: false` option to the attribute.\n\n```html\n<ul uk-accordion=\"collapsible: false\">...</ul>\n```\n\n```run:uikit\n<ul uk-accordion=\"collapsible: false\">\n    <li>\n        <a class=\"uk-accordion-title\" href=\"#\">Item 1</a>\n        <div class=\"uk-accordion-content\">\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n        </div>\n    </li>\n    <li>\n        <a class=\"uk-accordion-title\" href=\"#\">Item 2</a>\n        <div class=\"uk-accordion-content\">\n            <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor reprehenderit.</p>\n        </div>\n    </li>\n    <li>\n        <a class=\"uk-accordion-title\" href=\"#\">Item 3</a>\n        <div class=\"uk-accordion-content\">\n            <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat proident.</p>\n        </div>\n    </li>\n</ul>\n```\n\n***\n\n### Multiple open items\n\nTo display multiple content sections at the same time without one collapsing when the other one is opened, add the `multiple: true` option to the `uk-accordion` attribute.\n\n```html\n<ul uk-accordion=\"multiple: true\">...</ul>\n```\n\n```run:uikit\n<ul uk-accordion=\"multiple: true\">\n    <li class=\"uk-open\">\n        <a class=\"uk-accordion-title\" href=\"#\">Item 1</a>\n        <div class=\"uk-accordion-content\">\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n        </div>\n    </li>\n    <li>\n        <a class=\"uk-accordion-title\" href=\"#\">Item 2</a>\n        <div class=\"uk-accordion-content\">\n            <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor reprehenderit.</p>\n        </div>\n    </li>\n    <li>\n        <a class=\"uk-accordion-title\" href=\"#\">Item 3</a>\n        <div class=\"uk-accordion-content\">\n            <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat proident.</p>\n        </div>\n    </li>\n</ul>\n```\n\n***\n\n### Set open items\n\nTo specify which items should be opened initially, add the `.uk-open` class to the item. You can also use this to open multiple items. Just make sure to add the option `multiple: true` to the `uk-accordion` attribute.\n\n**Note** Alternatively, you can open a single item by adding the `active: <index>` option to the `uk-accordion` attribute, e.g. `active: 1` to show the second element (the index is zero-based). Note that this will overwrite the `uk-open` class.\n\n```html\n<ul uk-accordion>\n    <li></li>\n    <li class=\"uk-open\"></li>\n    <li></li>\n</ul>\n```\n\n```run:uikit\n<ul uk-accordion>\n    <li>\n        <a class=\"uk-accordion-title\" href=\"#\">Item 1</a>\n        <div class=\"uk-accordion-content\">\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n        </div>\n    </li>\n    <li class=\"uk-open\">\n        <a class=\"uk-accordion-title\" href=\"#\">Item 2</a>\n        <div class=\"uk-accordion-content\">\n            <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor reprehenderit.</p>\n        </div>\n    </li>\n    <li>\n        <a class=\"uk-accordion-title\" href=\"#\">Item 3</a>\n        <div class=\"uk-accordion-content\">\n            <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat proident.</p>\n        </div>\n    </li>\n</ul>\n```\n",
      "module": {
        "all": [
          {
            "comment": "",
            "meta": {
              "range": [
                216,
                233
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 4,
              "columnno": 6,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000007",
                "name": "Class",
                "type": "Identifier",
                "value": "Togglable"
              }
            },
            "undocumented": true,
            "name": "Class",
            "longname": "Class",
            "kind": "constant",
            "scope": "global",
            "params": [],
            "code": "Class = Togglable;\n\n/**\n *\n * @file\n * @type {UIkitComponent}\n */\n\n /**\n  * test\n  */\nexport function test() {\n\n}\n\n /**\n  * an accordion component\n  */\nexport default {\n\n    mixins: [Class, Togglable],\n\n    props: {\n        /**\n     "
          },
          {
            "comment": "/**\n *\n * @file\n * @type {UIkitComponent}\n */",
            "meta": {
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 6,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "name": "woibp5qr6ujdkv81baw9b.js",
            "kind": "file",
            "preserveName": true,
            "type": {
              "names": [
                "UIkitComponent"
              ]
            },
            "longname": "woibp5qr6ujdkv81baw9b.js",
            "scope": "global"
          },
          {
            "comment": "/**\n  * test\n  */",
            "meta": {
              "range": [
                302,
                329
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 15,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000010",
                "name": "exports.test",
                "type": "FunctionDeclaration",
                "paramnames": []
              }
            },
            "description": "test",
            "name": "test",
            "longname": "test",
            "kind": "function",
            "scope": "global",
            "simpleName": "test",
            "signature": "test()",
            "code": "export function test() {\n\n}\n\n /**\n  * an accordion component\n  */\nexport default {\n\n    mixins: [Class, Togglable],\n\n    props: {\n        /**\n         * CSS selector of the element(s) to toggle.\n         */\n        targets: String,\n        /**\n         * Index of the element to open initially.\n         */\n        active: null,\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                309,
                329
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 15,
              "columnno": 7,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000011",
                "name": "test",
                "type": "FunctionDeclaration",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "test",
            "longname": "test",
            "kind": "function",
            "scope": "global",
            "params": [],
            "code": "function test() {\n\n}\n\n /**\n  * an accordion component\n  */\nexport default {\n\n    mixins: [Class, Togglable],\n\n    props: {\n        /**\n         * CSS selector of the element(s) to toggle.\n         */\n        targets: String,\n        /**\n         * Index of the element to open initially.\n         */\n        active: null,\n       "
          },
          {
            "comment": "/**\n  * an accordion component\n  */",
            "meta": {
              "range": [
                368,
                4428
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 22,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000014",
                "name": "module.exports",
                "type": "ObjectExpression"
              }
            },
            "description": "an accordion component",
            "name": "exports",
            "longname": "module.exports",
            "kind": "member",
            "memberof": "module",
            "scope": "static",
            "code": "export default {\n\n    mixins: [Class, Togglable],\n\n    props: {\n        /**\n         * CSS selector of the element(s) to toggle.\n         */\n        targets: String,\n        /**\n         * Index of the element to open initially.\n         */\n        active: null,\n        /**\n         * Allow all items to be closed.\n         */\n        collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                390,
                416
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 24,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000016",
                "name": "mixins",
                "type": "ArrayExpression",
                "value": "[\"Class\",\"Togglable\"]"
              }
            },
            "undocumented": true,
            "name": "mixins",
            "longname": "module.exports.mixins",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "mixins: [Class, Togglable],\n\n    props: {\n        /**\n         * CSS selector of the element(s) to toggle.\n         */\n        targets: String,\n        /**\n         * Index of the element to open initially.\n         */\n        active: null,\n        /**\n         * Allow all items to be closed.\n         */\n        collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                423,
                1199
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 26,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000020",
                "name": "props",
                "type": "ObjectExpression",
                "value": "{\"targets\":\"\",\"active\":null,\"collapsible\":\"\",\"multiple\":\"\",\"toggle\":\"\",\"content\":\"\",\"transition\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "props",
            "longname": "module.exports.props",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "props: {\n        /**\n         * CSS selector of the element(s) to toggle.\n         */\n        targets: String,\n        /**\n         * Index of the element to open initially.\n         */\n        active: null,\n        /**\n         * Allow all items to be closed.\n         */\n        collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target}"
          },
          {
            "comment": "/**\n         * CSS selector of the element(s) to toggle.\n         */",
            "meta": {
              "range": [
                517,
                532
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 30,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000022",
                "name": "targets",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "CSS selector of the element(s) to toggle.",
            "name": "targets",
            "longname": "module.exports.props.targets",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "targets: String,\n        /**\n         * Index of the element to open initially.\n         */\n        active: null,\n        /**\n         * Allow all items to be closed.\n         */\n        collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: Str",
            "simpleName": "targets"
          },
          {
            "comment": "/**\n         * Index of the element to open initially.\n         */",
            "meta": {
              "range": [
                617,
                629
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 34,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000024",
                "name": "active",
                "type": "Literal",
                "value": null
              }
            },
            "description": "Index of the element to open initially.",
            "name": "active",
            "longname": "module.exports.props.active",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "active: null,\n        /**\n         * Allow all items to be closed.\n         */\n        collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n    ",
            "simpleName": "active"
          },
          {
            "comment": "/**\n         * Allow all items to be closed.\n         */",
            "meta": {
              "range": [
                704,
                724
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 38,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000026",
                "name": "collapsible",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "Allow all items to be closed.",
            "name": "collapsible",
            "longname": "module.exports.props.collapsible",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content",
            "simpleName": "collapsible"
          },
          {
            "comment": "/**\n         * Allow multiple open items.\n         */",
            "meta": {
              "range": [
                796,
                813
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 42,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000028",
                "name": "multiple",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "Allow multiple open items.",
            "name": "multiple",
            "longname": "module.exports.props.multiple",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {O",
            "simpleName": "multiple"
          },
          {
            "comment": "/**\n         * The toggle selector, which toggles accordion items.\n         */",
            "meta": {
              "range": [
                910,
                924
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 46,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000030",
                "name": "toggle",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "The toggle selector, which toggles accordion items.",
            "name": "toggle",
            "longname": "module.exports.props.toggle",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    }",
            "simpleName": "toggle"
          },
          {
            "comment": "/**\n         * The content selector, which selects the accordion content elements.\n         */",
            "meta": {
              "range": [
                1037,
                1052
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 50,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000032",
                "name": "content",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "The content selector, which selects the accordion content elements.",
            "name": "content",
            "longname": "module.exports.props.content",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(inde",
            "simpleName": "content"
          },
          {
            "comment": "/**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */",
            "meta": {
              "range": [
                1175,
                1193
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 54,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000034",
                "name": "transition",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "The transition to use when revealing items. Use keyword for easing functions.",
            "name": "transition",
            "longname": "module.exports.props.transition",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(",
            "simpleName": "transition"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1206,
                1489
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 57,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000036",
                "name": "defaults",
                "type": "ObjectExpression",
                "value": "{\"targets\":\"> *\",\"active\":false,\"animation\":\"\",\"collapsible\":true,\"multiple\":false,\"clsOpen\":\"uk-open\",\"toggle\":\"> .uk-accordion-title\",\"content\":\"> .uk-accordion-content\",\"transition\":\"ease\"}"
              }
            },
            "undocumented": true,
            "name": "defaults",
            "longname": "module.exports.defaults",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1226,
                1240
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 58,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000038",
                "name": "targets",
                "type": "Literal",
                "value": "> *"
              }
            },
            "undocumented": true,
            "name": "targets",
            "longname": "module.exports.defaults.targets",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1250,
                1263
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 59,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000040",
                "name": "active",
                "type": "Literal",
                "value": false
              }
            },
            "undocumented": true,
            "name": "active",
            "longname": "module.exports.defaults.active",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleI"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1273,
                1290
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 60,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000042",
                "name": "animation",
                "type": "ArrayExpression",
                "value": "[true]"
              }
            },
            "undocumented": true,
            "name": "animation",
            "longname": "module.exports.defaults.animation",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.cl"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1300,
                1317
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 61,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000045",
                "name": "collapsible",
                "type": "Literal",
                "value": true
              }
            },
            "undocumented": true,
            "name": "collapsible",
            "longname": "module.exports.defaults.collapsible",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible &&"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1327,
                1342
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 62,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000047",
                "name": "multiple",
                "type": "Literal",
                "value": false
              }
            },
            "undocumented": true,
            "name": "multiple",
            "longname": "module.exports.defaults.multiple",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1352,
                1370
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 63,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000049",
                "name": "clsOpen",
                "type": "Literal",
                "value": "uk-open"
              }
            },
            "undocumented": true,
            "name": "clsOpen",
            "longname": "module.exports.defaults.clsOpen",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(acti"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1380,
                1411
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 64,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000051",
                "name": "toggle",
                "type": "Literal",
                "value": "> .uk-accordion-title"
              }
            },
            "undocumented": true,
            "name": "toggle",
            "longname": "module.exports.defaults.toggle",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1421,
                1455
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 65,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000053",
                "name": "content",
                "type": "Literal",
                "value": "> .uk-accordion-content"
              }
            },
            "undocumented": true,
            "name": "content",
            "longname": "module.exports.defaults.content",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {Node"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1465,
                1483
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 66,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000055",
                "name": "transition",
                "type": "Literal",
                "value": "ease"
              }
            },
            "undocumented": true,
            "name": "transition",
            "longname": "module.exports.defaults.transition",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1496,
                1834
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 69,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000057",
                "name": "computed",
                "type": "ObjectExpression",
                "value": "{\"items\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "computed",
            "longname": "module.exports.computed",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n               "
          },
          {
            "comment": "/**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */",
            "meta": {
              "range": [
                1757,
                1827
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 78,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000059",
                "name": "items",
                "type": "FunctionExpression"
              }
            },
            "description": "Items that are inside this accordion",
            "access": "private",
            "params": [
              {
                "type": {
                  "names": [
                    "Object.target"
                  ]
                },
                "name": "param0"
              },
              {
                "type": {
                  "names": [
                    "NodeLike"
                  ]
                },
                "name": "$el"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Array.<NodeLike>"
                  ]
                },
                "description": "Returns all nodes insinde this accordion"
              }
            ],
            "name": "items",
            "longname": "module.exports.computed.items",
            "kind": "function",
            "memberof": "module.exports.computed",
            "scope": "static",
            "simpleName": "items",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type"
                },
                {
                  "0": "param0",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object.target"
                      ]
                    }
                  }
                },
                {
                  "0": "$el",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "NodeLike"
                      ]
                    }
                  }
                }
              ]
            },
            "signature": "module.exports.computed.items (param0: Object.target, $el: NodeLike) : Array.<NodeLike>",
            "code": "items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, stat"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1764,
                1771
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 78,
              "columnno": 15,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000062",
                "name": "targets",
                "type": "Identifier",
                "value": "targets"
              }
            },
            "undocumented": true,
            "name": "targets",
            "longname": "targets",
            "kind": "member",
            "scope": "global",
            "code": "targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n     "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1841,
                2190
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 84,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000071",
                "name": "events",
                "type": "ArrayExpression",
                "value": "[\"{\\\"name\\\":\\\"click\\\",\\\"delegate\\\":\\\"\\\",\\\"handler\\\":\\\"\\\"}\"]"
              }
            },
            "undocumented": true,
            "name": "events",
            "longname": "module.exports.events",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1875,
                1888
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 88,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000074",
                "name": "name",
                "type": "Literal",
                "value": "click"
              }
            },
            "undocumented": true,
            "name": "name",
            "longname": "name",
            "kind": "member",
            "scope": "global",
            "code": "name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wr"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1903,
                1993
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 90,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000076",
                "name": "delegate",
                "type": "FunctionExpression"
              }
            },
            "undocumented": true,
            "name": "delegate",
            "longname": "delegate",
            "kind": "function",
            "scope": "global",
            "code": "delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n   "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2008,
                2172
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 94,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000092",
                "name": "handler",
                "type": "FunctionExpression"
              }
            },
            "undocumented": true,
            "name": "handler",
            "longname": "handler",
            "kind": "function",
            "scope": "global",
            "code": "handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this."
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2197,
                2448
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 103,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000128",
                "name": "connected",
                "type": "FunctionExpression"
              },
              "vars": {
                "active": "module.exports.connected~active"
              }
            },
            "undocumented": true,
            "name": "connected",
            "longname": "module.exports.connected",
            "kind": "function",
            "memberof": "module.exports",
            "scope": "static",
            "code": "connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2294,
                2334
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 109,
              "columnno": 14,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000140",
                "name": "active",
                "type": "MemberExpression",
                "value": "this.items[undefined]"
              }
            },
            "undocumented": true,
            "name": "active",
            "longname": "module.exports.connected~active",
            "kind": "constant",
            "memberof": "module.exports.connected",
            "scope": "inner",
            "params": [],
            "code": "active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2455,
                2749
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 115,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000169",
                "name": "update",
                "type": "FunctionExpression"
              },
              "vars": {
                "": null,
                "active": "module.exports.update~active"
              }
            },
            "undocumented": true,
            "name": "update",
            "longname": "module.exports.update",
            "kind": "function",
            "memberof": "module.exports",
            "scope": "static",
            "code": "update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2588,
                2670
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 119,
              "columnno": 14,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000198",
                "name": "active",
                "type": "LogicalExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "active",
            "longname": "module.exports.update~active",
            "kind": "constant",
            "memberof": "module.exports.update",
            "scope": "inner",
            "params": [],
            "code": "active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2756,
                4425
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 125,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000230",
                "name": "methods",
                "type": "ObjectExpression",
                "value": "{\"toggle\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "methods",
            "longname": "module.exports.methods",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "/**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */",
            "meta": {
              "range": [
                2937,
                4418
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 132,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000232",
                "name": "toggle",
                "type": "FunctionExpression"
              },
              "vars": {
                "index": "module.exports.methods.toggle~index",
                "active": "module.exports.methods.toggle~active",
                "item": "module.exports.methods.toggle~item",
                "": null
              }
            },
            "description": "the toglle method to open or close accordions programatically",
            "params": [
              {
                "type": {
                  "names": [
                    "NodeLike"
                  ]
                },
                "name": "item"
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "animate"
              }
            ],
            "name": "toggle",
            "longname": "module.exports.methods.toggle",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "toggle",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type"
                },
                {
                  "0": "item",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "NodeLike"
                      ]
                    }
                  }
                },
                {
                  "0": "animate",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                }
              ]
            },
            "signature": "toggle (item: NodeLike, animate: *)",
            "code": "toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2980,
                3014
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 134,
              "columnno": 18,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000238",
                "name": "index",
                "type": "CallExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "index",
            "longname": "module.exports.methods.toggle~index",
            "kind": "constant",
            "memberof": "module.exports.methods.toggle",
            "scope": "inner",
            "params": [],
            "code": "index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3034,
                3081
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 135,
              "columnno": 18,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000247",
                "name": "active",
                "type": "CallExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "active",
            "longname": "module.exports.methods.toggle~active",
            "kind": "constant",
            "memberof": "module.exports.methods.toggle",
            "scope": "inner",
            "params": [],
            "code": "active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3096,
                3120
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 137,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000261",
                "name": "item",
                "type": "MemberExpression",
                "funcscope": "module.exports.methods.toggle",
                "value": "this.items[undefined]",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "item",
            "longname": "module.exports.methods.toggle~item",
            "kind": "member",
            "memberof": "module.exports.methods.toggle",
            "scope": "inner",
            "code": "item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3293,
                3313
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 143,
              "columnno": 26,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000297",
                "name": "isItem",
                "type": "BinaryExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "isItem",
            "longname": "<anonymous>~isItem",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3341,
                3386
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 144,
              "columnno": 26,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000303",
                "name": "state",
                "type": "LogicalExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "state",
            "longname": "<anonymous>~state",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3615,
                3690
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 152,
              "columnno": 26,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000341",
                "name": "content",
                "type": "ConditionalExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "content",
            "longname": "<anonymous>~content",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3757,
                3796
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 155,
              "columnno": 24,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000365",
                "name": "el._wrapper",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "_wrapper",
            "longname": "el._wrapper",
            "kind": "member",
            "memberof": "el",
            "scope": "static",
            "code": "el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                4273,
                4291
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 167,
              "columnno": 28,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000428",
                "name": "el._wrapper",
                "type": "Literal",
                "value": null,
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "_wrapper",
            "longname": "el._wrapper",
            "kind": "member",
            "memberof": "el",
            "scope": "static",
            "code": "el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/woibp5qr6ujdkv81baw9b.js"
            ]
          }
        ],
        "documented": [
          {
            "comment": "/**\n *\n * @file\n * @type {UIkitComponent}\n */",
            "meta": {
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 6,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "name": "woibp5qr6ujdkv81baw9b.js",
            "kind": "file",
            "preserveName": true,
            "type": {
              "names": [
                "UIkitComponent"
              ]
            },
            "longname": "woibp5qr6ujdkv81baw9b.js",
            "scope": "global"
          },
          {
            "comment": "/**\n  * test\n  */",
            "meta": {
              "range": [
                302,
                329
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 15,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000010",
                "name": "exports.test",
                "type": "FunctionDeclaration",
                "paramnames": []
              }
            },
            "description": "test",
            "name": "test",
            "longname": "test",
            "kind": "function",
            "scope": "global",
            "simpleName": "test",
            "signature": "test()",
            "code": "export function test() {\n\n}\n\n /**\n  * an accordion component\n  */\nexport default {\n\n    mixins: [Class, Togglable],\n\n    props: {\n        /**\n         * CSS selector of the element(s) to toggle.\n         */\n        targets: String,\n        /**\n         * Index of the element to open initially.\n         */\n        active: null,\n"
          },
          {
            "comment": "/**\n  * an accordion component\n  */",
            "meta": {
              "range": [
                368,
                4428
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 22,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000014",
                "name": "module.exports",
                "type": "ObjectExpression"
              }
            },
            "description": "an accordion component",
            "name": "exports",
            "longname": "module.exports",
            "kind": "member",
            "memberof": "module",
            "scope": "static",
            "code": "export default {\n\n    mixins: [Class, Togglable],\n\n    props: {\n        /**\n         * CSS selector of the element(s) to toggle.\n         */\n        targets: String,\n        /**\n         * Index of the element to open initially.\n         */\n        active: null,\n        /**\n         * Allow all items to be closed.\n         */\n        collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "comment": "/**\n         * CSS selector of the element(s) to toggle.\n         */",
            "meta": {
              "range": [
                517,
                532
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 30,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000022",
                "name": "targets",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "CSS selector of the element(s) to toggle.",
            "name": "targets",
            "longname": "module.exports.props.targets",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "targets: String,\n        /**\n         * Index of the element to open initially.\n         */\n        active: null,\n        /**\n         * Allow all items to be closed.\n         */\n        collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: Str",
            "simpleName": "targets"
          },
          {
            "comment": "/**\n         * Index of the element to open initially.\n         */",
            "meta": {
              "range": [
                617,
                629
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 34,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000024",
                "name": "active",
                "type": "Literal",
                "value": null
              }
            },
            "description": "Index of the element to open initially.",
            "name": "active",
            "longname": "module.exports.props.active",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "active: null,\n        /**\n         * Allow all items to be closed.\n         */\n        collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n    ",
            "simpleName": "active"
          },
          {
            "comment": "/**\n         * Allow all items to be closed.\n         */",
            "meta": {
              "range": [
                704,
                724
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 38,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000026",
                "name": "collapsible",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "Allow all items to be closed.",
            "name": "collapsible",
            "longname": "module.exports.props.collapsible",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content",
            "simpleName": "collapsible"
          },
          {
            "comment": "/**\n         * Allow multiple open items.\n         */",
            "meta": {
              "range": [
                796,
                813
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 42,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000028",
                "name": "multiple",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "Allow multiple open items.",
            "name": "multiple",
            "longname": "module.exports.props.multiple",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {O",
            "simpleName": "multiple"
          },
          {
            "comment": "/**\n         * The toggle selector, which toggles accordion items.\n         */",
            "meta": {
              "range": [
                910,
                924
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 46,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000030",
                "name": "toggle",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "The toggle selector, which toggles accordion items.",
            "name": "toggle",
            "longname": "module.exports.props.toggle",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    }",
            "simpleName": "toggle"
          },
          {
            "comment": "/**\n         * The content selector, which selects the accordion content elements.\n         */",
            "meta": {
              "range": [
                1037,
                1052
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 50,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000032",
                "name": "content",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "The content selector, which selects the accordion content elements.",
            "name": "content",
            "longname": "module.exports.props.content",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(inde",
            "simpleName": "content"
          },
          {
            "comment": "/**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */",
            "meta": {
              "range": [
                1175,
                1193
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 54,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000034",
                "name": "transition",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "The transition to use when revealing items. Use keyword for easing functions.",
            "name": "transition",
            "longname": "module.exports.props.transition",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(",
            "simpleName": "transition"
          },
          {
            "comment": "/**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */",
            "meta": {
              "range": [
                1757,
                1827
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 78,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000059",
                "name": "items",
                "type": "FunctionExpression"
              }
            },
            "description": "Items that are inside this accordion",
            "access": "private",
            "params": [
              {
                "type": {
                  "names": [
                    "Object.target"
                  ]
                },
                "name": "param0"
              },
              {
                "type": {
                  "names": [
                    "NodeLike"
                  ]
                },
                "name": "$el"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Array.<NodeLike>"
                  ]
                },
                "description": "Returns all nodes insinde this accordion"
              }
            ],
            "name": "items",
            "longname": "module.exports.computed.items",
            "kind": "function",
            "memberof": "module.exports.computed",
            "scope": "static",
            "simpleName": "items",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type"
                },
                {
                  "0": "param0",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object.target"
                      ]
                    }
                  }
                },
                {
                  "0": "$el",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "NodeLike"
                      ]
                    }
                  }
                }
              ]
            },
            "signature": "module.exports.computed.items (param0: Object.target, $el: NodeLike) : Array.<NodeLike>",
            "code": "items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, stat"
          },
          {
            "comment": "/**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */",
            "meta": {
              "range": [
                2937,
                4418
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 132,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000232",
                "name": "toggle",
                "type": "FunctionExpression"
              },
              "vars": {
                "index": "module.exports.methods.toggle~index",
                "active": "module.exports.methods.toggle~active",
                "item": "module.exports.methods.toggle~item",
                "": null
              }
            },
            "description": "the toglle method to open or close accordions programatically",
            "params": [
              {
                "type": {
                  "names": [
                    "NodeLike"
                  ]
                },
                "name": "item"
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "animate"
              }
            ],
            "name": "toggle",
            "longname": "module.exports.methods.toggle",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "toggle",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type"
                },
                {
                  "0": "item",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "NodeLike"
                      ]
                    }
                  }
                },
                {
                  "0": "animate",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                }
              ]
            },
            "signature": "toggle (item: NodeLike, animate: *)",
            "code": "toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/woibp5qr6ujdkv81baw9b.js"
            ]
          }
        ],
        "global": [],
        "description": "an accordion component",
        "types": {
          "file": [
            {
              "comment": "/**\n *\n * @file\n * @type {UIkitComponent}\n */",
              "meta": {
                "filename": "woibp5qr6ujdkv81baw9b.js",
                "lineno": 6,
                "columnno": 0,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {}
              },
              "name": "woibp5qr6ujdkv81baw9b.js",
              "kind": "file",
              "preserveName": true,
              "type": {
                "names": [
                  "UIkitComponent"
                ]
              },
              "longname": "woibp5qr6ujdkv81baw9b.js",
              "scope": "global"
            }
          ],
          "function": [
            {
              "comment": "/**\n  * test\n  */",
              "meta": {
                "range": [
                  302,
                  329
                ],
                "filename": "woibp5qr6ujdkv81baw9b.js",
                "lineno": 15,
                "columnno": 0,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000010",
                  "name": "exports.test",
                  "type": "FunctionDeclaration",
                  "paramnames": []
                }
              },
              "description": "test",
              "name": "test",
              "longname": "test",
              "kind": "function",
              "scope": "global",
              "simpleName": "test",
              "signature": "test()",
              "code": "export function test() {\n\n}\n\n /**\n  * an accordion component\n  */\nexport default {\n\n    mixins: [Class, Togglable],\n\n    props: {\n        /**\n         * CSS selector of the element(s) to toggle.\n         */\n        targets: String,\n        /**\n         * Index of the element to open initially.\n         */\n        active: null,\n"
            }
          ],
          "member": [
            {
              "comment": "/**\n  * an accordion component\n  */",
              "meta": {
                "range": [
                  368,
                  4428
                ],
                "filename": "woibp5qr6ujdkv81baw9b.js",
                "lineno": 22,
                "columnno": 0,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000014",
                  "name": "module.exports",
                  "type": "ObjectExpression"
                }
              },
              "description": "an accordion component",
              "name": "exports",
              "longname": "module.exports",
              "kind": "member",
              "memberof": "module",
              "scope": "static",
              "code": "export default {\n\n    mixins: [Class, Togglable],\n\n    props: {\n        /**\n         * CSS selector of the element(s) to toggle.\n         */\n        targets: String,\n        /**\n         * Index of the element to open initially.\n         */\n        active: null,\n        /**\n         * Allow all items to be closed.\n         */\n        collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
            },
            {
              "comment": "/**\n         * CSS selector of the element(s) to toggle.\n         */",
              "meta": {
                "range": [
                  517,
                  532
                ],
                "filename": "woibp5qr6ujdkv81baw9b.js",
                "lineno": 30,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000022",
                  "name": "targets",
                  "type": "Identifier",
                  "value": "String"
                }
              },
              "description": "CSS selector of the element(s) to toggle.",
              "name": "targets",
              "longname": "module.exports.props.targets",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "targets: String,\n        /**\n         * Index of the element to open initially.\n         */\n        active: null,\n        /**\n         * Allow all items to be closed.\n         */\n        collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: Str",
              "simpleName": "targets"
            },
            {
              "comment": "/**\n         * Index of the element to open initially.\n         */",
              "meta": {
                "range": [
                  617,
                  629
                ],
                "filename": "woibp5qr6ujdkv81baw9b.js",
                "lineno": 34,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000024",
                  "name": "active",
                  "type": "Literal",
                  "value": null
                }
              },
              "description": "Index of the element to open initially.",
              "name": "active",
              "longname": "module.exports.props.active",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "active: null,\n        /**\n         * Allow all items to be closed.\n         */\n        collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n    ",
              "simpleName": "active"
            },
            {
              "comment": "/**\n         * Allow all items to be closed.\n         */",
              "meta": {
                "range": [
                  704,
                  724
                ],
                "filename": "woibp5qr6ujdkv81baw9b.js",
                "lineno": 38,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000026",
                  "name": "collapsible",
                  "type": "Identifier",
                  "value": "Boolean"
                }
              },
              "description": "Allow all items to be closed.",
              "name": "collapsible",
              "longname": "module.exports.props.collapsible",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content",
              "simpleName": "collapsible"
            },
            {
              "comment": "/**\n         * Allow multiple open items.\n         */",
              "meta": {
                "range": [
                  796,
                  813
                ],
                "filename": "woibp5qr6ujdkv81baw9b.js",
                "lineno": 42,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000028",
                  "name": "multiple",
                  "type": "Identifier",
                  "value": "Boolean"
                }
              },
              "description": "Allow multiple open items.",
              "name": "multiple",
              "longname": "module.exports.props.multiple",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {O",
              "simpleName": "multiple"
            },
            {
              "comment": "/**\n         * The toggle selector, which toggles accordion items.\n         */",
              "meta": {
                "range": [
                  910,
                  924
                ],
                "filename": "woibp5qr6ujdkv81baw9b.js",
                "lineno": 46,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000030",
                  "name": "toggle",
                  "type": "Identifier",
                  "value": "String"
                }
              },
              "description": "The toggle selector, which toggles accordion items.",
              "name": "toggle",
              "longname": "module.exports.props.toggle",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    }",
              "simpleName": "toggle"
            },
            {
              "comment": "/**\n         * The content selector, which selects the accordion content elements.\n         */",
              "meta": {
                "range": [
                  1037,
                  1052
                ],
                "filename": "woibp5qr6ujdkv81baw9b.js",
                "lineno": 50,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000032",
                  "name": "content",
                  "type": "Identifier",
                  "value": "String"
                }
              },
              "description": "The content selector, which selects the accordion content elements.",
              "name": "content",
              "longname": "module.exports.props.content",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(inde",
              "simpleName": "content"
            },
            {
              "comment": "/**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */",
              "meta": {
                "range": [
                  1175,
                  1193
                ],
                "filename": "woibp5qr6ujdkv81baw9b.js",
                "lineno": 54,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000034",
                  "name": "transition",
                  "type": "Identifier",
                  "value": "String"
                }
              },
              "description": "The transition to use when revealing items. Use keyword for easing functions.",
              "name": "transition",
              "longname": "module.exports.props.transition",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(",
              "simpleName": "transition"
            }
          ],
          "package": [
            {
              "kind": "package",
              "longname": "package:undefined",
              "files": [
                "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/woibp5qr6ujdkv81baw9b.js"
              ]
            }
          ]
        }
      },
      "component": {
        "props": {
          "targets": {
            "comment": "/**\n         * CSS selector of the element(s) to toggle.\n         */",
            "meta": {
              "range": [
                517,
                532
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 30,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000022",
                "name": "targets",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "CSS selector of the element(s) to toggle.",
            "name": "targets",
            "longname": "module.exports.props.targets",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "targets: String,\n        /**\n         * Index of the element to open initially.\n         */\n        active: null,\n        /**\n         * Allow all items to be closed.\n         */\n        collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: Str",
            "simpleName": "targets"
          },
          "active": {
            "comment": "/**\n         * Index of the element to open initially.\n         */",
            "meta": {
              "range": [
                617,
                629
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 34,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000024",
                "name": "active",
                "type": "Literal",
                "value": null
              }
            },
            "description": "Index of the element to open initially.",
            "name": "active",
            "longname": "module.exports.props.active",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "active: null,\n        /**\n         * Allow all items to be closed.\n         */\n        collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n    ",
            "simpleName": "active"
          },
          "collapsible": {
            "comment": "/**\n         * Allow all items to be closed.\n         */",
            "meta": {
              "range": [
                704,
                724
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 38,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000026",
                "name": "collapsible",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "Allow all items to be closed.",
            "name": "collapsible",
            "longname": "module.exports.props.collapsible",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "collapsible: Boolean,\n        /**\n         * Allow multiple open items.\n         */\n        multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content",
            "simpleName": "collapsible"
          },
          "multiple": {
            "comment": "/**\n         * Allow multiple open items.\n         */",
            "meta": {
              "range": [
                796,
                813
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 42,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000028",
                "name": "multiple",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "Allow multiple open items.",
            "name": "multiple",
            "longname": "module.exports.props.multiple",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "multiple: Boolean,\n        /**\n         * The toggle selector, which toggles accordion items.\n         */\n        toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {O",
            "simpleName": "multiple"
          },
          "toggle": {
            "comment": "/**\n         * The toggle selector, which toggles accordion items.\n         */",
            "meta": {
              "range": [
                910,
                924
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 46,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000030",
                "name": "toggle",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "The toggle selector, which toggles accordion items.",
            "name": "toggle",
            "longname": "module.exports.props.toggle",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "toggle: String,\n        /**\n         * The content selector, which selects the accordion content elements.\n         */\n        content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    }",
            "simpleName": "toggle"
          },
          "content": {
            "comment": "/**\n         * The content selector, which selects the accordion content elements.\n         */",
            "meta": {
              "range": [
                1037,
                1052
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 50,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000032",
                "name": "content",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "The content selector, which selects the accordion content elements.",
            "name": "content",
            "longname": "module.exports.props.content",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "content: String,\n        /**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */\n        transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(inde",
            "simpleName": "content"
          },
          "transition": {
            "comment": "/**\n         * The transition to use when revealing items. Use keyword for easing functions.\n         */",
            "meta": {
              "range": [
                1175,
                1193
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 54,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000034",
                "name": "transition",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "The transition to use when revealing items. Use keyword for easing functions.",
            "name": "transition",
            "longname": "module.exports.props.transition",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "transition: String\n    },\n\n    defaults: {\n        targets: '> *',\n        active: false,\n        animation: [true],\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        transition: 'ease'\n    },\n\n    computed: {\n\n        /**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */\n        items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(",
            "simpleName": "transition"
          }
        },
        "computed": {
          "items": {
            "comment": "/**\n         * Items that are inside this accordion\n         * @private\n         * @param {Object.target} param0\n         * @param {NodeLike} $el\n         * @returns {NodeLike[]} Returns all nodes insinde this accordion\n         */",
            "meta": {
              "range": [
                1757,
                1827
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 78,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000059",
                "name": "items",
                "type": "FunctionExpression"
              }
            },
            "description": "Items that are inside this accordion",
            "access": "private",
            "params": [
              {
                "type": {
                  "names": [
                    "Object.target"
                  ]
                },
                "name": "param0"
              },
              {
                "type": {
                  "names": [
                    "NodeLike"
                  ]
                },
                "name": "$el"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Array.<NodeLike>"
                  ]
                },
                "description": "Returns all nodes insinde this accordion"
              }
            ],
            "name": "items",
            "longname": "module.exports.computed.items",
            "kind": "function",
            "memberof": "module.exports.computed",
            "scope": "static",
            "simpleName": "items",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type"
                },
                {
                  "0": "param0",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object.target"
                      ]
                    }
                  }
                },
                {
                  "0": "$el",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "NodeLike"
                      ]
                    }
                  }
                }
              ]
            },
            "signature": "module.exports.computed.items (param0: Object.target, $el: NodeLike) : Array.<NodeLike>",
            "code": "items({targets}, $el) {\n            return $$(targets, $el);\n        }\n\n    },\n\n    events: [\n\n        {\n\n            name: 'click',\n\n            delegate() {\n                return `${this.targets} ${this.$props.toggle}`;\n            },\n\n            handler(e) {\n                e.preventDefault();\n                this.toggle(index($$(`${this.targets} ${this.$props.toggle}`, this.$el), e.current));\n            }\n\n        }\n\n    ],\n\n    connected() {\n\n        if (this.active === false) {\n            return;\n        }\n\n        const active = this.items[Number(this.active)];\n        if (active && !hasClass(active, this.clsOpen)) {\n            this.toggle(active, false);\n        }\n    },\n\n    update() {\n\n        this.items.forEach(el => this._toggleImmediate($(this.content, el), hasClass(el, this.clsOpen)));\n\n        const active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];\n        if (active) {\n            this.toggle(active, false);\n        }\n    },\n\n    methods: {\n\n        /**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */\n        toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, stat"
          }
        },
        "methods": {
          "toggle": {
            "comment": "/**\n         * the toglle method to open or close accordions programatically\n         * @param {NodeLike} item\n         * @param {*} animate\n         */",
            "meta": {
              "range": [
                2937,
                4418
              ],
              "filename": "woibp5qr6ujdkv81baw9b.js",
              "lineno": 132,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000232",
                "name": "toggle",
                "type": "FunctionExpression"
              },
              "vars": {
                "index": "module.exports.methods.toggle~index",
                "active": "module.exports.methods.toggle~active",
                "item": "module.exports.methods.toggle~item",
                "": null
              }
            },
            "description": "the toglle method to open or close accordions programatically",
            "params": [
              {
                "type": {
                  "names": [
                    "NodeLike"
                  ]
                },
                "name": "item"
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "animate"
              }
            ],
            "name": "toggle",
            "longname": "module.exports.methods.toggle",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "toggle",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type"
                },
                {
                  "0": "item",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "NodeLike"
                      ]
                    }
                  }
                },
                {
                  "0": "animate",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                }
              ]
            },
            "signature": "toggle (item: NodeLike, animate: *)",
            "code": "toggle(item, animate) {\n\n            const index = getIndex(item, this.items);\n            const active = filter(this.items, `.${this.clsOpen}`);\n\n            item = this.items[index];\n\n            item && [item]\n                .concat(!this.multiple && !includes(active, item) && active || [])\n                .forEach(el => {\n\n                    const isItem = el === item;\n                    const state = isItem && !hasClass(el, this.clsOpen);\n\n                    if (!state && isItem && !this.collapsible && active.length < 2) {\n                        return;\n                    }\n\n                    toggleClass(el, this.clsOpen, state);\n\n                    const content = el._wrapper ? el._wrapper.firstElementChild : $(this.content, el);\n\n                    if (!el._wrapper) {\n                        el._wrapper = wrapAll(content, '<div>');\n                        attr(el._wrapper, 'hidden', state ? '' : null);\n                    }\n\n                    this._toggleImmediate(content, true);\n                    this.toggleElement(el._wrapper, state, animate).then(() => {\n                        if (hasClass(el, this.clsOpen) === state) {\n\n                            if (!state) {\n                                this._toggleImmediate(content, false);\n                            }\n\n                            el._wrapper = null;\n                            unwrap(content);\n                        }\n                    });\n\n                });\n        }\n\n    }\n};"
          }
        }
      }
    },
    "src.uikit.togglable.js": {
      "_events": {},
      "_eventsCount": 0,
      "package": "examples",
      "path": "/Users/jms/yootheme-doctools/examples/src/uikit/togglable.js",
      "fileInPackage": "./src/uikit/togglable.js",
      "name": "togglable",
      "resource": "src.uikit.togglable.js",
      "script": "// import UIkit from '../api/index';\n// import {$$, Animation, assign, attr, css, fastdom, hasAttr, hasClass, height, includes, isBoolean, isUndefined, isVisible, noop, Promise, toFloat, toggleClass, toNodes, Transition, trigger} from '../util/index';\n\n\n/**\n * @file\n * @kind readme\n *\n * the toggleable can be explained in depth here!\n */\n\n/**\n * @file\n * @type {UIkitComponent}\n */\n\nexport default {\n\n    props: {\n        /**\n         * The class that is being toggled. Defaults to the hidden attribute.\n         */\n        cls: Boolean,\n        /**\n         * Reveal item directly or with a transition.\n         */\n        animation: 'list',\n        /**\n         * Animation duration in milliseconds.\n         */\n        duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n",
      "type": "UIkitComponent",
      "module": {
        "all": [
          {
            "comment": "/**\n * @file\n * @kind readme\n *\n * the toggleable can be explained in depth here!\n */",
            "meta": {
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 5,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "name": "zr2oof1k6fitj35bqaxq.js",
            "kind": "readme\n\nthe toggleable can be explained in depth here!",
            "preserveName": true,
            "longname": "zr2oof1k6fitj35bqaxq.js",
            "scope": "global"
          },
          {
            "comment": "/**\n * @file\n * @type {UIkitComponent}\n */",
            "meta": {
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 12,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "name": "zr2oof1k6fitj35bqaxq.js",
            "kind": "file",
            "preserveName": true,
            "type": {
              "names": [
                "UIkitComponent"
              ]
            },
            "longname": "zr2oof1k6fitj35bqaxq.js",
            "scope": "global"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                385,
                6997
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 17,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000002",
                "name": "module.exports",
                "type": "ObjectExpression"
              }
            },
            "undocumented": true,
            "name": "exports",
            "longname": "module.exports",
            "kind": "member",
            "memberof": "module",
            "scope": "static",
            "code": "export default {\n\n    props: {\n        /**\n         * The class that is being toggled. Defaults to the hidden attribute.\n         */\n        cls: Boolean,\n        /**\n         * Reveal item directly or with a transition.\n         */\n        animation: 'list',\n        /**\n         * Animation duration in milliseconds.\n         */\n        duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                407,
                961
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 19,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000004",
                "name": "props",
                "type": "ObjectExpression",
                "value": "{\"cls\":\"\",\"animation\":\"list\",\"duration\":\"\",\"origin\":\"\",\"transition\":\"\",\"queued\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "props",
            "longname": "module.exports.props",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "props: {\n        /**\n         * The class that is being toggled. Defaults to the hidden attribute.\n         */\n        cls: Boolean,\n        /**\n         * Reveal item directly or with a transition.\n         */\n        animation: 'list',\n        /**\n         * Animation duration in milliseconds.\n         */\n        duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow:"
          },
          {
            "comment": "/**\n         * The class that is being toggled. Defaults to the hidden attribute.\n         */",
            "meta": {
              "range": [
                526,
                538
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 23,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000006",
                "name": "cls",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "The class that is being toggled. Defaults to the hidden attribute.",
            "name": "cls",
            "longname": "module.exports.props.cls",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "cls: Boolean,\n        /**\n         * Reveal item directly or with a transition.\n         */\n        animation: 'list',\n        /**\n         * Animation duration in milliseconds.\n         */\n        duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origi",
            "simpleName": "cls"
          },
          {
            "comment": "/**\n         * Reveal item directly or with a transition.\n         */",
            "meta": {
              "range": [
                626,
                643
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 27,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000008",
                "name": "animation",
                "type": "Literal",
                "value": "list"
              }
            },
            "description": "Reveal item directly or with a transition.",
            "name": "animation",
            "longname": "module.exports.props.animation",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "animation: 'list',\n        /**\n         * Animation duration in milliseconds.\n         */\n        duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n           ",
            "simpleName": "animation"
          },
          {
            "comment": "/**\n         * Animation duration in milliseconds.\n         */",
            "meta": {
              "range": [
                724,
                740
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 31,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000010",
                "name": "duration",
                "type": "Identifier",
                "value": "Number"
              }
            },
            "description": "Animation duration in milliseconds.",
            "name": "duration",
            "longname": "module.exports.props.duration",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n     ",
            "simpleName": "duration"
          },
          {
            "comment": "/**\n         *\n         */",
            "meta": {
              "range": [
                785,
                799
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 35,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000012",
                "name": "origin",
                "type": "Identifier",
                "value": "String"
              }
            },
            "name": "origin",
            "longname": "module.exports.props.origin",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {",
            "simpleName": "origin"
          },
          {
            "comment": "/**\n         *\n         */",
            "meta": {
              "range": [
                844,
                862
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 39,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000014",
                "name": "transition",
                "type": "Identifier",
                "value": "String"
              }
            },
            "name": "transition",
            "longname": "module.exports.props.transition",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation ",
            "simpleName": "transition"
          },
          {
            "comment": "/**\n         * Toggle the targets successively.\n         */",
            "meta": {
              "range": [
                940,
                955
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 43,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000016",
                "name": "queued",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "Toggle the targets successively.",
            "name": "queued",
            "longname": "module.exports.props.queued",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(t",
            "simpleName": "queued"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                968,
                1529
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 46,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000018",
                "name": "defaults",
                "type": "ObjectExpression",
                "value": "{\"cls\":false,\"animation\":\"\",\"duration\":200,\"origin\":false,\"transition\":\"linear\",\"queued\":false,\"initProps\":\"\",\"hideProps\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "defaults",
            "longname": "module.exports.defaults",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scroll"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                988,
                998
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 47,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000020",
                "name": "cls",
                "type": "Literal",
                "value": false
              }
            },
            "undocumented": true,
            "name": "cls",
            "longname": "module.exports.defaults.cls",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggle"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1008,
                1026
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 48,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000022",
                "name": "animation",
                "type": "ArrayExpression",
                "value": "[false]"
              }
            },
            "undocumented": true,
            "name": "animation",
            "longname": "module.exports.defaults.animation",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                co"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1036,
                1049
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 49,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000025",
                "name": "duration",
                "type": "Literal",
                "value": 200
              }
            },
            "undocumented": true,
            "name": "duration",
            "longname": "module.exports.defaults.duration",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(e"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1059,
                1072
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 50,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000027",
                "name": "origin",
                "type": "Literal",
                "value": false
              }
            },
            "undocumented": true,
            "name": "origin",
            "longname": "module.exports.defaults.origin",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1082,
                1102
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 51,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000029",
                "name": "transition",
                "type": "Literal",
                "value": "linear"
              }
            },
            "undocumented": true,
            "name": "transition",
            "longname": "module.exports.defaults.transition",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n             "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1112,
                1125
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 52,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000031",
                "name": "queued",
                "type": "Literal",
                "value": false
              }
            },
            "undocumented": true,
            "name": "queued",
            "longname": "module.exports.defaults.queued",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUnd"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1136,
                1323
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 54,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000033",
                "name": "initProps",
                "type": "ObjectExpression",
                "value": "{\"overflow\":\"\",\"height\":\"\",\"paddingTop\":\"\",\"paddingBottom\":\"\",\"marginTop\":\"\",\"marginBottom\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "initProps",
            "longname": "module.exports.defaults.initProps",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n        "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1161,
                1173
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 55,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000035",
                "name": "overflow",
                "type": "Literal",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "overflow",
            "longname": "module.exports.defaults.initProps.overflow",
            "kind": "member",
            "memberof": "module.exports.defaults.initProps",
            "scope": "static",
            "code": "overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n           "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1187,
                1197
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 56,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000037",
                "name": "height",
                "type": "Literal",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "height",
            "longname": "module.exports.defaults.initProps.height",
            "kind": "member",
            "memberof": "module.exports.defaults.initProps",
            "scope": "static",
            "code": "height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n    "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1211,
                1225
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 57,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000039",
                "name": "paddingTop",
                "type": "Literal",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "paddingTop",
            "longname": "module.exports.defaults.initProps.paddingTop",
            "kind": "member",
            "memberof": "module.exports.defaults.initProps",
            "scope": "static",
            "code": "paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {bod"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1239,
                1256
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 58,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000041",
                "name": "paddingBottom",
                "type": "Literal",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "paddingBottom",
            "longname": "module.exports.defaults.initProps.paddingBottom",
            "kind": "member",
            "memberof": "module.exports.defaults.initProps",
            "scope": "static",
            "code": "paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scro"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1270,
                1283
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 59,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000043",
                "name": "marginTop",
                "type": "Literal",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "marginTop",
            "longname": "module.exports.defaults.initProps.marginTop",
            "kind": "member",
            "memberof": "module.exports.defaults.initProps",
            "scope": "static",
            "code": "marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n         "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1297,
                1313
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 60,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000045",
                "name": "marginBottom",
                "type": "Literal",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "marginBottom",
            "longname": "module.exports.defaults.initProps.marginBottom",
            "kind": "member",
            "memberof": "module.exports.defaults.initProps",
            "scope": "static",
            "code": "marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) &&"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1334,
                1522
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 63,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000047",
                "name": "hideProps",
                "type": "ObjectExpression",
                "value": "{\"overflow\":\"hidden\",\"height\":0,\"paddingTop\":0,\"paddingBottom\":0,\"marginTop\":0,\"marginBottom\":0}"
              }
            },
            "undocumented": true,
            "name": "hideProps",
            "longname": "module.exports.defaults.hideProps",
            "kind": "member",
            "memberof": "module.exports.defaults",
            "scope": "static",
            "code": "hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1359,
                1377
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 64,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000049",
                "name": "overflow",
                "type": "Literal",
                "value": "hidden"
              }
            },
            "undocumented": true,
            "name": "overflow",
            "longname": "module.exports.defaults.hideProps.overflow",
            "kind": "member",
            "memberof": "module.exports.defaults.hideProps",
            "scope": "static",
            "code": "overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n  "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1391,
                1400
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 65,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000051",
                "name": "height",
                "type": "Literal",
                "value": 0
              }
            },
            "undocumented": true,
            "name": "height",
            "longname": "module.exports.defaults.hideProps.height",
            "kind": "member",
            "memberof": "module.exports.defaults.hideProps",
            "scope": "static",
            "code": "height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                  "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1414,
                1427
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 66,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000053",
                "name": "paddingTop",
                "type": "Literal",
                "value": 0
              }
            },
            "undocumented": true,
            "name": "paddingTop",
            "longname": "module.exports.defaults.hideProps.paddingTop",
            "kind": "member",
            "memberof": "module.exports.defaults.hideProps",
            "scope": "static",
            "code": "paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1441,
                1457
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 67,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000055",
                "name": "paddingBottom",
                "type": "Literal",
                "value": 0
              }
            },
            "undocumented": true,
            "name": "paddingBottom",
            "longname": "module.exports.defaults.hideProps.paddingBottom",
            "kind": "member",
            "memberof": "module.exports.defaults.hideProps",
            "scope": "static",
            "code": "paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(u"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1471,
                1483
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 68,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000057",
                "name": "marginTop",
                "type": "Literal",
                "value": 0
              }
            },
            "undocumented": true,
            "name": "marginTop",
            "longname": "module.exports.defaults.hideProps.marginTop",
            "kind": "member",
            "memberof": "module.exports.defaults.hideProps",
            "scope": "static",
            "code": "marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1497,
                1512
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 69,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000059",
                "name": "marginBottom",
                "type": "Literal",
                "value": 0
              }
            },
            "undocumented": true,
            "name": "marginBottom",
            "longname": "module.exports.defaults.hideProps.marginBottom",
            "kind": "member",
            "memberof": "module.exports.defaults.hideProps",
            "scope": "static",
            "code": "marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n         "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1536,
                1748
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 74,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000061",
                "name": "computed",
                "type": "ObjectExpression",
                "value": "{\"hasAnimation\":\"\",\"hasTransition\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "computed",
            "longname": "module.exports.computed",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1557,
                1629
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 76,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000063",
                "name": "hasAnimation",
                "type": "FunctionExpression"
              }
            },
            "undocumented": true,
            "name": "hasAnimation",
            "longname": "module.exports.computed.hasAnimation",
            "kind": "function",
            "memberof": "module.exports.computed",
            "scope": "static",
            "code": "hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            r"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1571,
                1580
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 76,
              "columnno": 22,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000066",
                "name": "animation",
                "type": "Identifier",
                "value": "animation"
              }
            },
            "undocumented": true,
            "name": "animation",
            "longname": "animation",
            "kind": "member",
            "scope": "global",
            "code": "animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggl"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1640,
                1741
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 80,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000075",
                "name": "hasTransition",
                "type": "FunctionExpression"
              }
            },
            "undocumented": true,
            "name": "hasTransition",
            "longname": "module.exports.computed.hasTransition",
            "kind": "function",
            "memberof": "module.exports.computed",
            "scope": "static",
            "code": "hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNo"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1655,
                1664
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 80,
              "columnno": 23,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000078",
                "name": "animation",
                "type": "Identifier",
                "value": "animation"
              }
            },
            "undocumented": true,
            "name": "animation",
            "longname": "animation",
            "kind": "member",
            "scope": "global",
            "code": "animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n    "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1755,
                6993
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 86,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000091",
                "name": "methods",
                "type": "ObjectExpression",
                "value": "{\"toggleElement\":\"\",\"toggleNow\":\"\",\"isToggled\":\"\",\"updateAria\":\"\",\"_toggleElement\":\"\",\"_toggle\":\"\",\"_toggleImmediate\":\"\",\"_toggleHeight\":\"\",\"_toggleAnimation\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "methods",
            "longname": "module.exports.methods",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1775,
                3135
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 88,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000093",
                "name": "toggleElement",
                "type": "FunctionExpression"
              },
              "vars": {
                "": null
              }
            },
            "undocumented": true,
            "name": "toggleElement",
            "longname": "module.exports.methods.toggleElement",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "code": "toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n      "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1876,
                1902
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 91,
              "columnno": 16,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000106",
                "name": "targets",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "targets",
            "longname": "<anonymous>~targets",
            "kind": "member",
            "memberof": "<anonymous>",
            "scope": "inner",
            "code": "targets = toNodes(targets);\n\n                const all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n  "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1927,
                2014
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 93,
              "columnno": 22,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000112",
                "name": "all",
                "type": "ArrowFunctionExpression"
              },
              "vars": {
                "": null
              }
            },
            "undocumented": true,
            "name": "all",
            "longname": "<anonymous>~all",
            "kind": "function",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "all = targets => Promise.all(targets.map(el => this._toggleElement(el, show, animate)));\n                const toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgres"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2038,
                2088
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 94,
              "columnno": 22,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000134",
                "name": "toggled",
                "type": "CallExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "toggled",
            "longname": "<anonymous>~toggled",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "toggled = targets.filter(el => this.isToggled(el));\n                const untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n    "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2112,
                2168
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 95,
              "columnno": 22,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000148",
                "name": "untoggled",
                "type": "CallExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "untoggled",
            "longname": "<anonymous>~untoggled",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "untoggled = targets.filter(el => !includes(toggled, el));\n\n                let p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImm"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2191,
                2192
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 97,
              "columnno": 20,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000162",
                "name": "p"
              }
            },
            "undocumented": true,
            "name": "p",
            "longname": "<anonymous>~p",
            "kind": "member",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "p;\n\n                if (!this.queued || !isUndefined(animate) || !isUndefined(show) || !this.hasAnimation || targets.length < 2) {\n\n                    p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                  "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2343,
                2377
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 101,
              "columnno": 20,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000192",
                "name": "p",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "p",
            "longname": "<anonymous>~p",
            "kind": "member",
            "memberof": "<anonymous>",
            "scope": "inner",
            "code": "p = all(untoggled.concat(toggled));\n\n                } else {\n\n                    const {body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n      "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2433,
                2437
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 105,
              "columnno": 27,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000205",
                "name": "body",
                "type": "Identifier",
                "value": "body"
              }
            },
            "undocumented": true,
            "name": "body",
            "longname": "body",
            "kind": "member",
            "scope": "global",
            "code": "body} = document;\n                    const scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(tog"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2477,
                2500
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 106,
              "columnno": 26,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000209",
                "name": "scroll",
                "type": "MemberExpression",
                "value": "body.scrollTop"
              }
            },
            "undocumented": true,
            "name": "scroll",
            "longname": "<anonymous>~scroll",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "scroll = body.scrollTop;\n                    const [el] = toggled;\n                    const inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, '"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2570,
                2731
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 108,
              "columnno": 26,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000219",
                "name": "inProgress",
                "type": "LogicalExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "inProgress",
            "longname": "<anonymous>~inProgress",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "inProgress = Animation.inProgress(el) && hasClass(el, 'uk-animation-leave')\n                            || Transition.inProgress(el) && el.style.height === '0px';\n\n                    p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n  "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2754,
                2770
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 111,
              "columnno": 20,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000246",
                "name": "p",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "p",
            "longname": "<anonymous>~p",
            "kind": "member",
            "memberof": "<anonymous>",
            "scope": "inner",
            "code": "p = all(toggled);\n\n                    if (!inProgress) {\n                        p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            co"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2836,
                3026
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 114,
              "columnno": 24,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000256",
                "name": "p",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "p",
            "longname": "<anonymous>~p",
            "kind": "member",
            "memberof": "<anonymous>",
            "scope": "inner",
            "code": "p = p.then(() => {\n                            const p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2889,
                2907
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 115,
              "columnno": 34,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000265",
                "name": "p",
                "type": "CallExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "p",
            "longname": "<anonymous>~p",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "p = all(untoggled);\n                            body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2937,
                2960
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 116,
              "columnno": 28,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000271",
                "name": "body.scrollTop",
                "type": "Identifier",
                "value": "scroll",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "scrollTop",
            "longname": "body.scrollTop",
            "kind": "member",
            "memberof": "body",
            "scope": "static",
            "code": "body.scrollTop = scroll;\n                            return p;\n                        });\n                    }\n\n                }\n\n                p.then(resolve, noop);\n\n            });\n        },\n\n        toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n          "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3146,
                3324
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 128,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000285",
                "name": "toggleNow",
                "type": "FunctionExpression"
              },
              "vars": {
                "": null
              }
            },
            "undocumented": true,
            "name": "toggleNow",
            "longname": "module.exports.methods.toggleNow",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "code": "toggleNow(targets, show) {\n            return new Promise(resolve => Promise.all(toNodes(targets).map(el => this._toggleElement(el, show, false))).then(resolve, noop));\n        },\n\n        isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHe"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3335,
                3542
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 132,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000319",
                "name": "isToggled",
                "type": "FunctionExpression"
              },
              "vars": {
                "nodes": "module.exports.methods.isToggled~nodes"
              }
            },
            "undocumented": true,
            "name": "isToggled",
            "longname": "module.exports.methods.isToggled",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "code": "isToggled(el) {\n            const nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this."
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3369,
                3400
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 133,
              "columnno": 18,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000324",
                "name": "nodes",
                "type": "CallExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "nodes",
            "longname": "module.exports.methods.isToggled~nodes",
            "kind": "constant",
            "memberof": "module.exports.methods.isToggled",
            "scope": "inner",
            "params": [],
            "code": "nodes = toNodes(el || this.$el);\n            return this.cls\n                ? hasClass(nodes, this.cls.split(' ')[0])\n                : !hasAttr(nodes, 'hidden');\n        },\n\n        updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(e"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3553,
                3693
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 139,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000355",
                "name": "updateAria",
                "type": "FunctionExpression"
              }
            },
            "undocumented": true,
            "name": "updateAria",
            "longname": "module.exports.methods.updateAria",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "code": "updateAria(el) {\n            if (this.cls === false) {\n                attr(el, 'aria-hidden', !this.isToggled(el));\n            }\n        },\n\n        _toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3704,
                4656
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 145,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000377",
                "name": "_toggleElement",
                "type": "FunctionExpression"
              },
              "vars": {
                "show": "module.exports.methods._toggleElement~show",
                "promise": "module.exports.methods._toggleElement~promise",
                "": null
              }
            },
            "undocumented": true,
            "name": "_toggleElement",
            "longname": "module.exports.methods._toggleElement",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "code": "_toggleElement(el, show, animate) {\n\n            show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3753,
                4044
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 147,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000384",
                "name": "show",
                "type": "ConditionalExpression",
                "funcscope": "module.exports.methods._toggleElement",
                "value": "",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "show",
            "longname": "module.exports.methods._toggleElement~show",
            "kind": "member",
            "memberof": "module.exports.methods._toggleElement",
            "scope": "inner",
            "code": "show = isBoolean(show)\n                ? show\n                : Animation.inProgress(el)\n                    ? hasClass(el, 'uk-animation-leave')\n                    : Transition.inProgress(el)\n                        ? el.style.height === '0px'\n                        : !this.isToggled(el);\n\n            if (!trigger(el, `before${show ? 'show' : 'hide'}`, [this])) {\n                return Promise.reject();\n            }\n\n            const promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                4196,
                4432
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 159,
              "columnno": 18,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000441",
                "name": "promise",
                "type": "CallExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "promise",
            "longname": "module.exports.methods._toggleElement~promise",
            "kind": "constant",
            "memberof": "module.exports.methods._toggleElement",
            "scope": "inner",
            "params": [],
            "code": "promise = (animate === false || !this.hasAnimation\n                ? this._toggleImmediate\n                : this.hasTransition\n                    ? this._toggleHeight\n                    : this._toggleAnimation\n            )(el, show);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            return promise.then(() => {\n                trigger(el, show ? 'shown' : 'hidden', [this]);\n                UIkit.update(el);\n            });\n        },\n\n        _toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                4667,
                5349
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 174,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000501",
                "name": "_toggle",
                "type": "FunctionExpression"
              },
              "vars": {
                "changed": "module.exports.methods._toggle~changed",
                "": null
              }
            },
            "undocumented": true,
            "name": "_toggle",
            "longname": "module.exports.methods._toggle",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "code": "_toggle(el, toggled) {\n\n            if (!el) {\n                return;\n            }\n\n            let changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                4769,
                4776
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 180,
              "columnno": 16,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000512",
                "name": "changed"
              }
            },
            "undocumented": true,
            "name": "changed",
            "longname": "module.exports.methods._toggle~changed",
            "kind": "member",
            "memberof": "module.exports.methods._toggle",
            "scope": "inner",
            "params": [],
            "code": "changed;\n            if (this.cls) {\n                changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                4822,
                4902
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 182,
              "columnno": 16,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000520",
                "name": "changed",
                "type": "LogicalExpression",
                "funcscope": "module.exports.methods._toggle",
                "value": "",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "changed",
            "longname": "module.exports.methods._toggle~changed",
            "kind": "member",
            "memberof": "module.exports.methods._toggle",
            "scope": "inner",
            "code": "changed = includes(this.cls, ' ') || Boolean(toggled) !== hasClass(el, this.cls);\n                changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n            } else {\n                changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5042,
                5094
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 185,
              "columnno": 16,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000559",
                "name": "changed",
                "type": "BinaryExpression",
                "funcscope": "module.exports.methods._toggle",
                "value": "",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "changed",
            "longname": "module.exports.methods._toggle~changed",
            "kind": "member",
            "memberof": "module.exports.methods._toggle",
            "scope": "inner",
            "code": "changed = Boolean(toggled) === hasAttr(el, 'hidden');\n                changed && attr(el, 'hidden', !toggled ? '' : null);\n            }\n\n            $$('[autofocus]', el).some(el => isVisible(el) && (el.focus() || true));\n\n            this.updateAria(el);\n            changed && UIkit.update(el);\n        },\n\n        _toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5360,
                5472
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 195,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000615",
                "name": "_toggleImmediate",
                "type": "FunctionExpression"
              }
            },
            "undocumented": true,
            "name": "_toggleImmediate",
            "longname": "module.exports.methods._toggleImmediate",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "code": "_toggleImmediate(el, show) {\n            this._toggle(el, show);\n            return Promise.resolve();\n        },\n\n        _toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5483,
                6592
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 200,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000632",
                "name": "_toggleHeight",
                "type": "FunctionExpression"
              },
              "vars": {
                "inProgress": "module.exports.methods._toggleHeight~inProgress",
                "inner": "module.exports.methods._toggleHeight~inner",
                "currentHeight": "module.exports.methods._toggleHeight~currentHeight",
                "endHeight": "module.exports.methods._toggleHeight~endHeight",
                "": null
              }
            },
            "undocumented": true,
            "name": "_toggleHeight",
            "longname": "module.exports.methods._toggleHeight",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "code": "_toggleHeight(el, show) {\n\n            const inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5528,
                5566
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 202,
              "columnno": 18,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000638",
                "name": "inProgress",
                "type": "CallExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "inProgress",
            "longname": "module.exports.methods._toggleHeight~inProgress",
            "kind": "constant",
            "memberof": "module.exports.methods._toggleHeight",
            "scope": "inner",
            "params": [],
            "code": "inProgress = Transition.inProgress(el);\n            const inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5586,
                5716
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 203,
              "columnno": 18,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000646",
                "name": "inner",
                "type": "ConditionalExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "inner",
            "longname": "module.exports.methods._toggleHeight~inner",
            "kind": "constant",
            "memberof": "module.exports.methods._toggleHeight",
            "scope": "inner",
            "params": [],
            "code": "inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n            const currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5736,
                5809
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 204,
              "columnno": 18,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000671",
                "name": "currentHeight",
                "type": "ConditionalExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "currentHeight",
            "longname": "module.exports.methods._toggleHeight~currentHeight",
            "kind": "constant",
            "memberof": "module.exports.methods._toggleHeight",
            "scope": "inner",
            "params": [],
            "code": "currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n\n            Transition.cancel(el);\n\n            if (!this.isToggled(el)) {\n                this._toggle(el, true);\n            }\n\n            height(el, '');\n\n            // Update child components first\n            fastdom.flush();\n\n            const endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                6064,
                6113
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 217,
              "columnno": 18,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000718",
                "name": "endHeight",
                "type": "BinaryExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "endHeight",
            "longname": "module.exports.methods._toggleHeight~endHeight",
            "kind": "constant",
            "memberof": "module.exports.methods._toggleHeight",
            "scope": "inner",
            "params": [],
            "code": "endHeight = height(el) + (inProgress ? 0 : inner);\n            height(el, currentHeight);\n\n            return (show\n                ? Transition.start(el, assign({}, this.initProps, {overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                6247,
                6265
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 221,
              "columnno": 67,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000750",
                "name": "overflow",
                "type": "Literal",
                "value": "hidden"
              }
            },
            "undocumented": true,
            "name": "overflow",
            "longname": "overflow",
            "kind": "member",
            "scope": "global",
            "code": "overflow: 'hidden', height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                6267,
                6284
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 221,
              "columnno": 87,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000752",
                "name": "height",
                "type": "Identifier",
                "value": "endHeight"
              }
            },
            "undocumented": true,
            "name": "height",
            "longname": "height",
            "kind": "member",
            "scope": "global",
            "code": "height: endHeight}), Math.round(this.duration * (1 - currentHeight / endHeight)), this.transition)\n                : Transition.start(el, this.hideProps, Math.round(this.duration * (currentHeight / endHeight)), this.transition).then(() => this._toggle(el, false))\n            ).then(() => css(el, this.initProps));\n\n        },\n\n        _toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                6603,
                6986
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 227,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000810",
                "name": "_toggleAnimation",
                "type": "FunctionExpression"
              },
              "vars": {
                "": null
              }
            },
            "undocumented": true,
            "name": "_toggleAnimation",
            "longname": "module.exports.methods._toggleAnimation",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "code": "_toggleAnimation(el, show) {\n\n            Animation.cancel(el);\n\n            if (show) {\n                this._toggle(el, true);\n                return Animation.in(el, this.animation[0], this.duration, this.origin);\n            }\n\n            return Animation.out(el, this.animation[1] || this.animation[0], this.duration, this.origin).then(() => this._toggle(el, false));\n        }\n\n    }\n\n};\n"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/zr2oof1k6fitj35bqaxq.js"
            ]
          }
        ],
        "documented": [
          {
            "comment": "/**\n * @file\n * @kind readme\n *\n * the toggleable can be explained in depth here!\n */",
            "meta": {
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 5,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "name": "zr2oof1k6fitj35bqaxq.js",
            "kind": "readme\n\nthe toggleable can be explained in depth here!",
            "preserveName": true,
            "longname": "zr2oof1k6fitj35bqaxq.js",
            "scope": "global"
          },
          {
            "comment": "/**\n * @file\n * @type {UIkitComponent}\n */",
            "meta": {
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 12,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "name": "zr2oof1k6fitj35bqaxq.js",
            "kind": "file",
            "preserveName": true,
            "type": {
              "names": [
                "UIkitComponent"
              ]
            },
            "longname": "zr2oof1k6fitj35bqaxq.js",
            "scope": "global"
          },
          {
            "comment": "/**\n         * The class that is being toggled. Defaults to the hidden attribute.\n         */",
            "meta": {
              "range": [
                526,
                538
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 23,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000006",
                "name": "cls",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "The class that is being toggled. Defaults to the hidden attribute.",
            "name": "cls",
            "longname": "module.exports.props.cls",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "cls: Boolean,\n        /**\n         * Reveal item directly or with a transition.\n         */\n        animation: 'list',\n        /**\n         * Animation duration in milliseconds.\n         */\n        duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origi",
            "simpleName": "cls"
          },
          {
            "comment": "/**\n         * Reveal item directly or with a transition.\n         */",
            "meta": {
              "range": [
                626,
                643
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 27,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000008",
                "name": "animation",
                "type": "Literal",
                "value": "list"
              }
            },
            "description": "Reveal item directly or with a transition.",
            "name": "animation",
            "longname": "module.exports.props.animation",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "animation: 'list',\n        /**\n         * Animation duration in milliseconds.\n         */\n        duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n           ",
            "simpleName": "animation"
          },
          {
            "comment": "/**\n         * Animation duration in milliseconds.\n         */",
            "meta": {
              "range": [
                724,
                740
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 31,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000010",
                "name": "duration",
                "type": "Identifier",
                "value": "Number"
              }
            },
            "description": "Animation duration in milliseconds.",
            "name": "duration",
            "longname": "module.exports.props.duration",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n     ",
            "simpleName": "duration"
          },
          {
            "comment": "/**\n         *\n         */",
            "meta": {
              "range": [
                785,
                799
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 35,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000012",
                "name": "origin",
                "type": "Identifier",
                "value": "String"
              }
            },
            "name": "origin",
            "longname": "module.exports.props.origin",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {",
            "simpleName": "origin"
          },
          {
            "comment": "/**\n         *\n         */",
            "meta": {
              "range": [
                844,
                862
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 39,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000014",
                "name": "transition",
                "type": "Identifier",
                "value": "String"
              }
            },
            "name": "transition",
            "longname": "module.exports.props.transition",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation ",
            "simpleName": "transition"
          },
          {
            "comment": "/**\n         * Toggle the targets successively.\n         */",
            "meta": {
              "range": [
                940,
                955
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 43,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000016",
                "name": "queued",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "Toggle the targets successively.",
            "name": "queued",
            "longname": "module.exports.props.queued",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(t",
            "simpleName": "queued"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/zr2oof1k6fitj35bqaxq.js"
            ]
          }
        ],
        "global": [
          {
            "comment": "/**\n * @file\n * @kind readme\n *\n * the toggleable can be explained in depth here!\n */",
            "meta": {
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 5,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "name": "zr2oof1k6fitj35bqaxq.js",
            "kind": "readme\n\nthe toggleable can be explained in depth here!",
            "preserveName": true,
            "longname": "zr2oof1k6fitj35bqaxq.js",
            "scope": "global"
          }
        ],
        "types": {
          "readme\n\nthe toggleable can be explained in depth here!": [
            {
              "comment": "/**\n * @file\n * @kind readme\n *\n * the toggleable can be explained in depth here!\n */",
              "meta": {
                "filename": "zr2oof1k6fitj35bqaxq.js",
                "lineno": 5,
                "columnno": 0,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {}
              },
              "name": "zr2oof1k6fitj35bqaxq.js",
              "kind": "readme\n\nthe toggleable can be explained in depth here!",
              "preserveName": true,
              "longname": "zr2oof1k6fitj35bqaxq.js",
              "scope": "global"
            }
          ],
          "file": [
            {
              "comment": "/**\n * @file\n * @type {UIkitComponent}\n */",
              "meta": {
                "filename": "zr2oof1k6fitj35bqaxq.js",
                "lineno": 12,
                "columnno": 0,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {}
              },
              "name": "zr2oof1k6fitj35bqaxq.js",
              "kind": "file",
              "preserveName": true,
              "type": {
                "names": [
                  "UIkitComponent"
                ]
              },
              "longname": "zr2oof1k6fitj35bqaxq.js",
              "scope": "global"
            }
          ],
          "member": [
            {
              "comment": "/**\n         * The class that is being toggled. Defaults to the hidden attribute.\n         */",
              "meta": {
                "range": [
                  526,
                  538
                ],
                "filename": "zr2oof1k6fitj35bqaxq.js",
                "lineno": 23,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000006",
                  "name": "cls",
                  "type": "Identifier",
                  "value": "Boolean"
                }
              },
              "description": "The class that is being toggled. Defaults to the hidden attribute.",
              "name": "cls",
              "longname": "module.exports.props.cls",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "cls: Boolean,\n        /**\n         * Reveal item directly or with a transition.\n         */\n        animation: 'list',\n        /**\n         * Animation duration in milliseconds.\n         */\n        duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origi",
              "simpleName": "cls"
            },
            {
              "comment": "/**\n         * Reveal item directly or with a transition.\n         */",
              "meta": {
                "range": [
                  626,
                  643
                ],
                "filename": "zr2oof1k6fitj35bqaxq.js",
                "lineno": 27,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000008",
                  "name": "animation",
                  "type": "Literal",
                  "value": "list"
                }
              },
              "description": "Reveal item directly or with a transition.",
              "name": "animation",
              "longname": "module.exports.props.animation",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "animation: 'list',\n        /**\n         * Animation duration in milliseconds.\n         */\n        duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n           ",
              "simpleName": "animation"
            },
            {
              "comment": "/**\n         * Animation duration in milliseconds.\n         */",
              "meta": {
                "range": [
                  724,
                  740
                ],
                "filename": "zr2oof1k6fitj35bqaxq.js",
                "lineno": 31,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000010",
                  "name": "duration",
                  "type": "Identifier",
                  "value": "Number"
                }
              },
              "description": "Animation duration in milliseconds.",
              "name": "duration",
              "longname": "module.exports.props.duration",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n     ",
              "simpleName": "duration"
            },
            {
              "comment": "/**\n         *\n         */",
              "meta": {
                "range": [
                  785,
                  799
                ],
                "filename": "zr2oof1k6fitj35bqaxq.js",
                "lineno": 35,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000012",
                  "name": "origin",
                  "type": "Identifier",
                  "value": "String"
                }
              },
              "name": "origin",
              "longname": "module.exports.props.origin",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {",
              "simpleName": "origin"
            },
            {
              "comment": "/**\n         *\n         */",
              "meta": {
                "range": [
                  844,
                  862
                ],
                "filename": "zr2oof1k6fitj35bqaxq.js",
                "lineno": 39,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000014",
                  "name": "transition",
                  "type": "Identifier",
                  "value": "String"
                }
              },
              "name": "transition",
              "longname": "module.exports.props.transition",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation ",
              "simpleName": "transition"
            },
            {
              "comment": "/**\n         * Toggle the targets successively.\n         */",
              "meta": {
                "range": [
                  940,
                  955
                ],
                "filename": "zr2oof1k6fitj35bqaxq.js",
                "lineno": 43,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000016",
                  "name": "queued",
                  "type": "Identifier",
                  "value": "Boolean"
                }
              },
              "description": "Toggle the targets successively.",
              "name": "queued",
              "longname": "module.exports.props.queued",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(t",
              "simpleName": "queued"
            }
          ],
          "package": [
            {
              "kind": "package",
              "longname": "package:undefined",
              "files": [
                "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/zr2oof1k6fitj35bqaxq.js"
              ]
            }
          ]
        }
      },
      "component": {
        "props": {
          "cls": {
            "comment": "/**\n         * The class that is being toggled. Defaults to the hidden attribute.\n         */",
            "meta": {
              "range": [
                526,
                538
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 23,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000006",
                "name": "cls",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "The class that is being toggled. Defaults to the hidden attribute.",
            "name": "cls",
            "longname": "module.exports.props.cls",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "cls: Boolean,\n        /**\n         * Reveal item directly or with a transition.\n         */\n        animation: 'list',\n        /**\n         * Animation duration in milliseconds.\n         */\n        duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origi",
            "simpleName": "cls"
          },
          "animation": {
            "comment": "/**\n         * Reveal item directly or with a transition.\n         */",
            "meta": {
              "range": [
                626,
                643
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 27,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000008",
                "name": "animation",
                "type": "Literal",
                "value": "list"
              }
            },
            "description": "Reveal item directly or with a transition.",
            "name": "animation",
            "longname": "module.exports.props.animation",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "animation: 'list',\n        /**\n         * Animation duration in milliseconds.\n         */\n        duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n           ",
            "simpleName": "animation"
          },
          "duration": {
            "comment": "/**\n         * Animation duration in milliseconds.\n         */",
            "meta": {
              "range": [
                724,
                740
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 31,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000010",
                "name": "duration",
                "type": "Identifier",
                "value": "Number"
              }
            },
            "description": "Animation duration in milliseconds.",
            "name": "duration",
            "longname": "module.exports.props.duration",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "duration: Number,\n        /**\n         *\n         */\n        origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n     ",
            "simpleName": "duration"
          },
          "origin": {
            "comment": "/**\n         *\n         */",
            "meta": {
              "range": [
                785,
                799
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 35,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000012",
                "name": "origin",
                "type": "Identifier",
                "value": "String"
              }
            },
            "name": "origin",
            "longname": "module.exports.props.origin",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "origin: String,\n        /**\n         *\n         */\n        transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {",
            "simpleName": "origin"
          },
          "transition": {
            "comment": "/**\n         *\n         */",
            "meta": {
              "range": [
                844,
                862
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 39,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000014",
                "name": "transition",
                "type": "Identifier",
                "value": "String"
              }
            },
            "name": "transition",
            "longname": "module.exports.props.transition",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "transition: String,\n        /**\n         * Toggle the targets successively.\n         */\n        queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation ",
            "simpleName": "transition"
          },
          "queued": {
            "comment": "/**\n         * Toggle the targets successively.\n         */",
            "meta": {
              "range": [
                940,
                955
              ],
              "filename": "zr2oof1k6fitj35bqaxq.js",
              "lineno": 43,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000016",
                "name": "queued",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "Toggle the targets successively.",
            "name": "queued",
            "longname": "module.exports.props.queued",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "queued: Boolean\n    },\n\n    defaults: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        origin: false,\n        transition: 'linear',\n        queued: false,\n\n        initProps: {\n            overflow: '',\n            height: '',\n            paddingTop: '',\n            paddingBottom: '',\n            marginTop: '',\n            marginBottom: ''\n        },\n\n        hideProps: {\n            overflow: 'hidden',\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0,\n            marginTop: 0,\n            marginBottom: 0\n        }\n\n    },\n\n    computed: {\n\n        hasAnimation({animation}) {\n            return !!animation[0];\n        },\n\n        hasTransition({animation}) {\n            return this.hasAnimation && animation[0] === true;\n        }\n\n    },\n\n    methods: {\n\n        toggleElement(targets, show, animate) {\n            return new Promise(resolve => {\n\n                targets = toNodes(t",
            "simpleName": "queued"
          }
        }
      }
    },
    "src.uikit.types.js": {
      "_events": {},
      "_eventsCount": 0,
      "package": "examples",
      "path": "/Users/jms/yootheme-doctools/examples/src/uikit/types.js",
      "fileInPackage": "./src/uikit/types.js",
      "name": "types",
      "resource": "src.uikit.types.js",
      "script": "/**\n * nodelike is a type like jQuery\n * @file\n * @typedef {NodeLike}\n */",
      "type": "module",
      "module": {
        "all": [
          {
            "comment": "/**\n * nodelike is a type like jQuery\n * @file\n * @typedef {NodeLike}\n */",
            "meta": {
              "filename": "bj19p2r28ztbf6oj8hajc7.js",
              "lineno": 1,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "description": "nodelike is a type like jQuery",
            "name": "bj19p2r28ztbf6oj8hajc7.js",
            "kind": "typedef",
            "preserveName": true,
            "type": {
              "names": [
                "NodeLike"
              ]
            },
            "longname": "bj19p2r28ztbf6oj8hajc7.js",
            "scope": "global"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/bj19p2r28ztbf6oj8hajc7.js"
            ]
          }
        ],
        "documented": [
          {
            "comment": "/**\n * nodelike is a type like jQuery\n * @file\n * @typedef {NodeLike}\n */",
            "meta": {
              "filename": "bj19p2r28ztbf6oj8hajc7.js",
              "lineno": 1,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "description": "nodelike is a type like jQuery",
            "name": "bj19p2r28ztbf6oj8hajc7.js",
            "kind": "typedef",
            "preserveName": true,
            "type": {
              "names": [
                "NodeLike"
              ]
            },
            "longname": "bj19p2r28ztbf6oj8hajc7.js",
            "scope": "global"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/bj19p2r28ztbf6oj8hajc7.js"
            ]
          }
        ],
        "global": [
          {
            "comment": "/**\n * nodelike is a type like jQuery\n * @file\n * @typedef {NodeLike}\n */",
            "meta": {
              "filename": "bj19p2r28ztbf6oj8hajc7.js",
              "lineno": 1,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "description": "nodelike is a type like jQuery",
            "name": "bj19p2r28ztbf6oj8hajc7.js",
            "kind": "typedef",
            "preserveName": true,
            "type": {
              "names": [
                "NodeLike"
              ]
            },
            "longname": "bj19p2r28ztbf6oj8hajc7.js",
            "scope": "global"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/bj19p2r28ztbf6oj8hajc7.js"
            ]
          }
        ],
        "types": {
          "typedef": [
            {
              "comment": "/**\n * nodelike is a type like jQuery\n * @file\n * @typedef {NodeLike}\n */",
              "meta": {
                "filename": "bj19p2r28ztbf6oj8hajc7.js",
                "lineno": 1,
                "columnno": 0,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {}
              },
              "description": "nodelike is a type like jQuery",
              "name": "bj19p2r28ztbf6oj8hajc7.js",
              "kind": "typedef",
              "preserveName": true,
              "type": {
                "names": [
                  "NodeLike"
                ]
              },
              "longname": "bj19p2r28ztbf6oj8hajc7.js",
              "scope": "global"
            }
          ],
          "package": [
            {
              "kind": "package",
              "longname": "package:undefined",
              "files": [
                "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/bj19p2r28ztbf6oj8hajc7.js"
              ]
            }
          ]
        }
      },
      "component": {}
    },
    "src.utils.animation.js": {
      "_events": {},
      "_eventsCount": 0,
      "package": "examples",
      "path": "/Users/jms/yootheme-doctools/examples/src/utils/animation.js",
      "fileInPackage": "./src/utils/animation.js",
      "name": "animation",
      "resource": "src.utils.animation.js",
      "script": "// import {attr} from './attr';\n// import {Promise} from './promise';\n// import {once, trigger} from './event';\n// import {css, propName} from './style';\n// import {assign, startsWith, toNodes} from './lang';\n// import {addClass, hasClass, removeClass, removeClasses} from './class';\n\n/* @file\n    The following functions are to animate elements. They are either used to transition some CSS properties or\n    animate whole elements, using UIkit's CSS animations.\n *\n */\n\n/**\n *\n * Transition a CSS value.\n * **Note** Before starting a transition, a value for the CSS property to be transitioned has to be present!\n *\n * @example\n\n### Usage\n\n```html\n<div id=\"example\" class=\"uk-card uk-card-primary uk-card-body\">Primary Card</div>\n```\n\n```javascript\nvar element = util.$('#example');\n\n// Transition a CSS property to a certain value\nutil.transition(element, { 'opacity': 0 })\n  .then(console.log('Card was faded out!'));\n```\n\n#### Result\n\n```log\nCard was faded out!\n```\n\n * @param {NodeLike} element - The element\n * @param {Object} props - The CSS properties to be changed\n * @param {Number} [duration = 400] - The transition's duration (in milliseconds)\n * @param {String} [timing = 'linear'] - Timing functions, e.g. `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`\n * @returns {Promise} A promise that resolves when the transition finishes\n */\nexport function transition(element, props, duration = 400, timing = 'linear') {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            for (const name in props) {\n                const value = css(element, name);\n                if (value === '') {\n                    css(element, name, value);\n                }\n            }\n\n            const timer = setTimeout(() => trigger(element, 'transitionend'), duration);\n\n            once(element, 'transitionend transitioncanceled', ({type}) => {\n                clearTimeout(timer);\n                removeClass(element, 'uk-transition');\n                css(element, {\n                    'transition-property': '',\n                    'transition-duration': '',\n                    'transition-timing-function': ''\n                });\n                type === 'transitioncanceled' ? reject() : resolve();\n            }, false, ({target}) => element === target);\n\n            addClass(element, 'uk-transition');\n            css(element, assign({\n                'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n",
      "type": "module",
      "module": {
        "all": [
          {
            "comment": "/**\n *\n * Transition a CSS value.\n * **Note** Before starting a transition, a value for the CSS property to be transitioned has to be present!\n *\n * @example\n\n### Usage\n\n```html\n<div id=\"example\" class=\"uk-card uk-card-primary uk-card-body\">Primary Card</div>\n```\n\n```javascript\nvar element = util.$('#example');\n\n// Transition a CSS property to a certain value\nutil.transition(element, { 'opacity': 0 })\n  .then(console.log('Card was faded out!'));\n```\n\n#### Result\n\n```log\nCard was faded out!\n```\n\n * @param {NodeLike} element - The element\n * @param {Object} props - The CSS properties to be changed\n * @param {Number} [duration = 400] - The transition's duration (in milliseconds)\n * @param {String} [timing = 'linear'] - Timing functions, e.g. `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`\n * @returns {Promise} A promise that resolves when the transition finishes\n */",
            "meta": {
              "range": [
                1354,
                2644
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 47,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000002",
                "name": "exports.transition",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "element",
                  "props",
                  "duration",
                  "timing"
                ]
              }
            },
            "description": "Transition a CSS value.\n**Note** Before starting a transition, a value for the CSS property to be transitioned has to be present!",
            "examples": [
              "### Usage\n\n```html\n<div id=\"example\" class=\"uk-card uk-card-primary uk-card-body\">Primary Card</div>\n```\n\n```javascript\nvar element = util.$('#example');\n\n// Transition a CSS property to a certain value\nutil.transition(element, { 'opacity': 0 })\n  .then(console.log('Card was faded out!'));\n```\n\n#### Result\n\n```log\nCard was faded out!\n```"
            ],
            "params": [
              {
                "type": {
                  "names": [
                    "NodeLike"
                  ]
                },
                "description": "The element",
                "name": "element"
              },
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "description": "The CSS properties to be changed",
                "name": "props"
              },
              {
                "type": {
                  "names": [
                    "Number"
                  ]
                },
                "optional": true,
                "defaultvalue": 400,
                "description": "The transition's duration (in milliseconds)",
                "name": "duration"
              },
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "optional": true,
                "defaultvalue": "'linear'",
                "description": "Timing functions, e.g. `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`",
                "name": "timing"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise"
                  ]
                },
                "description": "A promise that resolves when the transition finishes"
              }
            ],
            "name": "transition",
            "longname": "transition",
            "kind": "function",
            "scope": "global",
            "simpleName": "transition",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "2": "default",
                  "3": "description"
                },
                {
                  "0": "element",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "NodeLike"
                      ]
                    }
                  },
                  "3": "The element"
                },
                {
                  "0": "props",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "3": "The CSS properties to be changed"
                },
                {
                  "0": "duration",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Number"
                      ]
                    }
                  },
                  "2": 400,
                  "3": "The transition's duration (in milliseconds)",
                  "optional": true
                },
                {
                  "0": "timing",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "2": "'linear'",
                  "3": "Timing functions, e.g. `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`",
                  "optional": true
                }
              ]
            },
            "signature": "transition (element: NodeLike, props: Object, [duration: Number], [timing: String]) : Promise",
            "code": "export function transition(element, props, duration = 400, timing = 'linear') {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            for (const name in props) {\n                const value = css(element, name);\n                if (value === '') {\n                    css(element, name, value);\n                }\n            }\n\n            const timer = setTimeout(() => trigger(element, 'transitionend'), duration);\n\n            once(element, 'transitionend transitioncanceled', ({type}) => {\n                clearTimeout(timer);\n                removeClass(element, 'uk-transition');\n                css(element, {\n                    'transition-property': '',\n                    'transition-duration': '',\n                    'transition-timing-function': ''\n                });\n                type === 'transitioncanceled' ? reject() : resolve();\n            }, false, ({target}) => element === target);\n\n            addClass(element, 'uk-transition');\n            css(element, assign({\n                'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'en"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1361,
                2644
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 47,
              "columnno": 7,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000003",
                "name": "transition",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "element",
                  "props",
                  "duration",
                  "timing"
                ]
              },
              "vars": {
                "": null
              }
            },
            "undocumented": true,
            "name": "transition",
            "longname": "transition",
            "kind": "function",
            "scope": "global",
            "params": [],
            "code": "function transition(element, props, duration = 400, timing = 'linear') {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            for (const name in props) {\n                const value = css(element, name);\n                if (value === '') {\n                    css(element, name, value);\n                }\n            }\n\n            const timer = setTimeout(() => trigger(element, 'transitionend'), duration);\n\n            once(element, 'transitionend transitioncanceled', ({type}) => {\n                clearTimeout(timer);\n                removeClass(element, 'uk-transition');\n                css(element, {\n                    'transition-property': '',\n                    'transition-duration': '',\n                    'transition-timing-function': ''\n                });\n                type === 'transitioncanceled' ? reject() : resolve();\n            }, false, ({target}) => element === target);\n\n            addClass(element, 'uk-transition');\n            css(element, assign({\n                'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1557,
                1561
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 52,
              "columnno": 23,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000035",
                "name": "name"
              }
            },
            "undocumented": true,
            "name": "name",
            "longname": "<anonymous>~name",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "name in props) {\n                const value = css(element, name);\n                if (value === '') {\n                    css(element, name, value);\n                }\n            }\n\n            const timer = setTimeout(() => trigger(element, 'transitionend'), duration);\n\n            once(element, 'transitionend transitioncanceled', ({type}) => {\n                clearTimeout(timer);\n                removeClass(element, 'uk-transition');\n                css(element, {\n                    'transition-property': '',\n                    'transition-duration': '',\n                    'transition-timing-function': ''\n                });\n                type === 'transitioncanceled' ? reject() : resolve();\n            }, false, ({target}) => element === target);\n\n            addClass(element, 'uk-transition');\n            css(element, assign({\n                'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'tr"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1596,
                1622
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 53,
              "columnno": 22,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000040",
                "name": "value",
                "type": "CallExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "value",
            "longname": "<anonymous>~value",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "value = css(element, name);\n                if (value === '') {\n                    css(element, name, value);\n                }\n            }\n\n            const timer = setTimeout(() => trigger(element, 'transitionend'), duration);\n\n            once(element, 'transitionend transitioncanceled', ({type}) => {\n                clearTimeout(timer);\n                removeClass(element, 'uk-transition');\n                css(element, {\n                    'transition-property': '',\n                    'transition-duration': '',\n                    'transition-timing-function': ''\n                });\n                type === 'transitioncanceled' ? reject() : resolve();\n            }, false, ({target}) => element === target);\n\n            addClass(element, 'uk-transition');\n            css(element, assign({\n                'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transitio"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1758,
                1827
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 59,
              "columnno": 18,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000058",
                "name": "timer",
                "type": "CallExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "timer",
            "longname": "<anonymous>~timer",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "timer = setTimeout(() => trigger(element, 'transitionend'), duration);\n\n            once(element, 'transitionend transitioncanceled', ({type}) => {\n                clearTimeout(timer);\n                removeClass(element, 'uk-transition');\n                css(element, {\n                    'transition-property': '',\n                    'transition-duration': '',\n                    'transition-timing-function': ''\n                });\n                type === 'transitioncanceled' ? reject() : resolve();\n            }, false, ({target}) => element === target);\n\n            addClass(element, 'uk-transition');\n            css(element, assign({\n                'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n    "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1894,
                1898
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 61,
              "columnno": 64,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000075",
                "name": "type",
                "type": "Identifier",
                "value": "type"
              }
            },
            "undocumented": true,
            "name": "type",
            "longname": "type",
            "kind": "member",
            "scope": "global",
            "code": "type}) => {\n                clearTimeout(timer);\n                removeClass(element, 'uk-transition');\n                css(element, {\n                    'transition-property': '',\n                    'transition-duration': '',\n                    'transition-timing-function': ''\n                });\n                type === 'transitioncanceled' ? reject() : resolve();\n            }, false, ({target}) => element === target);\n\n            addClass(element, 'uk-transition');\n            css(element, assign({\n                'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                 "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2049,
                2074
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 65,
              "columnno": 20,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000092",
                "name": "\"transition-property\"",
                "type": "Literal",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "\"transition-property\"",
            "longname": "\"transition-property\"",
            "kind": "member",
            "scope": "global",
            "code": "'transition-property': '',\n                    'transition-duration': '',\n                    'transition-timing-function': ''\n                });\n                type === 'transitioncanceled' ? reject() : resolve();\n            }, false, ({target}) => element === target);\n\n            addClass(element, 'uk-transition');\n            css(element, assign({\n                'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2096,
                2121
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 66,
              "columnno": 20,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000094",
                "name": "\"transition-duration\"",
                "type": "Literal",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "\"transition-duration\"",
            "longname": "\"transition-duration\"",
            "kind": "member",
            "scope": "global",
            "code": "'transition-duration': '',\n                    'transition-timing-function': ''\n                });\n                type === 'transitioncanceled' ? reject() : resolve();\n            }, false, ({target}) => element === target);\n\n            addClass(element, 'uk-transition');\n            css(element, assign({\n                'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n              "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2143,
                2175
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 67,
              "columnno": 20,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000096",
                "name": "\"transition-timing-function\"",
                "type": "Literal",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "\"transition-timing-function\"",
            "longname": "\"transition-timing-function\"",
            "kind": "member",
            "scope": "global",
            "code": "'transition-timing-function': ''\n                });\n                type === 'transitioncanceled' ? reject() : resolve();\n            }, false, ({target}) => element === target);\n\n            addClass(element, 'uk-transition');\n            css(element, assign({\n                'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n  "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2290,
                2296
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 70,
              "columnno": 24,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000110",
                "name": "target",
                "type": "Identifier",
                "value": "target"
              }
            },
            "undocumented": true,
            "name": "target",
            "longname": "target",
            "kind": "member",
            "scope": "global",
            "code": "target}) => element === target);\n\n            addClass(element, 'uk-transition');\n            css(element, assign({\n                'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    reso"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2422,
                2487
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 74,
              "columnno": 16,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000127",
                "name": "\"transition-property\"",
                "type": "CallExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "\"transition-property\"",
            "longname": "\"transition-property\"",
            "kind": "member",
            "scope": "global",
            "code": "'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2505,
                2543
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 75,
              "columnno": 16,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000141",
                "name": "\"transition-duration\"",
                "type": "TemplateLiteral",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "\"transition-duration\"",
            "longname": "\"transition-duration\"",
            "kind": "member",
            "scope": "global",
            "code": "'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n  "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2561,
                2597
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 76,
              "columnno": 16,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000146",
                "name": "\"transition-timing-function\"",
                "type": "Identifier",
                "value": "timing"
              }
            },
            "undocumented": true,
            "name": "\"transition-timing-function\"",
            "longname": "\"transition-timing-function\"",
            "kind": "member",
            "scope": "global",
            "code": "'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${durat"
          },
          {
            "comment": "/**\n * The Transition object makes four handy functions accessible.\n */",
            "meta": {
              "range": [
                2718,
                3232
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 87,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000149",
                "name": "exports.Transition",
                "type": "VariableDeclaration"
              }
            },
            "description": "The Transition object makes four handy functions accessible.",
            "name": "Transition",
            "longname": "Transition",
            "kind": "constant",
            "scope": "global",
            "code": "export const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n",
            "children": [
              {
                "comment": "/**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */",
                "meta": {
                  "range": [
                    2840,
                    2857
                  ],
                  "filename": "8kj5myb3spehpvzb0z0vet.js",
                  "lineno": 94,
                  "columnno": 4,
                  "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                  "code": {
                    "id": "astnode100000154",
                    "name": "start",
                    "type": "Identifier",
                    "value": "transition"
                  }
                },
                "description": "alias for transition",
                "kind": "function",
                "see": [
                  "transition"
                ],
                "name": "start",
                "longname": "Transition.start",
                "memberof": "Transition",
                "scope": "static",
                "simpleName": "Transition.start",
                "signature": "Transition.start()",
                "code": "start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, anim",
                "reference": "transition"
              },
              {
                "comment": "/**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */",
                "meta": {
                  "range": [
                    2967,
                    3065
                  ],
                  "filename": "8kj5myb3spehpvzb0z0vet.js",
                  "lineno": 100,
                  "columnno": 4,
                  "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                  "code": {
                    "id": "astnode100000156",
                    "name": "stop",
                    "type": "FunctionExpression"
                  }
                },
                "params": [
                  {
                    "type": {
                      "names": [
                        "Element"
                      ]
                    },
                    "description": "the alement to wait for a transiton to end on",
                    "name": "element"
                  }
                ],
                "name": "stop",
                "longname": "Transition.stop",
                "kind": "function",
                "memberof": "Transition",
                "scope": "static",
                "simpleName": "Transition.stop",
                "tables": {
                  "arguments": [
                    {
                      "0": "name",
                      "1": "type",
                      "3": "description"
                    },
                    {
                      "0": "element",
                      "1": {
                        "template": "types",
                        "type": {
                          "names": [
                            "Element"
                          ]
                        }
                      },
                      "3": "the alement to wait for a transiton to end on"
                    }
                  ]
                },
                "signature": "Transition.stop (element: Element)",
                "code": "stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
              }
            ]
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2731,
                3231
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 87,
              "columnno": 13,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000151",
                "name": "Transition",
                "type": "ObjectExpression",
                "value": "{\"start\":\"\",\"stop\":\"\",\"cancel\":\"\",\"inProgress\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "Transition",
            "longname": "Transition",
            "kind": "constant",
            "scope": "global",
            "params": [],
            "code": "Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "/**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */",
            "meta": {
              "range": [
                2840,
                2857
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 94,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000154",
                "name": "start",
                "type": "Identifier",
                "value": "transition"
              }
            },
            "description": "alias for transition",
            "kind": "function",
            "see": [
              "transition"
            ],
            "name": "start",
            "longname": "Transition.start",
            "memberof": "Transition",
            "scope": "static",
            "simpleName": "Transition.start",
            "signature": "Transition.start()",
            "code": "start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, anim",
            "reference": "transition"
          },
          {
            "comment": "/**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */",
            "meta": {
              "range": [
                2967,
                3065
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 100,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000156",
                "name": "stop",
                "type": "FunctionExpression"
              }
            },
            "params": [
              {
                "type": {
                  "names": [
                    "Element"
                  ]
                },
                "description": "the alement to wait for a transiton to end on",
                "name": "element"
              }
            ],
            "name": "stop",
            "longname": "Transition.stop",
            "kind": "function",
            "memberof": "Transition",
            "scope": "static",
            "simpleName": "Transition.stop",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "element",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Element"
                      ]
                    }
                  },
                  "3": "the alement to wait for a transiton to end on"
                }
              ]
            },
            "signature": "Transition.stop (element: Element)",
            "code": "stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3072,
                3143
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 105,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000170",
                "name": "cancel",
                "type": "FunctionExpression"
              }
            },
            "undocumented": true,
            "name": "cancel",
            "longname": "Transition.cancel",
            "kind": "function",
            "memberof": "Transition",
            "scope": "static",
            "code": "cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3150,
                3228
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 109,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000179",
                "name": "inProgress",
                "type": "FunctionExpression"
              }
            },
            "undocumented": true,
            "name": "inProgress",
            "longname": "Transition.inProgress",
            "kind": "function",
            "memberof": "Transition",
            "scope": "static",
            "code": "inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3240,
                3273
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 115,
              "columnno": 6,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000189",
                "name": "animationPrefix",
                "type": "Literal",
                "value": "uk-animation-"
              }
            },
            "undocumented": true,
            "name": "animationPrefix",
            "longname": "animationPrefix",
            "kind": "constant",
            "scope": "global",
            "params": [],
            "code": "animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3281,
                3323
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 116,
              "columnno": 6,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000193",
                "name": "clsCancelAnimation",
                "type": "Literal",
                "value": "uk-cancel-animation"
              }
            },
            "undocumented": true,
            "name": "clsCancelAnimation",
            "longname": "clsCancelAnimation",
            "kind": "constant",
            "scope": "global",
            "params": [],
            "code": "clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */",
            "meta": {
              "range": [
                3450,
                5393
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 126,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000196",
                "name": "exports.animate",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "element",
                  "animation",
                  "duration",
                  "origin",
                  "out"
                ]
              }
            },
            "description": "test",
            "params": [
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "element"
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "animation"
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "duration",
                "defaultvalue": "200",
                "optional": true
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "origin"
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "out"
              }
            ],
            "name": "animate",
            "longname": "animate",
            "kind": "function",
            "scope": "global",
            "simpleName": "animate",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "2": "default"
                },
                {
                  "0": "element",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                },
                {
                  "0": "animation",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                },
                {
                  "0": "duration",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  },
                  "2": "200",
                  "optional": true
                },
                {
                  "0": "origin",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                },
                {
                  "0": "out",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                }
              ]
            },
            "signature": "animate (element: *, animation: *, [duration: *], origin: *, out: *)",
            "code": "export function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3457,
                5393
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 126,
              "columnno": 7,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000197",
                "name": "animate",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "element",
                  "animation",
                  "duration",
                  "origin",
                  "out"
                ]
              },
              "vars": {
                "": null
              }
            },
            "undocumented": true,
            "name": "animate",
            "longname": "animate",
            "kind": "function",
            "scope": "global",
            "params": [],
            "code": "function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3939,
                4004
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 140,
              "columnno": 16,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000255",
                "name": "cls",
                "type": "TemplateLiteral",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "cls",
            "longname": "<anonymous>~cls",
            "kind": "member",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                4116,
                4155
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 145,
              "columnno": 20,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000278",
                "name": "cls",
                "type": "TemplateLiteral",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "cls",
            "longname": "<anonymous>~cls",
            "kind": "member",
            "memberof": "<anonymous>",
            "scope": "inner",
            "code": "cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                4223,
                4258
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 149,
              "columnno": 20,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000288",
                "name": "cls",
                "type": "TemplateLiteral",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "cls",
            "longname": "<anonymous>~cls",
            "kind": "member",
            "memberof": "<anonymous>",
            "scope": "inner",
            "code": "cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                4376,
                4380
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 156,
              "columnno": 60,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000304",
                "name": "type",
                "type": "Identifier",
                "value": "type"
              }
            },
            "undocumented": true,
            "name": "type",
            "longname": "type",
            "kind": "member",
            "scope": "global",
            "code": "type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                4409,
                4425
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 158,
              "columnno": 20,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000308",
                "name": "hasReset",
                "type": "Literal",
                "value": false
              }
            },
            "undocumented": true,
            "name": "hasReset",
            "longname": "<anonymous>~hasReset",
            "kind": "member",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                4668,
                4683
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 166,
              "columnno": 24,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000337",
                "name": "hasReset",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": true,
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "hasReset",
            "longname": "<anonymous>~hasReset",
            "kind": "member",
            "memberof": "<anonymous>",
            "scope": "inner",
            "code": "hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5070,
                5076
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 179,
              "columnno": 24,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000368",
                "name": "target",
                "type": "Identifier",
                "value": "target"
              }
            },
            "undocumented": true,
            "name": "target",
            "longname": "target",
            "kind": "member",
            "scope": "global",
            "code": "target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5217,
                5370
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 184,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000387",
                "name": "reset",
                "type": "FunctionDeclaration",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "reset",
            "longname": "<anonymous>~reset",
            "kind": "function",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5401,
                5459
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 194,
              "columnno": 6,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000405",
                "name": "inProgress",
                "type": "NewExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "inProgress",
            "longname": "inProgress",
            "kind": "constant",
            "scope": "global",
            "params": [],
            "code": "inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5461,
                5903
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 195,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000413",
                "name": "exports.Animation",
                "type": "VariableDeclaration"
              }
            },
            "undocumented": true,
            "name": "Animation",
            "longname": "Animation",
            "kind": "constant",
            "scope": "global",
            "code": "export const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5474,
                5902
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 195,
              "columnno": 13,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000415",
                "name": "Animation",
                "type": "ObjectExpression",
                "value": "{\"in\":\"\",\"out\":\"\",\"inProgress\":\"\",\"cancel\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "Animation",
            "longname": "Animation",
            "kind": "constant",
            "scope": "global",
            "params": [],
            "code": "Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5493,
                5610
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 197,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000418",
                "name": "in",
                "type": "FunctionExpression"
              }
            },
            "undocumented": true,
            "name": "in",
            "longname": "Animation.in",
            "kind": "function",
            "memberof": "Animation",
            "scope": "static",
            "code": "in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5617,
                5734
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 201,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000433",
                "name": "out",
                "type": "FunctionExpression"
              }
            },
            "undocumented": true,
            "name": "out",
            "longname": "Animation.out",
            "kind": "function",
            "memberof": "Animation",
            "scope": "static",
            "code": "out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5741,
                5824
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 205,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000448",
                "name": "inProgress",
                "type": "FunctionExpression"
              }
            },
            "undocumented": true,
            "name": "inProgress",
            "longname": "Animation.inProgress",
            "kind": "function",
            "memberof": "Animation",
            "scope": "static",
            "code": "inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                5831,
                5899
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 209,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000461",
                "name": "cancel",
                "type": "FunctionExpression"
              }
            },
            "undocumented": true,
            "name": "cancel",
            "longname": "Animation.cancel",
            "kind": "function",
            "memberof": "Animation",
            "scope": "static",
            "code": "cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/8kj5myb3spehpvzb0z0vet.js"
            ]
          }
        ],
        "documented": [
          {
            "comment": "/**\n *\n * Transition a CSS value.\n * **Note** Before starting a transition, a value for the CSS property to be transitioned has to be present!\n *\n * @example\n\n### Usage\n\n```html\n<div id=\"example\" class=\"uk-card uk-card-primary uk-card-body\">Primary Card</div>\n```\n\n```javascript\nvar element = util.$('#example');\n\n// Transition a CSS property to a certain value\nutil.transition(element, { 'opacity': 0 })\n  .then(console.log('Card was faded out!'));\n```\n\n#### Result\n\n```log\nCard was faded out!\n```\n\n * @param {NodeLike} element - The element\n * @param {Object} props - The CSS properties to be changed\n * @param {Number} [duration = 400] - The transition's duration (in milliseconds)\n * @param {String} [timing = 'linear'] - Timing functions, e.g. `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`\n * @returns {Promise} A promise that resolves when the transition finishes\n */",
            "meta": {
              "range": [
                1354,
                2644
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 47,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000002",
                "name": "exports.transition",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "element",
                  "props",
                  "duration",
                  "timing"
                ]
              }
            },
            "description": "Transition a CSS value.\n**Note** Before starting a transition, a value for the CSS property to be transitioned has to be present!",
            "examples": [
              "### Usage\n\n```html\n<div id=\"example\" class=\"uk-card uk-card-primary uk-card-body\">Primary Card</div>\n```\n\n```javascript\nvar element = util.$('#example');\n\n// Transition a CSS property to a certain value\nutil.transition(element, { 'opacity': 0 })\n  .then(console.log('Card was faded out!'));\n```\n\n#### Result\n\n```log\nCard was faded out!\n```"
            ],
            "params": [
              {
                "type": {
                  "names": [
                    "NodeLike"
                  ]
                },
                "description": "The element",
                "name": "element"
              },
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "description": "The CSS properties to be changed",
                "name": "props"
              },
              {
                "type": {
                  "names": [
                    "Number"
                  ]
                },
                "optional": true,
                "defaultvalue": 400,
                "description": "The transition's duration (in milliseconds)",
                "name": "duration"
              },
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "optional": true,
                "defaultvalue": "'linear'",
                "description": "Timing functions, e.g. `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`",
                "name": "timing"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise"
                  ]
                },
                "description": "A promise that resolves when the transition finishes"
              }
            ],
            "name": "transition",
            "longname": "transition",
            "kind": "function",
            "scope": "global",
            "simpleName": "transition",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "2": "default",
                  "3": "description"
                },
                {
                  "0": "element",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "NodeLike"
                      ]
                    }
                  },
                  "3": "The element"
                },
                {
                  "0": "props",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "3": "The CSS properties to be changed"
                },
                {
                  "0": "duration",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Number"
                      ]
                    }
                  },
                  "2": 400,
                  "3": "The transition's duration (in milliseconds)",
                  "optional": true
                },
                {
                  "0": "timing",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "2": "'linear'",
                  "3": "Timing functions, e.g. `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`",
                  "optional": true
                }
              ]
            },
            "signature": "transition (element: NodeLike, props: Object, [duration: Number], [timing: String]) : Promise",
            "code": "export function transition(element, props, duration = 400, timing = 'linear') {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            for (const name in props) {\n                const value = css(element, name);\n                if (value === '') {\n                    css(element, name, value);\n                }\n            }\n\n            const timer = setTimeout(() => trigger(element, 'transitionend'), duration);\n\n            once(element, 'transitionend transitioncanceled', ({type}) => {\n                clearTimeout(timer);\n                removeClass(element, 'uk-transition');\n                css(element, {\n                    'transition-property': '',\n                    'transition-duration': '',\n                    'transition-timing-function': ''\n                });\n                type === 'transitioncanceled' ? reject() : resolve();\n            }, false, ({target}) => element === target);\n\n            addClass(element, 'uk-transition');\n            css(element, assign({\n                'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'en"
          },
          {
            "comment": "/**\n * The Transition object makes four handy functions accessible.\n */",
            "meta": {
              "range": [
                2718,
                3232
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 87,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000149",
                "name": "exports.Transition",
                "type": "VariableDeclaration"
              }
            },
            "description": "The Transition object makes four handy functions accessible.",
            "name": "Transition",
            "longname": "Transition",
            "kind": "constant",
            "scope": "global",
            "code": "export const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n",
            "children": [
              {
                "comment": "/**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */",
                "meta": {
                  "range": [
                    2840,
                    2857
                  ],
                  "filename": "8kj5myb3spehpvzb0z0vet.js",
                  "lineno": 94,
                  "columnno": 4,
                  "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                  "code": {
                    "id": "astnode100000154",
                    "name": "start",
                    "type": "Identifier",
                    "value": "transition"
                  }
                },
                "description": "alias for transition",
                "kind": "function",
                "see": [
                  "transition"
                ],
                "name": "start",
                "longname": "Transition.start",
                "memberof": "Transition",
                "scope": "static",
                "simpleName": "Transition.start",
                "signature": "Transition.start()",
                "code": "start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, anim",
                "reference": "transition"
              },
              {
                "comment": "/**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */",
                "meta": {
                  "range": [
                    2967,
                    3065
                  ],
                  "filename": "8kj5myb3spehpvzb0z0vet.js",
                  "lineno": 100,
                  "columnno": 4,
                  "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                  "code": {
                    "id": "astnode100000156",
                    "name": "stop",
                    "type": "FunctionExpression"
                  }
                },
                "params": [
                  {
                    "type": {
                      "names": [
                        "Element"
                      ]
                    },
                    "description": "the alement to wait for a transiton to end on",
                    "name": "element"
                  }
                ],
                "name": "stop",
                "longname": "Transition.stop",
                "kind": "function",
                "memberof": "Transition",
                "scope": "static",
                "simpleName": "Transition.stop",
                "tables": {
                  "arguments": [
                    {
                      "0": "name",
                      "1": "type",
                      "3": "description"
                    },
                    {
                      "0": "element",
                      "1": {
                        "template": "types",
                        "type": {
                          "names": [
                            "Element"
                          ]
                        }
                      },
                      "3": "the alement to wait for a transiton to end on"
                    }
                  ]
                },
                "signature": "Transition.stop (element: Element)",
                "code": "stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
              }
            ]
          },
          {
            "comment": "/**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */",
            "meta": {
              "range": [
                2840,
                2857
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 94,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000154",
                "name": "start",
                "type": "Identifier",
                "value": "transition"
              }
            },
            "description": "alias for transition",
            "kind": "function",
            "see": [
              "transition"
            ],
            "name": "start",
            "longname": "Transition.start",
            "memberof": "Transition",
            "scope": "static",
            "simpleName": "Transition.start",
            "signature": "Transition.start()",
            "code": "start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, anim",
            "reference": "transition"
          },
          {
            "comment": "/**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */",
            "meta": {
              "range": [
                2967,
                3065
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 100,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000156",
                "name": "stop",
                "type": "FunctionExpression"
              }
            },
            "params": [
              {
                "type": {
                  "names": [
                    "Element"
                  ]
                },
                "description": "the alement to wait for a transiton to end on",
                "name": "element"
              }
            ],
            "name": "stop",
            "longname": "Transition.stop",
            "kind": "function",
            "memberof": "Transition",
            "scope": "static",
            "simpleName": "Transition.stop",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "element",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Element"
                      ]
                    }
                  },
                  "3": "the alement to wait for a transiton to end on"
                }
              ]
            },
            "signature": "Transition.stop (element: Element)",
            "code": "stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "comment": "/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */",
            "meta": {
              "range": [
                3450,
                5393
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 126,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000196",
                "name": "exports.animate",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "element",
                  "animation",
                  "duration",
                  "origin",
                  "out"
                ]
              }
            },
            "description": "test",
            "params": [
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "element"
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "animation"
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "duration",
                "defaultvalue": "200",
                "optional": true
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "origin"
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "out"
              }
            ],
            "name": "animate",
            "longname": "animate",
            "kind": "function",
            "scope": "global",
            "simpleName": "animate",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "2": "default"
                },
                {
                  "0": "element",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                },
                {
                  "0": "animation",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                },
                {
                  "0": "duration",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  },
                  "2": "200",
                  "optional": true
                },
                {
                  "0": "origin",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                },
                {
                  "0": "out",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                }
              ]
            },
            "signature": "animate (element: *, animation: *, [duration: *], origin: *, out: *)",
            "code": "export function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/8kj5myb3spehpvzb0z0vet.js"
            ]
          }
        ],
        "global": [
          {
            "comment": "/**\n *\n * Transition a CSS value.\n * **Note** Before starting a transition, a value for the CSS property to be transitioned has to be present!\n *\n * @example\n\n### Usage\n\n```html\n<div id=\"example\" class=\"uk-card uk-card-primary uk-card-body\">Primary Card</div>\n```\n\n```javascript\nvar element = util.$('#example');\n\n// Transition a CSS property to a certain value\nutil.transition(element, { 'opacity': 0 })\n  .then(console.log('Card was faded out!'));\n```\n\n#### Result\n\n```log\nCard was faded out!\n```\n\n * @param {NodeLike} element - The element\n * @param {Object} props - The CSS properties to be changed\n * @param {Number} [duration = 400] - The transition's duration (in milliseconds)\n * @param {String} [timing = 'linear'] - Timing functions, e.g. `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`\n * @returns {Promise} A promise that resolves when the transition finishes\n */",
            "meta": {
              "range": [
                1354,
                2644
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 47,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000002",
                "name": "exports.transition",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "element",
                  "props",
                  "duration",
                  "timing"
                ]
              }
            },
            "description": "Transition a CSS value.\n**Note** Before starting a transition, a value for the CSS property to be transitioned has to be present!",
            "examples": [
              "### Usage\n\n```html\n<div id=\"example\" class=\"uk-card uk-card-primary uk-card-body\">Primary Card</div>\n```\n\n```javascript\nvar element = util.$('#example');\n\n// Transition a CSS property to a certain value\nutil.transition(element, { 'opacity': 0 })\n  .then(console.log('Card was faded out!'));\n```\n\n#### Result\n\n```log\nCard was faded out!\n```"
            ],
            "params": [
              {
                "type": {
                  "names": [
                    "NodeLike"
                  ]
                },
                "description": "The element",
                "name": "element"
              },
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "description": "The CSS properties to be changed",
                "name": "props"
              },
              {
                "type": {
                  "names": [
                    "Number"
                  ]
                },
                "optional": true,
                "defaultvalue": 400,
                "description": "The transition's duration (in milliseconds)",
                "name": "duration"
              },
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "optional": true,
                "defaultvalue": "'linear'",
                "description": "Timing functions, e.g. `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`",
                "name": "timing"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise"
                  ]
                },
                "description": "A promise that resolves when the transition finishes"
              }
            ],
            "name": "transition",
            "longname": "transition",
            "kind": "function",
            "scope": "global",
            "simpleName": "transition",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "2": "default",
                  "3": "description"
                },
                {
                  "0": "element",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "NodeLike"
                      ]
                    }
                  },
                  "3": "The element"
                },
                {
                  "0": "props",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "3": "The CSS properties to be changed"
                },
                {
                  "0": "duration",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Number"
                      ]
                    }
                  },
                  "2": 400,
                  "3": "The transition's duration (in milliseconds)",
                  "optional": true
                },
                {
                  "0": "timing",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "2": "'linear'",
                  "3": "Timing functions, e.g. `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`",
                  "optional": true
                }
              ]
            },
            "signature": "transition (element: NodeLike, props: Object, [duration: Number], [timing: String]) : Promise",
            "code": "export function transition(element, props, duration = 400, timing = 'linear') {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            for (const name in props) {\n                const value = css(element, name);\n                if (value === '') {\n                    css(element, name, value);\n                }\n            }\n\n            const timer = setTimeout(() => trigger(element, 'transitionend'), duration);\n\n            once(element, 'transitionend transitioncanceled', ({type}) => {\n                clearTimeout(timer);\n                removeClass(element, 'uk-transition');\n                css(element, {\n                    'transition-property': '',\n                    'transition-duration': '',\n                    'transition-timing-function': ''\n                });\n                type === 'transitioncanceled' ? reject() : resolve();\n            }, false, ({target}) => element === target);\n\n            addClass(element, 'uk-transition');\n            css(element, assign({\n                'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'en"
          },
          {
            "comment": "/**\n * The Transition object makes four handy functions accessible.\n */",
            "meta": {
              "range": [
                2718,
                3232
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 87,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000149",
                "name": "exports.Transition",
                "type": "VariableDeclaration"
              }
            },
            "description": "The Transition object makes four handy functions accessible.",
            "name": "Transition",
            "longname": "Transition",
            "kind": "constant",
            "scope": "global",
            "code": "export const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n",
            "children": [
              {
                "comment": "/**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */",
                "meta": {
                  "range": [
                    2840,
                    2857
                  ],
                  "filename": "8kj5myb3spehpvzb0z0vet.js",
                  "lineno": 94,
                  "columnno": 4,
                  "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                  "code": {
                    "id": "astnode100000154",
                    "name": "start",
                    "type": "Identifier",
                    "value": "transition"
                  }
                },
                "description": "alias for transition",
                "kind": "function",
                "see": [
                  "transition"
                ],
                "name": "start",
                "longname": "Transition.start",
                "memberof": "Transition",
                "scope": "static",
                "simpleName": "Transition.start",
                "signature": "Transition.start()",
                "code": "start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, anim",
                "reference": "transition"
              },
              {
                "comment": "/**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */",
                "meta": {
                  "range": [
                    2967,
                    3065
                  ],
                  "filename": "8kj5myb3spehpvzb0z0vet.js",
                  "lineno": 100,
                  "columnno": 4,
                  "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                  "code": {
                    "id": "astnode100000156",
                    "name": "stop",
                    "type": "FunctionExpression"
                  }
                },
                "params": [
                  {
                    "type": {
                      "names": [
                        "Element"
                      ]
                    },
                    "description": "the alement to wait for a transiton to end on",
                    "name": "element"
                  }
                ],
                "name": "stop",
                "longname": "Transition.stop",
                "kind": "function",
                "memberof": "Transition",
                "scope": "static",
                "simpleName": "Transition.stop",
                "tables": {
                  "arguments": [
                    {
                      "0": "name",
                      "1": "type",
                      "3": "description"
                    },
                    {
                      "0": "element",
                      "1": {
                        "template": "types",
                        "type": {
                          "names": [
                            "Element"
                          ]
                        }
                      },
                      "3": "the alement to wait for a transiton to end on"
                    }
                  ]
                },
                "signature": "Transition.stop (element: Element)",
                "code": "stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
              }
            ]
          },
          {
            "comment": "/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */",
            "meta": {
              "range": [
                3450,
                5393
              ],
              "filename": "8kj5myb3spehpvzb0z0vet.js",
              "lineno": 126,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000196",
                "name": "exports.animate",
                "type": "FunctionDeclaration",
                "paramnames": [
                  "element",
                  "animation",
                  "duration",
                  "origin",
                  "out"
                ]
              }
            },
            "description": "test",
            "params": [
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "element"
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "animation"
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "duration",
                "defaultvalue": "200",
                "optional": true
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "origin"
              },
              {
                "type": {
                  "names": [
                    "*"
                  ]
                },
                "name": "out"
              }
            ],
            "name": "animate",
            "longname": "animate",
            "kind": "function",
            "scope": "global",
            "simpleName": "animate",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "2": "default"
                },
                {
                  "0": "element",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                },
                {
                  "0": "animation",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                },
                {
                  "0": "duration",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  },
                  "2": "200",
                  "optional": true
                },
                {
                  "0": "origin",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                },
                {
                  "0": "out",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "*"
                      ]
                    }
                  }
                }
              ]
            },
            "signature": "animate (element: *, animation: *, [duration: *], origin: *, out: *)",
            "code": "export function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/8kj5myb3spehpvzb0z0vet.js"
            ]
          }
        ],
        "types": {
          "function": [
            {
              "comment": "/**\n *\n * Transition a CSS value.\n * **Note** Before starting a transition, a value for the CSS property to be transitioned has to be present!\n *\n * @example\n\n### Usage\n\n```html\n<div id=\"example\" class=\"uk-card uk-card-primary uk-card-body\">Primary Card</div>\n```\n\n```javascript\nvar element = util.$('#example');\n\n// Transition a CSS property to a certain value\nutil.transition(element, { 'opacity': 0 })\n  .then(console.log('Card was faded out!'));\n```\n\n#### Result\n\n```log\nCard was faded out!\n```\n\n * @param {NodeLike} element - The element\n * @param {Object} props - The CSS properties to be changed\n * @param {Number} [duration = 400] - The transition's duration (in milliseconds)\n * @param {String} [timing = 'linear'] - Timing functions, e.g. `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`\n * @returns {Promise} A promise that resolves when the transition finishes\n */",
              "meta": {
                "range": [
                  1354,
                  2644
                ],
                "filename": "8kj5myb3spehpvzb0z0vet.js",
                "lineno": 47,
                "columnno": 0,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000002",
                  "name": "exports.transition",
                  "type": "FunctionDeclaration",
                  "paramnames": [
                    "element",
                    "props",
                    "duration",
                    "timing"
                  ]
                }
              },
              "description": "Transition a CSS value.\n**Note** Before starting a transition, a value for the CSS property to be transitioned has to be present!",
              "examples": [
                "### Usage\n\n```html\n<div id=\"example\" class=\"uk-card uk-card-primary uk-card-body\">Primary Card</div>\n```\n\n```javascript\nvar element = util.$('#example');\n\n// Transition a CSS property to a certain value\nutil.transition(element, { 'opacity': 0 })\n  .then(console.log('Card was faded out!'));\n```\n\n#### Result\n\n```log\nCard was faded out!\n```"
              ],
              "params": [
                {
                  "type": {
                    "names": [
                      "NodeLike"
                    ]
                  },
                  "description": "The element",
                  "name": "element"
                },
                {
                  "type": {
                    "names": [
                      "Object"
                    ]
                  },
                  "description": "The CSS properties to be changed",
                  "name": "props"
                },
                {
                  "type": {
                    "names": [
                      "Number"
                    ]
                  },
                  "optional": true,
                  "defaultvalue": 400,
                  "description": "The transition's duration (in milliseconds)",
                  "name": "duration"
                },
                {
                  "type": {
                    "names": [
                      "String"
                    ]
                  },
                  "optional": true,
                  "defaultvalue": "'linear'",
                  "description": "Timing functions, e.g. `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`",
                  "name": "timing"
                }
              ],
              "returns": [
                {
                  "type": {
                    "names": [
                      "Promise"
                    ]
                  },
                  "description": "A promise that resolves when the transition finishes"
                }
              ],
              "name": "transition",
              "longname": "transition",
              "kind": "function",
              "scope": "global",
              "simpleName": "transition",
              "tables": {
                "arguments": [
                  {
                    "0": "name",
                    "1": "type",
                    "2": "default",
                    "3": "description"
                  },
                  {
                    "0": "element",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "NodeLike"
                        ]
                      }
                    },
                    "3": "The element"
                  },
                  {
                    "0": "props",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "Object"
                        ]
                      }
                    },
                    "3": "The CSS properties to be changed"
                  },
                  {
                    "0": "duration",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "Number"
                        ]
                      }
                    },
                    "2": 400,
                    "3": "The transition's duration (in milliseconds)",
                    "optional": true
                  },
                  {
                    "0": "timing",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "String"
                        ]
                      }
                    },
                    "2": "'linear'",
                    "3": "Timing functions, e.g. `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`",
                    "optional": true
                  }
                ]
              },
              "signature": "transition (element: NodeLike, props: Object, [duration: Number], [timing: String]) : Promise",
              "code": "export function transition(element, props, duration = 400, timing = 'linear') {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            for (const name in props) {\n                const value = css(element, name);\n                if (value === '') {\n                    css(element, name, value);\n                }\n            }\n\n            const timer = setTimeout(() => trigger(element, 'transitionend'), duration);\n\n            once(element, 'transitionend transitioncanceled', ({type}) => {\n                clearTimeout(timer);\n                removeClass(element, 'uk-transition');\n                css(element, {\n                    'transition-property': '',\n                    'transition-duration': '',\n                    'transition-timing-function': ''\n                });\n                type === 'transitioncanceled' ? reject() : resolve();\n            }, false, ({target}) => element === target);\n\n            addClass(element, 'uk-transition');\n            css(element, assign({\n                'transition-property': Object.keys(props).map(propName).join(','),\n                'transition-duration': `${duration}ms`,\n                'transition-timing-function': timing\n            }, props));\n\n        })\n    ));\n\n}\n\n/**\n * The Transition object makes four handy functions accessible.\n */\nexport const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'en"
            },
            {
              "comment": "/**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */",
              "meta": {
                "range": [
                  2840,
                  2857
                ],
                "filename": "8kj5myb3spehpvzb0z0vet.js",
                "lineno": 94,
                "columnno": 4,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000154",
                  "name": "start",
                  "type": "Identifier",
                  "value": "transition"
                }
              },
              "description": "alias for transition",
              "kind": "function",
              "see": [
                "transition"
              ],
              "name": "start",
              "longname": "Transition.start",
              "memberof": "Transition",
              "scope": "static",
              "simpleName": "Transition.start",
              "signature": "Transition.start()",
              "code": "start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, anim",
              "reference": "transition"
            },
            {
              "comment": "/**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */",
              "meta": {
                "range": [
                  2967,
                  3065
                ],
                "filename": "8kj5myb3spehpvzb0z0vet.js",
                "lineno": 100,
                "columnno": 4,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000156",
                  "name": "stop",
                  "type": "FunctionExpression"
                }
              },
              "params": [
                {
                  "type": {
                    "names": [
                      "Element"
                    ]
                  },
                  "description": "the alement to wait for a transiton to end on",
                  "name": "element"
                }
              ],
              "name": "stop",
              "longname": "Transition.stop",
              "kind": "function",
              "memberof": "Transition",
              "scope": "static",
              "simpleName": "Transition.stop",
              "tables": {
                "arguments": [
                  {
                    "0": "name",
                    "1": "type",
                    "3": "description"
                  },
                  {
                    "0": "element",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "Element"
                        ]
                      }
                    },
                    "3": "the alement to wait for a transiton to end on"
                  }
                ]
              },
              "signature": "Transition.stop (element: Element)",
              "code": "stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
            },
            {
              "comment": "/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */",
              "meta": {
                "range": [
                  3450,
                  5393
                ],
                "filename": "8kj5myb3spehpvzb0z0vet.js",
                "lineno": 126,
                "columnno": 0,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000196",
                  "name": "exports.animate",
                  "type": "FunctionDeclaration",
                  "paramnames": [
                    "element",
                    "animation",
                    "duration",
                    "origin",
                    "out"
                  ]
                }
              },
              "description": "test",
              "params": [
                {
                  "type": {
                    "names": [
                      "*"
                    ]
                  },
                  "name": "element"
                },
                {
                  "type": {
                    "names": [
                      "*"
                    ]
                  },
                  "name": "animation"
                },
                {
                  "type": {
                    "names": [
                      "*"
                    ]
                  },
                  "name": "duration",
                  "defaultvalue": "200",
                  "optional": true
                },
                {
                  "type": {
                    "names": [
                      "*"
                    ]
                  },
                  "name": "origin"
                },
                {
                  "type": {
                    "names": [
                      "*"
                    ]
                  },
                  "name": "out"
                }
              ],
              "name": "animate",
              "longname": "animate",
              "kind": "function",
              "scope": "global",
              "simpleName": "animate",
              "tables": {
                "arguments": [
                  {
                    "0": "name",
                    "1": "type",
                    "2": "default"
                  },
                  {
                    "0": "element",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "*"
                        ]
                      }
                    }
                  },
                  {
                    "0": "animation",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "*"
                        ]
                      }
                    }
                  },
                  {
                    "0": "duration",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "*"
                        ]
                      }
                    },
                    "2": "200",
                    "optional": true
                  },
                  {
                    "0": "origin",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "*"
                        ]
                      }
                    }
                  },
                  {
                    "0": "out",
                    "1": {
                      "template": "types",
                      "type": {
                        "names": [
                          "*"
                        ]
                      }
                    }
                  }
                ]
              },
              "signature": "animate (element: *, animation: *, [duration: *], origin: *, out: *)",
              "code": "export function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
            }
          ],
          "constant": [
            {
              "comment": "/**\n * The Transition object makes four handy functions accessible.\n */",
              "meta": {
                "range": [
                  2718,
                  3232
                ],
                "filename": "8kj5myb3spehpvzb0z0vet.js",
                "lineno": 87,
                "columnno": 0,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000149",
                  "name": "exports.Transition",
                  "type": "VariableDeclaration"
                }
              },
              "description": "The Transition object makes four handy functions accessible.",
              "name": "Transition",
              "longname": "Transition",
              "kind": "constant",
              "scope": "global",
              "code": "export const Transition = {\n\n    /**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */\n    start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n",
              "children": [
                {
                  "comment": "/**\n     * alias for transition\n     * @kind function\n     * @see transition\n     */",
                  "meta": {
                    "range": [
                      2840,
                      2857
                    ],
                    "filename": "8kj5myb3spehpvzb0z0vet.js",
                    "lineno": 94,
                    "columnno": 4,
                    "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                    "code": {
                      "id": "astnode100000154",
                      "name": "start",
                      "type": "Identifier",
                      "value": "transition"
                    }
                  },
                  "description": "alias for transition",
                  "kind": "function",
                  "see": [
                    "transition"
                  ],
                  "name": "start",
                  "longname": "Transition.start",
                  "memberof": "Transition",
                  "scope": "static",
                  "simpleName": "Transition.start",
                  "signature": "Transition.start()",
                  "code": "start: transition,\n\n    /**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */\n    stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, anim",
                  "reference": "transition"
                },
                {
                  "comment": "/**\n     *\n     * @param {Element} element - the alement to wait for a transiton to end on\n     */",
                  "meta": {
                    "range": [
                      2967,
                      3065
                    ],
                    "filename": "8kj5myb3spehpvzb0z0vet.js",
                    "lineno": 100,
                    "columnno": 4,
                    "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                    "code": {
                      "id": "astnode100000156",
                      "name": "stop",
                      "type": "FunctionExpression"
                    }
                  },
                  "params": [
                    {
                      "type": {
                        "names": [
                          "Element"
                        ]
                      },
                      "description": "the alement to wait for a transiton to end on",
                      "name": "element"
                    }
                  ],
                  "name": "stop",
                  "longname": "Transition.stop",
                  "kind": "function",
                  "memberof": "Transition",
                  "scope": "static",
                  "simpleName": "Transition.stop",
                  "tables": {
                    "arguments": [
                      {
                        "0": "name",
                        "1": "type",
                        "3": "description"
                      },
                      {
                        "0": "element",
                        "1": {
                          "template": "types",
                          "type": {
                            "names": [
                              "Element"
                            ]
                          }
                        },
                        "3": "the alement to wait for a transiton to end on"
                      }
                    ]
                  },
                  "signature": "Transition.stop (element: Element)",
                  "code": "stop(element) {\n        trigger(element, 'transitionend');\n        return Promise.resolve();\n    },\n\n    cancel(element) {\n        trigger(element, 'transitioncanceled');\n    },\n\n    inProgress(element) {\n        return hasClass(element, 'uk-transition');\n    }\n\n};\n\nconst animationPrefix = 'uk-animation-';\nconst clsCancelAnimation = 'uk-cancel-animation';\n\n/**\n * test\n * @param {*} element\n * @param {*} animation\n * @param {*} duration\n * @param {*} origin\n * @param {*} out\n */\nexport function animate(element, animation, duration = 200, origin, out) {\n\n    return Promise.all(toNodes(element).map(element =>\n        new Promise((resolve, reject) => {\n\n            if (hasClass(element, clsCancelAnimation)) {\n                requestAnimationFrame(() =>\n                    Promise.resolve().then(() =>\n                        animate(...arguments).then(resolve, reject)\n                    )\n                );\n                return;\n            }\n\n            let cls = `${animation} ${animationPrefix}${out ? 'leave' : 'enter'}`;\n\n            if (startsWith(animation, animationPrefix)) {\n\n                if (origin) {\n                    cls += ` uk-transform-origin-${origin}`;\n                }\n\n                if (out) {\n                    cls += ` ${animationPrefix}reverse`;\n                }\n\n            }\n\n            reset();\n\n            once(element, 'animationend animationcancel', ({type}) => {\n\n                let hasReset = false;\n\n                if (type === 'animationcancel') {\n                    reject();\n                    reset();\n                } else {\n                    resolve();\n                    Promise.resolve().then(() => {\n                        hasReset = true;\n                        reset();\n                    });\n                }\n\n                requestAnimationFrame(() => {\n                    if (!hasReset) {\n                        addClass(element, clsCancelAnimation);\n\n                        requestAnimationFrame(() => removeClass(element, clsCancelAnimation));\n                    }\n                });\n\n            }, false, ({target}) => element === target);\n\n            css(element, 'animationDuration', `${duration}ms`);\n            addClass(element, cls);\n\n            function reset() {\n                css(element, 'animationDuration', '');\n                removeClasses(element, `${animationPrefix}\\\\S*`);\n            }\n\n        })\n    ));\n\n}\n\nconst inProgress = new RegExp(`${animationPrefix}(enter|leave)`);\nexport const Animation = {\n\n    in(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, false);\n    },\n\n    out(element, animation, duration, origin) {\n        return animate(element, animation, duration, origin, true);\n    },\n\n    inProgress(element) {\n        return inProgress.test(attr(element, 'class'));\n    },\n\n    cancel(element) {\n        trigger(element, 'animationcancel');\n    }\n\n};\n"
                }
              ]
            }
          ],
          "package": [
            {
              "kind": "package",
              "longname": "package:undefined",
              "files": [
                "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/8kj5myb3spehpvzb0z0vet.js"
              ]
            }
          ]
        }
      },
      "component": {}
    },
    "src.vue.Container.vue": {
      "_events": {},
      "_eventsCount": 0,
      "package": "examples",
      "path": "/Users/jms/yootheme-doctools/examples/src/vue/Container.vue",
      "fileInPackage": "./src/vue/Container.vue",
      "name": "Container",
      "resource": "src.vue.Container.vue",
      "type": "VueComponent",
      "template": {
        "template": "<Modal>super simple modal</Modal>"
      },
      "script": "import Modal from './Modal.vue';\n\nexport default {\n\n    components: {\n        Modal\n    },\n\n    created() {\n        \n        /**\n         * @event test\n         * @kind Trigger\n         * @param {String} a - parameter a\n         * \n         **/\n        this.$trigger('test', ['a', 'b']);\n    }\n\n}",
      "module": {
        "all": [
          {
            "comment": "",
            "meta": {
              "range": [
                34,
                296
              ],
              "filename": "lfck8hxijs9rz0zu7qc6y.js",
              "lineno": 3,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000006",
                "name": "module.exports",
                "type": "ObjectExpression"
              }
            },
            "undocumented": true,
            "name": "exports",
            "longname": "module.exports",
            "kind": "member",
            "memberof": "module",
            "scope": "static",
            "code": "export default {\n\n    components: {\n        Modal\n    },\n\n    created() {\n        \n        /**\n         * @event test\n         * @kind Trigger\n         * @param {String} a - parameter a\n         * \n         **/\n        this.$trigger('test', ['a', 'b']);\n    }\n\n}"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                56,
                89
              ],
              "filename": "lfck8hxijs9rz0zu7qc6y.js",
              "lineno": 5,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000008",
                "name": "components",
                "type": "ObjectExpression",
                "value": "{\"Modal\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "components",
            "longname": "module.exports.components",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "components: {\n        Modal\n    },\n\n    created() {\n        \n        /**\n         * @even"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                78,
                83
              ],
              "filename": "lfck8hxijs9rz0zu7qc6y.js",
              "lineno": 6,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000010",
                "name": "Modal",
                "type": "Identifier",
                "value": "Modal"
              }
            },
            "undocumented": true,
            "name": "Modal",
            "longname": "module.exports.components.Modal",
            "kind": "member",
            "memberof": "module.exports.components",
            "scope": "static",
            "code": "Modal\n    },\n\n    created() {\n        \n        /**\n         * @event test\n         "
          },
          {
            "comment": "",
            "meta": {
              "range": [
                96,
                293
              ],
              "filename": "lfck8hxijs9rz0zu7qc6y.js",
              "lineno": 9,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000012",
                "name": "created",
                "type": "FunctionExpression"
              }
            },
            "undocumented": true,
            "name": "created",
            "longname": "module.exports.created",
            "kind": "function",
            "memberof": "module.exports",
            "scope": "static",
            "code": "created() {\n        \n        /**\n         * @event test\n         * @kind Trigger\n         * @param {String} a - parameter a\n         * \n         **/\n        this.$trigger('test', ['a', 'b']);\n    }\n\n}"
          },
          {
            "comment": "/**\n         * @event test\n         * @kind Trigger\n         * @param {String} a - parameter a\n         * \n         **/",
            "meta": {
              "filename": "lfck8hxijs9rz0zu7qc6y.js",
              "lineno": 11,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "kind": "Trigger",
            "name": "test",
            "params": [
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "parameter a",
                "name": "a"
              }
            ],
            "longname": "test",
            "scope": "global"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/lfck8hxijs9rz0zu7qc6y.js"
            ]
          }
        ],
        "documented": [
          {
            "comment": "/**\n         * @event test\n         * @kind Trigger\n         * @param {String} a - parameter a\n         * \n         **/",
            "meta": {
              "filename": "lfck8hxijs9rz0zu7qc6y.js",
              "lineno": 11,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "kind": "Trigger",
            "name": "test",
            "params": [
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "parameter a",
                "name": "a"
              }
            ],
            "longname": "test",
            "scope": "global"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/lfck8hxijs9rz0zu7qc6y.js"
            ]
          }
        ],
        "global": [],
        "types": {
          "Trigger": [
            {
              "comment": "/**\n         * @event test\n         * @kind Trigger\n         * @param {String} a - parameter a\n         * \n         **/",
              "meta": {
                "filename": "lfck8hxijs9rz0zu7qc6y.js",
                "lineno": 11,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {}
              },
              "kind": "Trigger",
              "name": "test",
              "params": [
                {
                  "type": {
                    "names": [
                      "String"
                    ]
                  },
                  "description": "parameter a",
                  "name": "a"
                }
              ],
              "longname": "test",
              "scope": "global"
            }
          ],
          "package": [
            {
              "kind": "package",
              "longname": "package:undefined",
              "files": [
                "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/lfck8hxijs9rz0zu7qc6y.js"
              ]
            }
          ]
        }
      },
      "component": {}
    },
    "src.vue.Element.vue": {
      "_events": {},
      "_eventsCount": 0,
      "package": "examples",
      "path": "/Users/jms/yootheme-doctools/examples/src/vue/Element.vue",
      "fileInPackage": "./src/vue/Element.vue",
      "name": "Element",
      "resource": "src.vue.Element.vue",
      "type": "VueComponent",
      "template": {
        "template": "<div class=\"yo-builder-element uk-flex-1 uk-width-1-1 uk-flex uk-flex-center uk-flex-middle\">\n\n    <div class=\"uk-text-center\">\n        <img :alt=\"title\" :src=\"icon\" class=\"uk-svg\" width=\"20\" height=\"20\" uk-svg>\n        <span class=\"uk-margin-small-left uk-text-middle\">\n\n            <template v-if=\"exists\">{{ title }}</template>\n            <i v-else>{{ title }}</i>\n        </span>\n    </div>\n    <!-- @trigger elementHover triggered when an element in the layout editor is hovered-->\n    <!-- @param {Number} nodeId - the id of the node that has been hovered -->\n\n    <!-- @trigger elementLeave triggered when the mouse leaves a layout editor element -->\n    <!-- @param {Number} nodeId - the id of the node that has been hovered -->\n    <a v-if=\"exists\" class=\"uk-position-cover\" @mouseover=\"$trigger('elementHover', nodeId)\" @mouseout=\"$trigger('elementLeave', nodeId)\" @click.prevent=\"builder.edit(node)\"></a>\n\n    <div class=\"yo-builder-nav-element uk-builder-element-hover\">\n        <ul class=\"uk-grid uk-grid-collapse\">\n            <li><a :title=\"$trans('Copy')\" class=\"yo-builder-icon-copy\" uk-tooltip=\"delay: 1000\" @click.prevent=\"builder.clone(node)\"></a></li>\n            <!-- @trigger saveElement triggered when the save save button is clicked -->\n            <!-- @param {Node} node - the node to be saved -->\n            <li><a :title=\"$trans('Save in library')\" class=\"yo-builder-icon-save\" uk-tooltip=\"delay: 1000\" @click.prevent=\"$trigger('saveElement', node)\"></a></li>\n            <li><a :title=\"$trans('Delete')\" class=\"yo-builder-icon-delete\" uk-tooltip=\"delay: 1000\" @click.prevent=\"builder.remove(node)\"></a></li>\n        </ul>\n    </div>\n\n    <a :title=\"$trans('Add Element')\" class=\"uk-icon-button yo-builder-button-element yo-builder-icon-add uk-builder-element-hover\" uk-tooltip=\"delay: 1000; pos: right\" @click.prevent=\"$parent.chooseAndAddEntity(index + 1)\"></a>\n\n</div>"
      },
      "script": "import {some, upperFirst} from 'lodash';\n\n/**\n * An Element represents an Element in the layout-editor of the Builder.\n * It implicitly extends `Node`.\n * @extends Node\n */\nexport default {\n\n    computed: {\n        /**\n         * The uniquie continous ID if this component\n         * @type {Number}\n         */\n        nodeId() {\n            return this.findId().id;\n        }\n    },\n\n    methods: {\n\n        /**\n         * Determines the uniquie Id for this component\n         * @returns {Object} Returns the id of this component\n         * @private\n         * @param {Node} [root = this.builder.layout] - The root node to start counting from\n         * @param {Integer} [id = 1] - The ID to start counting from\n         */\n        findId(root = this.builder.layout, id = 1) {\n            let found = some(root.children, child => {\n\n                if (this.node === child) {\n                    return true;\n                } else if (this.$registry.elements[child.type]) {\n                    id++;\n                }\n                ({id, found} = this.findId(child, id));\n                return found;\n            });\n            return {id, found};\n\n        }\n\n    }\n\n};",
      "module": {
        "all": [
          {
            "comment": "/**\n * An Element represents an Element in the layout-editor of the Builder.\n * It implicitly extends `Node`.\n * @extends Node\n */",
            "meta": {
              "range": [
                173,
                1175
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 8,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000008",
                "name": "module.exports",
                "type": "ObjectExpression"
              }
            },
            "description": "An Element represents an Element in the layout-editor of the Builder.\nIt implicitly extends `Node`.",
            "augments": [
              "Node"
            ],
            "name": "exports",
            "longname": "module.exports",
            "kind": "member",
            "memberof": "module",
            "scope": "static",
            "code": "export default {\n\n    computed: {\n        /**\n         * The uniquie continous ID if this component\n         * @type {Number}\n         */\n        nodeId() {\n            return this.findId().id;\n        }\n    },\n\n    methods: {\n\n        /**\n         * Determines the uniquie Id for this component\n         * @returns {Object} Returns the id of this component\n         * @private\n         * @param {Node} [root = this.builder.layout] - The root node to start counting from\n         * @param {Integer} [id = 1] - The ID to start counting from\n         */\n        findId(root = this.builder.layout, id = 1) {\n            let found = some(root.children, child => {\n\n                if (this.node === child) {\n                    return true;\n                } else if (this.$registry.elements[child.type]) {\n                    id++;\n                }\n                ({id, found} = this.findId(child, id));\n                return found;\n            });\n            return {id, found};\n\n        }\n\n    }\n\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                195,
                382
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 10,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000010",
                "name": "computed",
                "type": "ObjectExpression",
                "value": "{\"nodeId\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "computed",
            "longname": "module.exports.computed",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "computed: {\n        /**\n         * The uniquie continous ID if this component\n         * @type {Number}\n         */\n        nodeId() {\n            return this.findId().id;\n        }\n    },\n\n    methods: {\n\n        /**\n         * Determines the uniquie Id for this component\n         * @returns {Object} Returns the id of this component\n         * @private\n         * @param {Node} ["
          },
          {
            "comment": "/**\n         * The uniquie continous ID if this component\n         * @type {Number}\n         */",
            "meta": {
              "range": [
                319,
                376
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 15,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000012",
                "name": "nodeId",
                "type": "FunctionExpression"
              }
            },
            "description": "The uniquie continous ID if this component",
            "type": {
              "names": [
                "Number"
              ]
            },
            "name": "nodeId",
            "longname": "module.exports.computed.nodeId",
            "kind": "function",
            "memberof": "module.exports.computed",
            "scope": "static",
            "simpleName": "nodeId",
            "signature": "module.exports.computed.nodeId()",
            "code": "nodeId() {\n            return this.findId().id;\n        }\n    },\n\n    methods: {\n\n        /**\n         * Determines the uniquie Id for this component\n         * @returns {Object} Returns the id of this component\n         * @private\n         * @param {Node} [root = this.builder.layout] - The root node to start counting from\n         * @param {Integer} [id = 1] - The ID to st"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                389,
                1171
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 20,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000022",
                "name": "methods",
                "type": "ObjectExpression",
                "value": "{\"findId\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "methods",
            "longname": "module.exports.methods",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "methods: {\n\n        /**\n         * Determines the uniquie Id for this component\n         * @returns {Object} Returns the id of this component\n         * @private\n         * @param {Node} [root = this.builder.layout] - The root node to start counting from\n         * @param {Integer} [id = 1] - The ID to start counting from\n         */\n        findId(root = this.builder.layout, id = 1) {\n            let found = some(root.children, child => {\n\n                if (this.node === child) {\n                    return true;\n                } else if (this.$registry.elements[child.type]) {\n                    id++;\n                }\n                ({id, found} = this.findId(child, id));\n                return found;\n            });\n            return {id, found};\n\n        }\n\n    }\n\n};"
          },
          {
            "comment": "/**\n         * Determines the uniquie Id for this component\n         * @returns {Object} Returns the id of this component\n         * @private\n         * @param {Node} [root = this.builder.layout] - The root node to start counting from\n         * @param {Integer} [id = 1] - The ID to start counting from\n         */",
            "meta": {
              "range": [
                733,
                1164
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 29,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000024",
                "name": "findId",
                "type": "FunctionExpression"
              },
              "vars": {
                "found": "module.exports.methods.findId~found",
                "": null
              }
            },
            "description": "Determines the uniquie Id for this component",
            "returns": [
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "description": "Returns the id of this component"
              }
            ],
            "access": "private",
            "params": [
              {
                "type": {
                  "names": [
                    "Node"
                  ]
                },
                "optional": true,
                "defaultvalue": "this.builder.layout",
                "description": "The root node to start counting from",
                "name": "root"
              },
              {
                "type": {
                  "names": [
                    "Integer"
                  ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "The ID to start counting from",
                "name": "id"
              }
            ],
            "name": "findId",
            "longname": "module.exports.methods.findId",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "findId",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "2": "default",
                  "3": "description"
                },
                {
                  "0": "root",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Node"
                      ]
                    }
                  },
                  "2": "this.builder.layout",
                  "3": "The root node to start counting from",
                  "optional": true
                },
                {
                  "0": "id",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Integer"
                      ]
                    }
                  },
                  "2": 1,
                  "3": "The ID to start counting from",
                  "optional": true
                }
              ]
            },
            "signature": "findId ([root: Node], [id: Integer]) : Object",
            "code": "findId(root = this.builder.layout, id = 1) {\n            let found = some(root.children, child => {\n\n                if (this.node === child) {\n                    return true;\n                } else if (this.$registry.elements[child.type]) {\n                    id++;\n                }\n                ({id, found} = this.findId(child, id));\n                return found;\n            });\n            return {id, found};\n\n        }\n\n    }\n\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                794,
                1120
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 30,
              "columnno": 16,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000038",
                "name": "found",
                "type": "CallExpression",
                "value": ""
              }
            },
            "undocumented": true,
            "name": "found",
            "longname": "module.exports.methods.findId~found",
            "kind": "member",
            "memberof": "module.exports.methods.findId",
            "scope": "inner",
            "params": [],
            "code": "found = some(root.children, child => {\n\n                if (this.node === child) {\n                    return true;\n                } else if (this.$registry.elements[child.type]) {\n                    id++;\n                }\n                ({id, found} = this.findId(child, id));\n                return found;\n            });\n            return {id, found};\n\n        }\n\n    }\n\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1038,
                1040
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 37,
              "columnno": 18,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000074",
                "name": "id",
                "type": "Identifier",
                "value": "id"
              }
            },
            "undocumented": true,
            "name": "id",
            "longname": "id",
            "kind": "member",
            "scope": "global",
            "code": "id, found} = this.findId(child, id));\n                return found;\n            });\n            return {id, found};\n\n        }\n\n    }\n\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1042,
                1047
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 37,
              "columnno": 22,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000076",
                "name": "found",
                "type": "Identifier",
                "value": "found"
              }
            },
            "undocumented": true,
            "name": "found",
            "longname": "found",
            "kind": "member",
            "scope": "global",
            "code": "found} = this.findId(child, id));\n                return found;\n            });\n            return {id, found};\n\n        }\n\n    }\n\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1142,
                1144
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 40,
              "columnno": 20,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000088",
                "name": "id",
                "type": "Identifier",
                "value": "id"
              }
            },
            "undocumented": true,
            "name": "id",
            "longname": "id",
            "kind": "member",
            "scope": "global",
            "code": "id, found};\n\n        }\n\n    }\n\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1146,
                1151
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 40,
              "columnno": 24,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000090",
                "name": "found",
                "type": "Identifier",
                "value": "found"
              }
            },
            "undocumented": true,
            "name": "found",
            "longname": "found",
            "kind": "member",
            "scope": "global",
            "code": "found};\n\n        }\n\n    }\n\n};"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/q7pey7s1kik3e7hbfv8mp.js"
            ]
          }
        ],
        "documented": [
          {
            "comment": "/**\n * An Element represents an Element in the layout-editor of the Builder.\n * It implicitly extends `Node`.\n * @extends Node\n */",
            "meta": {
              "range": [
                173,
                1175
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 8,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000008",
                "name": "module.exports",
                "type": "ObjectExpression"
              }
            },
            "description": "An Element represents an Element in the layout-editor of the Builder.\nIt implicitly extends `Node`.",
            "augments": [
              "Node"
            ],
            "name": "exports",
            "longname": "module.exports",
            "kind": "member",
            "memberof": "module",
            "scope": "static",
            "code": "export default {\n\n    computed: {\n        /**\n         * The uniquie continous ID if this component\n         * @type {Number}\n         */\n        nodeId() {\n            return this.findId().id;\n        }\n    },\n\n    methods: {\n\n        /**\n         * Determines the uniquie Id for this component\n         * @returns {Object} Returns the id of this component\n         * @private\n         * @param {Node} [root = this.builder.layout] - The root node to start counting from\n         * @param {Integer} [id = 1] - The ID to start counting from\n         */\n        findId(root = this.builder.layout, id = 1) {\n            let found = some(root.children, child => {\n\n                if (this.node === child) {\n                    return true;\n                } else if (this.$registry.elements[child.type]) {\n                    id++;\n                }\n                ({id, found} = this.findId(child, id));\n                return found;\n            });\n            return {id, found};\n\n        }\n\n    }\n\n};"
          },
          {
            "comment": "/**\n         * The uniquie continous ID if this component\n         * @type {Number}\n         */",
            "meta": {
              "range": [
                319,
                376
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 15,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000012",
                "name": "nodeId",
                "type": "FunctionExpression"
              }
            },
            "description": "The uniquie continous ID if this component",
            "type": {
              "names": [
                "Number"
              ]
            },
            "name": "nodeId",
            "longname": "module.exports.computed.nodeId",
            "kind": "function",
            "memberof": "module.exports.computed",
            "scope": "static",
            "simpleName": "nodeId",
            "signature": "module.exports.computed.nodeId()",
            "code": "nodeId() {\n            return this.findId().id;\n        }\n    },\n\n    methods: {\n\n        /**\n         * Determines the uniquie Id for this component\n         * @returns {Object} Returns the id of this component\n         * @private\n         * @param {Node} [root = this.builder.layout] - The root node to start counting from\n         * @param {Integer} [id = 1] - The ID to st"
          },
          {
            "comment": "/**\n         * Determines the uniquie Id for this component\n         * @returns {Object} Returns the id of this component\n         * @private\n         * @param {Node} [root = this.builder.layout] - The root node to start counting from\n         * @param {Integer} [id = 1] - The ID to start counting from\n         */",
            "meta": {
              "range": [
                733,
                1164
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 29,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000024",
                "name": "findId",
                "type": "FunctionExpression"
              },
              "vars": {
                "found": "module.exports.methods.findId~found",
                "": null
              }
            },
            "description": "Determines the uniquie Id for this component",
            "returns": [
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "description": "Returns the id of this component"
              }
            ],
            "access": "private",
            "params": [
              {
                "type": {
                  "names": [
                    "Node"
                  ]
                },
                "optional": true,
                "defaultvalue": "this.builder.layout",
                "description": "The root node to start counting from",
                "name": "root"
              },
              {
                "type": {
                  "names": [
                    "Integer"
                  ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "The ID to start counting from",
                "name": "id"
              }
            ],
            "name": "findId",
            "longname": "module.exports.methods.findId",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "findId",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "2": "default",
                  "3": "description"
                },
                {
                  "0": "root",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Node"
                      ]
                    }
                  },
                  "2": "this.builder.layout",
                  "3": "The root node to start counting from",
                  "optional": true
                },
                {
                  "0": "id",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Integer"
                      ]
                    }
                  },
                  "2": 1,
                  "3": "The ID to start counting from",
                  "optional": true
                }
              ]
            },
            "signature": "findId ([root: Node], [id: Integer]) : Object",
            "code": "findId(root = this.builder.layout, id = 1) {\n            let found = some(root.children, child => {\n\n                if (this.node === child) {\n                    return true;\n                } else if (this.$registry.elements[child.type]) {\n                    id++;\n                }\n                ({id, found} = this.findId(child, id));\n                return found;\n            });\n            return {id, found};\n\n        }\n\n    }\n\n};"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/q7pey7s1kik3e7hbfv8mp.js"
            ]
          }
        ],
        "global": [],
        "types": {
          "member": [
            {
              "comment": "/**\n * An Element represents an Element in the layout-editor of the Builder.\n * It implicitly extends `Node`.\n * @extends Node\n */",
              "meta": {
                "range": [
                  173,
                  1175
                ],
                "filename": "q7pey7s1kik3e7hbfv8mp.js",
                "lineno": 8,
                "columnno": 0,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000008",
                  "name": "module.exports",
                  "type": "ObjectExpression"
                }
              },
              "description": "An Element represents an Element in the layout-editor of the Builder.\nIt implicitly extends `Node`.",
              "augments": [
                "Node"
              ],
              "name": "exports",
              "longname": "module.exports",
              "kind": "member",
              "memberof": "module",
              "scope": "static",
              "code": "export default {\n\n    computed: {\n        /**\n         * The uniquie continous ID if this component\n         * @type {Number}\n         */\n        nodeId() {\n            return this.findId().id;\n        }\n    },\n\n    methods: {\n\n        /**\n         * Determines the uniquie Id for this component\n         * @returns {Object} Returns the id of this component\n         * @private\n         * @param {Node} [root = this.builder.layout] - The root node to start counting from\n         * @param {Integer} [id = 1] - The ID to start counting from\n         */\n        findId(root = this.builder.layout, id = 1) {\n            let found = some(root.children, child => {\n\n                if (this.node === child) {\n                    return true;\n                } else if (this.$registry.elements[child.type]) {\n                    id++;\n                }\n                ({id, found} = this.findId(child, id));\n                return found;\n            });\n            return {id, found};\n\n        }\n\n    }\n\n};"
            }
          ],
          "function": [],
          "package": [
            {
              "kind": "package",
              "longname": "package:undefined",
              "files": [
                "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/q7pey7s1kik3e7hbfv8mp.js"
              ]
            }
          ]
        },
        "description": "An Element represents an Element in the layout-editor of the Builder.\nIt implicitly extends `Node`."
      },
      "component": {
        "computed": {
          "nodeId": {
            "comment": "/**\n         * The uniquie continous ID if this component\n         * @type {Number}\n         */",
            "meta": {
              "range": [
                319,
                376
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 15,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000012",
                "name": "nodeId",
                "type": "FunctionExpression"
              }
            },
            "description": "The uniquie continous ID if this component",
            "type": {
              "names": [
                "Number"
              ]
            },
            "name": "nodeId",
            "longname": "module.exports.computed.nodeId",
            "kind": "function",
            "memberof": "module.exports.computed",
            "scope": "static",
            "simpleName": "nodeId",
            "signature": "module.exports.computed.nodeId()",
            "code": "nodeId() {\n            return this.findId().id;\n        }\n    },\n\n    methods: {\n\n        /**\n         * Determines the uniquie Id for this component\n         * @returns {Object} Returns the id of this component\n         * @private\n         * @param {Node} [root = this.builder.layout] - The root node to start counting from\n         * @param {Integer} [id = 1] - The ID to st"
          }
        },
        "methods": {
          "findId": {
            "comment": "/**\n         * Determines the uniquie Id for this component\n         * @returns {Object} Returns the id of this component\n         * @private\n         * @param {Node} [root = this.builder.layout] - The root node to start counting from\n         * @param {Integer} [id = 1] - The ID to start counting from\n         */",
            "meta": {
              "range": [
                733,
                1164
              ],
              "filename": "q7pey7s1kik3e7hbfv8mp.js",
              "lineno": 29,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000024",
                "name": "findId",
                "type": "FunctionExpression"
              },
              "vars": {
                "found": "module.exports.methods.findId~found",
                "": null
              }
            },
            "description": "Determines the uniquie Id for this component",
            "returns": [
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "description": "Returns the id of this component"
              }
            ],
            "access": "private",
            "params": [
              {
                "type": {
                  "names": [
                    "Node"
                  ]
                },
                "optional": true,
                "defaultvalue": "this.builder.layout",
                "description": "The root node to start counting from",
                "name": "root"
              },
              {
                "type": {
                  "names": [
                    "Integer"
                  ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "The ID to start counting from",
                "name": "id"
              }
            ],
            "name": "findId",
            "longname": "module.exports.methods.findId",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "findId",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "2": "default",
                  "3": "description"
                },
                {
                  "0": "root",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Node"
                      ]
                    }
                  },
                  "2": "this.builder.layout",
                  "3": "The root node to start counting from",
                  "optional": true
                },
                {
                  "0": "id",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Integer"
                      ]
                    }
                  },
                  "2": 1,
                  "3": "The ID to start counting from",
                  "optional": true
                }
              ]
            },
            "signature": "findId ([root: Node], [id: Integer]) : Object",
            "code": "findId(root = this.builder.layout, id = 1) {\n            let found = some(root.children, child => {\n\n                if (this.node === child) {\n                    return true;\n                } else if (this.$registry.elements[child.type]) {\n                    id++;\n                }\n                ({id, found} = this.findId(child, id));\n                return found;\n            });\n            return {id, found};\n\n        }\n\n    }\n\n};"
          }
        },
        "trigger": {
          "elementHover": {
            "comment": "<!-- @trigger elementHover triggered when an element in the layout editor is hovered-->",
            "kind": "trigger",
            "type": {
              "names": [
                null
              ]
            },
            "name": "elementHover",
            "description": "triggered when an element in the layout editor is hovered",
            "params": [],
            "resource": "src.vue.Element.vue",
            "template": "function",
            "simpleName": "elementHover",
            "tables": {
              "arguments": [
                {}
              ]
            },
            "signature": "elementHover ()"
          },
          "elementLeave": {
            "comment": "<!-- @trigger elementLeave triggered when the mouse leaves a layout editor element -->",
            "kind": "trigger",
            "type": {
              "names": [
                null
              ]
            },
            "name": "elementLeave",
            "description": "triggered when the mouse leaves a layout editor element",
            "params": [],
            "resource": "src.vue.Element.vue",
            "template": "function",
            "simpleName": "elementLeave",
            "tables": {
              "arguments": [
                {}
              ]
            },
            "signature": "elementLeave ()"
          },
          "saveElement": {
            "comment": "<!-- @trigger saveElement triggered when the save save button is clicked -->",
            "kind": "trigger",
            "type": {
              "names": [
                null
              ]
            },
            "name": "saveElement",
            "description": "triggered when the save save button is clicked",
            "params": [],
            "resource": "src.vue.Element.vue",
            "template": "function",
            "simpleName": "saveElement",
            "tables": {
              "arguments": [
                {}
              ]
            },
            "signature": "saveElement ()"
          }
        }
      }
    },
    "src.vue.Modal.vue": {
      "_events": {},
      "_eventsCount": 0,
      "package": "examples",
      "path": "/Users/jms/yootheme-doctools/examples/src/vue/Modal.vue",
      "fileInPackage": "./src/vue/Modal.vue",
      "name": "Modal",
      "resource": "src.vue.Modal.vue",
      "type": "VueComponent",
      "template": {
        "template": "<div v-show=\"false\">\n    <div ref=\"modal\" :class=\"{'uk-modal-Container': container}\" @beforeshow.self=\"opened = true\" @hidden.self=\"onHidden\">\n        <div :class=\"['uk-modal-dialog', clsWidth]\">\n            <div v-if=\"opened\">\n                <component ref=\"content\" v-bind=\"props \" :is=\"content\"/>\n                <!-- @slot default The slot for the\n                content if slotted method is used -->\n                <slot></slot>\n            </div>\n        </div>\n    </div>\n</div>"
      },
      "script": "import UIkit from 'uikit';\n\n/**\n * Reusable modal component using UIkit.modal and VUE.\n * @example\n * <Modal><ChilComponent/></Modal>\n */\nexport default {\n\n    props: {\n        /**\n         * When using the modal with a content component, you can pass the child's component properties here\n         * @example\n         * <Modal :props=\"{type:'checkbox'}\" :content=\"InputConpnent\"/>\n         */\n        props: {\n            type: Object,\n            required: true\n        },\n\n        /**\n         * a test property\n         */\n        test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};",
      "readme": "\nI can write as much as I want here because this block is called \"readme\"\n",
      "module": {
        "all": [
          {
            "comment": "/**\n * Reusable modal component using UIkit.modal and VUE.\n * @example\n * <Modal><ChilComponent/></Modal>\n */",
            "meta": {
              "range": [
                138,
                3683
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 8,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000006",
                "name": "module.exports",
                "type": "ObjectExpression"
              }
            },
            "description": "Reusable modal component using UIkit.modal and VUE.",
            "examples": [
              "<Modal><ChilComponent/></Modal>"
            ],
            "name": "exports",
            "longname": "module.exports",
            "kind": "member",
            "memberof": "module",
            "scope": "static",
            "code": "export default {\n\n    props: {\n        /**\n         * When using the modal with a content component, you can pass the child's component properties here\n         * @example\n         * <Modal :props=\"{type:'checkbox'}\" :content=\"InputConpnent\"/>\n         */\n        props: {\n            type: Object,\n            required: true\n        },\n\n        /**\n         * a test property\n         */\n        test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                160,
                913
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 10,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000008",
                "name": "props",
                "type": "ObjectExpression",
                "value": "{\"props\":\"\",\"test\":\"\",\"content\":\"\",\"width\":\"\",\"container\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "props",
            "longname": "module.exports.props",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "props: {\n        /**\n         * When using the modal with a content component, you can pass the child's component properties here\n         * @example\n         * <Modal :props=\"{type:'checkbox'}\" :content=\"InputConpnent\"/>\n         */\n        props: {\n            type: Object,\n            required: true\n        },\n\n        /**\n         * a test property\n         */\n        test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentE"
          },
          {
            "comment": "/**\n         * When using the modal with a content component, you can pass the child's component properties here\n         * @example\n         * <Modal :props=\"{type:'checkbox'}\" :content=\"InputConpnent\"/>\n         */",
            "meta": {
              "range": [
                402,
                473
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 16,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000010",
                "name": "props",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\",\"required\":true}"
              }
            },
            "description": "When using the modal with a content component, you can pass the child's component properties here",
            "examples": [
              "<Modal :props=\"{type:'checkbox'}\" :content=\"InputConpnent\"/>"
            ],
            "name": "props",
            "longname": "module.exports.props.props",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "props: {\n            type: Object,\n            required: true\n        },\n\n        /**\n         * a test property\n         */\n        test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n      ",
            "simpleName": "props"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                423,
                435
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 17,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000012",
                "name": "type",
                "type": "Identifier",
                "value": "Object"
              }
            },
            "undocumented": true,
            "name": "type",
            "longname": "module.exports.props.props.type",
            "kind": "member",
            "memberof": "module.exports.props.props",
            "scope": "static",
            "code": "type: Object,\n            required: true\n        },\n\n        /**\n         * a test property\n         */\n        test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Conta"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                449,
                463
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 18,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000014",
                "name": "required",
                "type": "Literal",
                "value": true
              }
            },
            "undocumented": true,
            "name": "required",
            "longname": "module.exports.props.props.required",
            "kind": "member",
            "memberof": "module.exports.props.props",
            "scope": "static",
            "code": "required: true\n        },\n\n        /**\n         * a test property\n         */\n        test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    "
          },
          {
            "comment": "/**\n         * a test property\n         */",
            "meta": {
              "range": [
                535,
                547
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 24,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000016",
                "name": "test",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "a test property",
            "name": "test",
            "longname": "module.exports.props.test",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: []",
            "simpleName": "test"
          },
          {
            "comment": "/**\n         * A component descriptor to construct a child element from\n         */",
            "meta": {
              "range": [
                650,
                665
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 29,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000018",
                "name": "content",
                "type": "Identifier",
                "value": "Object"
              }
            },
            "description": "A component descriptor to construct a child element from",
            "name": "content",
            "longname": "module.exports.props.content",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },",
            "simpleName": "content"
          },
          {
            "comment": "/**\n         * Optional uk-width-($with) class for the modal to use.\n         **/",
            "meta": {
              "range": [
                766,
                809
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 34,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000020",
                "name": "width",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\"}"
              }
            },
            "description": "Optional uk-width-($with) class for the modal to use.",
            "name": "width",
            "longname": "module.exports.props.width",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @pr",
            "simpleName": "width"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                787,
                799
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 35,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000022",
                "name": "type",
                "type": "Identifier",
                "value": "String"
              }
            },
            "undocumented": true,
            "name": "type",
            "longname": "module.exports.props.width.type",
            "kind": "member",
            "memberof": "module.exports.props.width",
            "scope": "static",
            "code": "type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n  "
          },
          {
            "comment": "/**\n         * Adds the uk-modal-Container class\n         */",
            "meta": {
              "range": [
                889,
                907
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 41,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000024",
                "name": "container",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "Adds the uk-modal-Container class",
            "name": "container",
            "longname": "module.exports.props.container",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getC",
            "simpleName": "container"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                920,
                1314
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 44,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000026",
                "name": "data",
                "type": "FunctionExpression"
              }
            },
            "undocumented": true,
            "name": "data",
            "longname": "module.exports.data",
            "kind": "function",
            "memberof": "module.exports",
            "scope": "static",
            "code": "data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event"
          },
          {
            "comment": "/**\n             * A list of registered events\n             * @type {String[]}\n             */",
            "meta": {
              "range": [
                1065,
                1082
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 50,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000031",
                "name": "contentEvents",
                "type": "ArrayExpression",
                "value": "[]"
              }
            },
            "description": "A list of registered events",
            "type": {
              "names": [
                "Array.<String>"
              ]
            },
            "name": "contentEvents",
            "longname": "contentEvents",
            "kind": "member",
            "scope": "global",
            "code": "contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) "
          },
          {
            "comment": "/**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */",
            "meta": {
              "range": [
                1209,
                1222
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 55,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000033",
                "name": "opened",
                "type": "Literal",
                "value": false
              }
            },
            "description": "Weather this Modal has been opened",
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "name": "opened",
            "longname": "opened",
            "kind": "member",
            "scope": "global",
            "code": "opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @p"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1321,
                1561
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 64,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000035",
                "name": "computed",
                "type": "ObjectExpression",
                "value": "{\"clsWidth\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "computed",
            "longname": "module.exports.computed",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (even"
          },
          {
            "comment": "/**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */",
            "meta": {
              "range": [
                1470,
                1555
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 70,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000037",
                "name": "clsWidth",
                "type": "FunctionExpression"
              }
            },
            "description": "resolves the used width class",
            "returns": [
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "The class to be used in the modal"
              }
            ],
            "name": "clsWidth",
            "longname": "module.exports.computed.clsWidth",
            "kind": "function",
            "memberof": "module.exports.computed",
            "scope": "static",
            "simpleName": "clsWidth",
            "signature": "module.exports.computed.clsWidth() : String",
            "code": "clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                       "
          },
          {
            "comment": "/** @private */",
            "meta": {
              "range": [
                1588,
                1660
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 76,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000052",
                "name": "beforeDestroy",
                "type": "FunctionExpression"
              }
            },
            "access": "private",
            "name": "beforeDestroy",
            "longname": "module.exports.beforeDestroy",
            "kind": "function",
            "memberof": "module.exports",
            "scope": "static",
            "simpleName": "beforeDestroy",
            "signature": "beforeDestroy()",
            "code": "beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that reso"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                1667,
                3679
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 80,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000067",
                "name": "methods",
                "type": "ObjectExpression",
                "value": "{\"getContent\":\"\",\"contentOnce\":\"\",\"open\":\"\",\"close\":\"\",\"onHidden\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "methods",
            "longname": "module.exports.methods",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "/**\n         * @returns {VueComponentInstance} Returns the current content component\n         */",
            "meta": {
              "range": [
                1792,
                1899
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 85,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000069",
                "name": "getContent",
                "type": "FunctionExpression"
              }
            },
            "returns": [
              {
                "type": {
                  "names": [
                    "VueComponentInstance"
                  ]
                },
                "description": "Returns the current content component"
              }
            ],
            "name": "getContent",
            "longname": "module.exports.methods.getContent",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "getContent",
            "signature": "getContent() : VueComponentInstance",
            "code": "getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "/**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */",
            "meta": {
              "range": [
                2119,
                2340
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 94,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000088",
                "name": "contentOnce",
                "type": "FunctionExpression"
              },
              "vars": {
                "": null
              }
            },
            "description": "Registers a listener on the content component",
            "params": [
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "The event name",
                "name": "event"
              },
              {
                "type": {
                  "names": [
                    "function"
                  ]
                },
                "description": "the function to be called on the event",
                "name": "handler"
              }
            ],
            "name": "contentOnce",
            "longname": "module.exports.methods.contentOnce",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "contentOnce",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "event",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "3": "The event name"
                },
                {
                  "0": "handler",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "function"
                      ]
                    }
                  },
                  "3": "the function to be called on the event"
                }
              ]
            },
            "signature": "contentOnce (event: String, handler: function)",
            "code": "contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "/**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */",
            "meta": {
              "range": [
                2669,
                3156
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 108,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000124",
                "name": "open",
                "type": "FunctionExpression"
              },
              "vars": {
                "this.modal": "module.exports.methods.open#modal",
                "": null
              }
            },
            "description": "open the modal",
            "params": [
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "optional": true,
                "name": "options"
              },
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "description": "Hash of listeners to be registered to the content component to be executed once",
                "name": "events"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise.<this>"
                  ]
                },
                "description": "Returns a promise resolving with this modal when the content is ready"
              }
            ],
            "name": "open",
            "longname": "module.exports.methods.open",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "open",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type"
                },
                {
                  "0": "options",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "optional": true
                }
              ],
              "options": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "events",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "3": "Hash of listeners to be registered to the content component to be executed once"
                }
              ]
            },
            "signature": "open ([options: Object]) : Promise.<this>",
            "code": "open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2675,
                2681
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 108,
              "columnno": 14,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000127",
                "name": "events",
                "type": "Identifier",
                "value": "events"
              }
            },
            "undocumented": true,
            "name": "events",
            "longname": "events",
            "kind": "member",
            "scope": "global",
            "code": "events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2733,
                2790
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 110,
              "columnno": 16,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000137",
                "name": "this.modal",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "modal",
            "longname": "module.exports.methods.open#modal",
            "kind": "member",
            "memberof": "module.exports.methods.open",
            "scope": "instance",
            "code": "this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2777,
                2788
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 110,
              "columnno": 60,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000151",
                "name": "stack",
                "type": "Literal",
                "value": true
              }
            },
            "undocumented": true,
            "name": "stack",
            "longname": "stack",
            "kind": "member",
            "scope": "global",
            "code": "stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                2977,
                3000
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 117,
              "columnno": 30,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000181",
                "name": "handler",
                "type": "MemberExpression",
                "value": "events[undefined]"
              }
            },
            "undocumented": true,
            "name": "handler",
            "longname": "<anonymous>~handler",
            "kind": "constant",
            "memberof": "<anonymous>",
            "scope": "inner",
            "params": [],
            "code": "handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "/**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */",
            "meta": {
              "range": [
                3299,
                3356
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 129,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000195",
                "name": "close",
                "type": "FunctionExpression"
              }
            },
            "description": "Closes the modal",
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise"
                  ]
                },
                "description": "A promise that resolves when the modal is closed."
              }
            ],
            "name": "close",
            "longname": "module.exports.methods.close",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "close",
            "signature": "close() : Promise",
            "code": "close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "/**\n         * @private\n         */",
            "meta": {
              "range": [
                3411,
                3672
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 136,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000205",
                "name": "onHidden",
                "type": "FunctionExpression"
              },
              "vars": {
                "this.opened": "module.exports.methods.onHidden#opened"
              }
            },
            "access": "private",
            "name": "onHidden",
            "longname": "module.exports.methods.onHidden",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "onHidden",
            "signature": "onHidden()",
            "code": "onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "/**\n             * triggered when the modal has been closed\n             * @event close\n             */",
            "meta": {
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 139,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "description": "triggered when the modal has been closed",
            "kind": "event",
            "name": "close",
            "longname": "event:close",
            "scope": "global"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                3642,
                3661
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 144,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000226",
                "name": "this.opened",
                "type": "Literal",
                "value": false,
                "paramnames": []
              }
            },
            "undocumented": true,
            "name": "opened",
            "longname": "module.exports.methods.onHidden#opened",
            "kind": "member",
            "memberof": "module.exports.methods.onHidden",
            "scope": "instance",
            "code": "this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/cmmb0tzkvp6znma60bv56.js"
            ]
          }
        ],
        "documented": [
          {
            "comment": "/**\n * Reusable modal component using UIkit.modal and VUE.\n * @example\n * <Modal><ChilComponent/></Modal>\n */",
            "meta": {
              "range": [
                138,
                3683
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 8,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000006",
                "name": "module.exports",
                "type": "ObjectExpression"
              }
            },
            "description": "Reusable modal component using UIkit.modal and VUE.",
            "examples": [
              "<Modal><ChilComponent/></Modal>"
            ],
            "name": "exports",
            "longname": "module.exports",
            "kind": "member",
            "memberof": "module",
            "scope": "static",
            "code": "export default {\n\n    props: {\n        /**\n         * When using the modal with a content component, you can pass the child's component properties here\n         * @example\n         * <Modal :props=\"{type:'checkbox'}\" :content=\"InputConpnent\"/>\n         */\n        props: {\n            type: Object,\n            required: true\n        },\n\n        /**\n         * a test property\n         */\n        test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "/**\n         * When using the modal with a content component, you can pass the child's component properties here\n         * @example\n         * <Modal :props=\"{type:'checkbox'}\" :content=\"InputConpnent\"/>\n         */",
            "meta": {
              "range": [
                402,
                473
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 16,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000010",
                "name": "props",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\",\"required\":true}"
              }
            },
            "description": "When using the modal with a content component, you can pass the child's component properties here",
            "examples": [
              "<Modal :props=\"{type:'checkbox'}\" :content=\"InputConpnent\"/>"
            ],
            "name": "props",
            "longname": "module.exports.props.props",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "props: {\n            type: Object,\n            required: true\n        },\n\n        /**\n         * a test property\n         */\n        test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n      ",
            "simpleName": "props"
          },
          {
            "comment": "/**\n         * a test property\n         */",
            "meta": {
              "range": [
                535,
                547
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 24,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000016",
                "name": "test",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "a test property",
            "name": "test",
            "longname": "module.exports.props.test",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: []",
            "simpleName": "test"
          },
          {
            "comment": "/**\n         * A component descriptor to construct a child element from\n         */",
            "meta": {
              "range": [
                650,
                665
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 29,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000018",
                "name": "content",
                "type": "Identifier",
                "value": "Object"
              }
            },
            "description": "A component descriptor to construct a child element from",
            "name": "content",
            "longname": "module.exports.props.content",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },",
            "simpleName": "content"
          },
          {
            "comment": "/**\n         * Optional uk-width-($with) class for the modal to use.\n         **/",
            "meta": {
              "range": [
                766,
                809
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 34,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000020",
                "name": "width",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\"}"
              }
            },
            "description": "Optional uk-width-($with) class for the modal to use.",
            "name": "width",
            "longname": "module.exports.props.width",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @pr",
            "simpleName": "width"
          },
          {
            "comment": "/**\n         * Adds the uk-modal-Container class\n         */",
            "meta": {
              "range": [
                889,
                907
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 41,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000024",
                "name": "container",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "Adds the uk-modal-Container class",
            "name": "container",
            "longname": "module.exports.props.container",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getC",
            "simpleName": "container"
          },
          {
            "comment": "/**\n             * A list of registered events\n             * @type {String[]}\n             */",
            "meta": {
              "range": [
                1065,
                1082
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 50,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000031",
                "name": "contentEvents",
                "type": "ArrayExpression",
                "value": "[]"
              }
            },
            "description": "A list of registered events",
            "type": {
              "names": [
                "Array.<String>"
              ]
            },
            "name": "contentEvents",
            "longname": "contentEvents",
            "kind": "member",
            "scope": "global",
            "code": "contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) "
          },
          {
            "comment": "/**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */",
            "meta": {
              "range": [
                1209,
                1222
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 55,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000033",
                "name": "opened",
                "type": "Literal",
                "value": false
              }
            },
            "description": "Weather this Modal has been opened",
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "name": "opened",
            "longname": "opened",
            "kind": "member",
            "scope": "global",
            "code": "opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @p"
          },
          {
            "comment": "/**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */",
            "meta": {
              "range": [
                1470,
                1555
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 70,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000037",
                "name": "clsWidth",
                "type": "FunctionExpression"
              }
            },
            "description": "resolves the used width class",
            "returns": [
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "The class to be used in the modal"
              }
            ],
            "name": "clsWidth",
            "longname": "module.exports.computed.clsWidth",
            "kind": "function",
            "memberof": "module.exports.computed",
            "scope": "static",
            "simpleName": "clsWidth",
            "signature": "module.exports.computed.clsWidth() : String",
            "code": "clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                       "
          },
          {
            "comment": "/** @private */",
            "meta": {
              "range": [
                1588,
                1660
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 76,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000052",
                "name": "beforeDestroy",
                "type": "FunctionExpression"
              }
            },
            "access": "private",
            "name": "beforeDestroy",
            "longname": "module.exports.beforeDestroy",
            "kind": "function",
            "memberof": "module.exports",
            "scope": "static",
            "simpleName": "beforeDestroy",
            "signature": "beforeDestroy()",
            "code": "beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that reso"
          },
          {
            "comment": "/**\n         * @returns {VueComponentInstance} Returns the current content component\n         */",
            "meta": {
              "range": [
                1792,
                1899
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 85,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000069",
                "name": "getContent",
                "type": "FunctionExpression"
              }
            },
            "returns": [
              {
                "type": {
                  "names": [
                    "VueComponentInstance"
                  ]
                },
                "description": "Returns the current content component"
              }
            ],
            "name": "getContent",
            "longname": "module.exports.methods.getContent",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "getContent",
            "signature": "getContent() : VueComponentInstance",
            "code": "getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "/**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */",
            "meta": {
              "range": [
                2119,
                2340
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 94,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000088",
                "name": "contentOnce",
                "type": "FunctionExpression"
              },
              "vars": {
                "": null
              }
            },
            "description": "Registers a listener on the content component",
            "params": [
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "The event name",
                "name": "event"
              },
              {
                "type": {
                  "names": [
                    "function"
                  ]
                },
                "description": "the function to be called on the event",
                "name": "handler"
              }
            ],
            "name": "contentOnce",
            "longname": "module.exports.methods.contentOnce",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "contentOnce",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "event",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "3": "The event name"
                },
                {
                  "0": "handler",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "function"
                      ]
                    }
                  },
                  "3": "the function to be called on the event"
                }
              ]
            },
            "signature": "contentOnce (event: String, handler: function)",
            "code": "contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "/**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */",
            "meta": {
              "range": [
                2669,
                3156
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 108,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000124",
                "name": "open",
                "type": "FunctionExpression"
              },
              "vars": {
                "this.modal": "module.exports.methods.open#modal",
                "": null
              }
            },
            "description": "open the modal",
            "params": [
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "optional": true,
                "name": "options"
              },
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "description": "Hash of listeners to be registered to the content component to be executed once",
                "name": "events"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise.<this>"
                  ]
                },
                "description": "Returns a promise resolving with this modal when the content is ready"
              }
            ],
            "name": "open",
            "longname": "module.exports.methods.open",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "open",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type"
                },
                {
                  "0": "options",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "optional": true
                }
              ],
              "options": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "events",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "3": "Hash of listeners to be registered to the content component to be executed once"
                }
              ]
            },
            "signature": "open ([options: Object]) : Promise.<this>",
            "code": "open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "/**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */",
            "meta": {
              "range": [
                3299,
                3356
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 129,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000195",
                "name": "close",
                "type": "FunctionExpression"
              }
            },
            "description": "Closes the modal",
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise"
                  ]
                },
                "description": "A promise that resolves when the modal is closed."
              }
            ],
            "name": "close",
            "longname": "module.exports.methods.close",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "close",
            "signature": "close() : Promise",
            "code": "close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "/**\n         * @private\n         */",
            "meta": {
              "range": [
                3411,
                3672
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 136,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000205",
                "name": "onHidden",
                "type": "FunctionExpression"
              },
              "vars": {
                "this.opened": "module.exports.methods.onHidden#opened"
              }
            },
            "access": "private",
            "name": "onHidden",
            "longname": "module.exports.methods.onHidden",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "onHidden",
            "signature": "onHidden()",
            "code": "onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          {
            "comment": "/**\n             * triggered when the modal has been closed\n             * @event close\n             */",
            "meta": {
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 139,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "description": "triggered when the modal has been closed",
            "kind": "event",
            "name": "close",
            "longname": "event:close",
            "scope": "global"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/cmmb0tzkvp6znma60bv56.js"
            ]
          }
        ],
        "global": [],
        "types": {
          "member": [
            {
              "comment": "/**\n * Reusable modal component using UIkit.modal and VUE.\n * @example\n * <Modal><ChilComponent/></Modal>\n */",
              "meta": {
                "range": [
                  138,
                  3683
                ],
                "filename": "cmmb0tzkvp6znma60bv56.js",
                "lineno": 8,
                "columnno": 0,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000006",
                  "name": "module.exports",
                  "type": "ObjectExpression"
                }
              },
              "description": "Reusable modal component using UIkit.modal and VUE.",
              "examples": [
                "<Modal><ChilComponent/></Modal>"
              ],
              "name": "exports",
              "longname": "module.exports",
              "kind": "member",
              "memberof": "module",
              "scope": "static",
              "code": "export default {\n\n    props: {\n        /**\n         * When using the modal with a content component, you can pass the child's component properties here\n         * @example\n         * <Modal :props=\"{type:'checkbox'}\" :content=\"InputConpnent\"/>\n         */\n        props: {\n            type: Object,\n            required: true\n        },\n\n        /**\n         * a test property\n         */\n        test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
            },
            {
              "comment": "/**\n         * When using the modal with a content component, you can pass the child's component properties here\n         * @example\n         * <Modal :props=\"{type:'checkbox'}\" :content=\"InputConpnent\"/>\n         */",
              "meta": {
                "range": [
                  402,
                  473
                ],
                "filename": "cmmb0tzkvp6znma60bv56.js",
                "lineno": 16,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000010",
                  "name": "props",
                  "type": "ObjectExpression",
                  "value": "{\"type\":\"\",\"required\":true}"
                }
              },
              "description": "When using the modal with a content component, you can pass the child's component properties here",
              "examples": [
                "<Modal :props=\"{type:'checkbox'}\" :content=\"InputConpnent\"/>"
              ],
              "name": "props",
              "longname": "module.exports.props.props",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "props: {\n            type: Object,\n            required: true\n        },\n\n        /**\n         * a test property\n         */\n        test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n      ",
              "simpleName": "props"
            },
            {
              "comment": "/**\n         * a test property\n         */",
              "meta": {
                "range": [
                  535,
                  547
                ],
                "filename": "cmmb0tzkvp6znma60bv56.js",
                "lineno": 24,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000016",
                  "name": "test",
                  "type": "Identifier",
                  "value": "String"
                }
              },
              "description": "a test property",
              "name": "test",
              "longname": "module.exports.props.test",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: []",
              "simpleName": "test"
            },
            {
              "comment": "/**\n         * A component descriptor to construct a child element from\n         */",
              "meta": {
                "range": [
                  650,
                  665
                ],
                "filename": "cmmb0tzkvp6znma60bv56.js",
                "lineno": 29,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000018",
                  "name": "content",
                  "type": "Identifier",
                  "value": "Object"
                }
              },
              "description": "A component descriptor to construct a child element from",
              "name": "content",
              "longname": "module.exports.props.content",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },",
              "simpleName": "content"
            },
            {
              "comment": "/**\n         * Optional uk-width-($with) class for the modal to use.\n         **/",
              "meta": {
                "range": [
                  766,
                  809
                ],
                "filename": "cmmb0tzkvp6znma60bv56.js",
                "lineno": 34,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000020",
                  "name": "width",
                  "type": "ObjectExpression",
                  "value": "{\"type\":\"\"}"
                }
              },
              "description": "Optional uk-width-($with) class for the modal to use.",
              "name": "width",
              "longname": "module.exports.props.width",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @pr",
              "simpleName": "width"
            },
            {
              "comment": "/**\n         * Adds the uk-modal-Container class\n         */",
              "meta": {
                "range": [
                  889,
                  907
                ],
                "filename": "cmmb0tzkvp6znma60bv56.js",
                "lineno": 41,
                "columnno": 8,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000024",
                  "name": "container",
                  "type": "Identifier",
                  "value": "Boolean"
                }
              },
              "description": "Adds the uk-modal-Container class",
              "name": "container",
              "longname": "module.exports.props.container",
              "kind": "member",
              "memberof": "module.exports.props",
              "scope": "static",
              "code": "container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getC",
              "simpleName": "container"
            },
            {
              "comment": "/**\n             * A list of registered events\n             * @type {String[]}\n             */",
              "meta": {
                "range": [
                  1065,
                  1082
                ],
                "filename": "cmmb0tzkvp6znma60bv56.js",
                "lineno": 50,
                "columnno": 12,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000031",
                  "name": "contentEvents",
                  "type": "ArrayExpression",
                  "value": "[]"
                }
              },
              "description": "A list of registered events",
              "type": {
                "names": [
                  "Array.<String>"
                ]
              },
              "name": "contentEvents",
              "longname": "contentEvents",
              "kind": "member",
              "scope": "global",
              "code": "contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) "
            },
            {
              "comment": "/**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */",
              "meta": {
                "range": [
                  1209,
                  1222
                ],
                "filename": "cmmb0tzkvp6znma60bv56.js",
                "lineno": 55,
                "columnno": 12,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000033",
                  "name": "opened",
                  "type": "Literal",
                  "value": false
                }
              },
              "description": "Weather this Modal has been opened",
              "type": {
                "names": [
                  "Boolean"
                ]
              },
              "name": "opened",
              "longname": "opened",
              "kind": "member",
              "scope": "global",
              "code": "opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @p"
            }
          ],
          "function": [
            {
              "comment": "/** @private */",
              "meta": {
                "range": [
                  1588,
                  1660
                ],
                "filename": "cmmb0tzkvp6znma60bv56.js",
                "lineno": 76,
                "columnno": 4,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {
                  "id": "astnode100000052",
                  "name": "beforeDestroy",
                  "type": "FunctionExpression"
                }
              },
              "access": "private",
              "name": "beforeDestroy",
              "longname": "module.exports.beforeDestroy",
              "kind": "function",
              "memberof": "module.exports",
              "scope": "static",
              "simpleName": "beforeDestroy",
              "signature": "beforeDestroy()",
              "code": "beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that reso"
            }
          ],
          "event": [
            {
              "comment": "/**\n             * triggered when the modal has been closed\n             * @event close\n             */",
              "meta": {
                "filename": "cmmb0tzkvp6znma60bv56.js",
                "lineno": 139,
                "columnno": 12,
                "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
                "code": {}
              },
              "description": "triggered when the modal has been closed",
              "kind": "event",
              "name": "close",
              "longname": "event:close",
              "scope": "global"
            }
          ],
          "package": [
            {
              "kind": "package",
              "longname": "package:undefined",
              "files": [
                "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/cmmb0tzkvp6znma60bv56.js"
              ]
            }
          ]
        },
        "description": "Reusable modal component using UIkit.modal and VUE."
      },
      "component": {
        "props": {
          "props": {
            "comment": "/**\n         * When using the modal with a content component, you can pass the child's component properties here\n         * @example\n         * <Modal :props=\"{type:'checkbox'}\" :content=\"InputConpnent\"/>\n         */",
            "meta": {
              "range": [
                402,
                473
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 16,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000010",
                "name": "props",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\",\"required\":true}"
              }
            },
            "description": "When using the modal with a content component, you can pass the child's component properties here",
            "examples": [
              "<Modal :props=\"{type:'checkbox'}\" :content=\"InputConpnent\"/>"
            ],
            "name": "props",
            "longname": "module.exports.props.props",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "props: {\n            type: Object,\n            required: true\n        },\n\n        /**\n         * a test property\n         */\n        test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n      ",
            "simpleName": "props"
          },
          "test": {
            "comment": "/**\n         * a test property\n         */",
            "meta": {
              "range": [
                535,
                547
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 24,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000016",
                "name": "test",
                "type": "Identifier",
                "value": "String"
              }
            },
            "description": "a test property",
            "name": "test",
            "longname": "module.exports.props.test",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "test: String,\n\n        /**\n         * A component descriptor to construct a child element from\n         */\n        content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: []",
            "simpleName": "test"
          },
          "content": {
            "comment": "/**\n         * A component descriptor to construct a child element from\n         */",
            "meta": {
              "range": [
                650,
                665
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 29,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000018",
                "name": "content",
                "type": "Identifier",
                "value": "Object"
              }
            },
            "description": "A component descriptor to construct a child element from",
            "name": "content",
            "longname": "module.exports.props.content",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "content: Object,\n\n        /**\n         * Optional uk-width-($with) class for the modal to use.\n         **/\n        width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },",
            "simpleName": "content"
          },
          "width": {
            "comment": "/**\n         * Optional uk-width-($with) class for the modal to use.\n         **/",
            "meta": {
              "range": [
                766,
                809
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 34,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000020",
                "name": "width",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\"}"
              }
            },
            "description": "Optional uk-width-($with) class for the modal to use.",
            "name": "width",
            "longname": "module.exports.props.width",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "width: {\n            type: String\n        },\n\n        /**\n         * Adds the uk-modal-Container class\n         */\n        container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @pr",
            "simpleName": "width"
          },
          "container": {
            "comment": "/**\n         * Adds the uk-modal-Container class\n         */",
            "meta": {
              "range": [
                889,
                907
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 41,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000024",
                "name": "container",
                "type": "Identifier",
                "value": "Boolean"
              }
            },
            "description": "Adds the uk-modal-Container class",
            "name": "container",
            "longname": "module.exports.props.container",
            "kind": "member",
            "memberof": "module.exports.props",
            "scope": "static",
            "code": "container: Boolean\n    },\n\n    data() {\n        return {\n            /**\n             * A list of registered events\n             * @type {String[]}\n             */\n            contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getC",
            "simpleName": "container"
          }
        },
        "data": {
          "contentEvents": {
            "comment": "/**\n             * A list of registered events\n             * @type {String[]}\n             */",
            "meta": {
              "range": [
                1065,
                1082
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 50,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000031",
                "name": "contentEvents",
                "type": "ArrayExpression",
                "value": "[]"
              }
            },
            "description": "A list of registered events",
            "type": {
              "names": [
                "Array.<String>"
              ]
            },
            "name": "contentEvents",
            "longname": "contentEvents",
            "kind": "member",
            "scope": "global",
            "code": "contentEvents: [],\n            /**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */\n            opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) "
          },
          "opened": {
            "comment": "/**\n             * Weather this Modal has been opened\n             * @type {Boolean}\n             */",
            "meta": {
              "range": [
                1209,
                1222
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 55,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000033",
                "name": "opened",
                "type": "Literal",
                "value": false
              }
            },
            "description": "Weather this Modal has been opened",
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "name": "opened",
            "longname": "opened",
            "kind": "member",
            "scope": "global",
            "code": "opened: false,\n\n            /**\n             * the width class resolver\n             */\n\n        };\n    },\n\n    computed: {\n\n        /**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */\n        clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @p"
          }
        },
        "computed": {
          "clsWidth": {
            "comment": "/**\n         * resolves the used width class\n         * @returns {String} The class to be used in the modal\n         */",
            "meta": {
              "range": [
                1470,
                1555
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 70,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000037",
                "name": "clsWidth",
                "type": "FunctionExpression"
              }
            },
            "description": "resolves the used width class",
            "returns": [
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "The class to be used in the modal"
              }
            ],
            "name": "clsWidth",
            "longname": "module.exports.computed.clsWidth",
            "kind": "function",
            "memberof": "module.exports.computed",
            "scope": "static",
            "simpleName": "clsWidth",
            "signature": "module.exports.computed.clsWidth() : String",
            "code": "clsWidth() {\n            return this.width ? `uk-width-${this.width}` : '';\n        }\n    },\n\n    /** @private */\n    beforeDestroy() {\n        this.modal && this.modal.$destroy(true);\n    },\n\n    methods: {\n\n        /**\n         * @returns {VueComponentInstance} Returns the current content component\n         */\n        getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                       "
          }
        },
        "methods": {
          "getContent": {
            "comment": "/**\n         * @returns {VueComponentInstance} Returns the current content component\n         */",
            "meta": {
              "range": [
                1792,
                1899
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 85,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000069",
                "name": "getContent",
                "type": "FunctionExpression"
              }
            },
            "returns": [
              {
                "type": {
                  "names": [
                    "VueComponentInstance"
                  ]
                },
                "description": "Returns the current content component"
              }
            ],
            "name": "getContent",
            "longname": "module.exports.methods.getContent",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "getContent",
            "signature": "getContent() : VueComponentInstance",
            "code": "getContent() {\n            return this.$slots.default[0].componentInstance || this.$refs.content;\n        },\n\n        /**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */\n        contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          "contentOnce": {
            "comment": "/**\n         * Registers a listener on the content component\n         * @param {String} event - The event name\n         * @param {Function} handler - the function to be called on the event\n         */",
            "meta": {
              "range": [
                2119,
                2340
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 94,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000088",
                "name": "contentOnce",
                "type": "FunctionExpression"
              },
              "vars": {
                "": null
              }
            },
            "description": "Registers a listener on the content component",
            "params": [
              {
                "type": {
                  "names": [
                    "String"
                  ]
                },
                "description": "The event name",
                "name": "event"
              },
              {
                "type": {
                  "names": [
                    "function"
                  ]
                },
                "description": "the function to be called on the event",
                "name": "handler"
              }
            ],
            "name": "contentOnce",
            "longname": "module.exports.methods.contentOnce",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "contentOnce",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "event",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "String"
                      ]
                    }
                  },
                  "3": "The event name"
                },
                {
                  "0": "handler",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "function"
                      ]
                    }
                  },
                  "3": "the function to be called on the event"
                }
              ]
            },
            "signature": "contentOnce (event: String, handler: function)",
            "code": "contentOnce(event, handler) {\n            this.contentEvents.push(event);\n            this.getContent().$once(event, (...args) => {\n                handler(...args);\n                this.close();\n            });\n        },\n\n        /**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */\n        open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          "open": {
            "comment": "/**\n         * open the modal\n         * @param {Object} [options]\n         * @param {Object} options.events - Hash of listeners to be registered to the content component to be executed once\n         * @returns {Promise.<this>} Returns a promise resolving with this modal when the content is ready\n         */",
            "meta": {
              "range": [
                2669,
                3156
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 108,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000124",
                "name": "open",
                "type": "FunctionExpression"
              },
              "vars": {
                "this.modal": "module.exports.methods.open#modal",
                "": null
              }
            },
            "description": "open the modal",
            "params": [
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "optional": true,
                "name": "options"
              },
              {
                "type": {
                  "names": [
                    "Object"
                  ]
                },
                "description": "Hash of listeners to be registered to the content component to be executed once",
                "name": "events"
              }
            ],
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise.<this>"
                  ]
                },
                "description": "Returns a promise resolving with this modal when the content is ready"
              }
            ],
            "name": "open",
            "longname": "module.exports.methods.open",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "open",
            "tables": {
              "arguments": [
                {
                  "0": "name",
                  "1": "type"
                },
                {
                  "0": "options",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "optional": true
                }
              ],
              "options": [
                {
                  "0": "name",
                  "1": "type",
                  "3": "description"
                },
                {
                  "0": "events",
                  "1": {
                    "template": "types",
                    "type": {
                      "names": [
                        "Object"
                      ]
                    }
                  },
                  "3": "Hash of listeners to be registered to the content component to be executed once"
                }
              ]
            },
            "signature": "open ([options: Object]) : Promise.<this>",
            "code": "open({events}) {\n            if (!this.modal) {\n                this.modal = UIkit.modal(this.$refs.modal, {stack: true});\n            }\n\n            return this.modal.show().then(() => {\n\n                if (events) {\n                    Object.keys(events).forEach(event => {\n                        const handler = events[event];\n                        this.contentOnce(event, handler);\n                    });\n                }\n                return this;\n            });\n        },\n\n        /**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */\n        close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          "close": {
            "comment": "/**\n         * Closes the modal\n         * @returns {Promise} A promise that resolves when the modal is closed.\n         */",
            "meta": {
              "range": [
                3299,
                3356
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 129,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000195",
                "name": "close",
                "type": "FunctionExpression"
              }
            },
            "description": "Closes the modal",
            "returns": [
              {
                "type": {
                  "names": [
                    "Promise"
                  ]
                },
                "description": "A promise that resolves when the modal is closed."
              }
            ],
            "name": "close",
            "longname": "module.exports.methods.close",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "close",
            "signature": "close() : Promise",
            "code": "close() {\n            return this.modal.hide();\n        },\n\n        /**\n         * @private\n         */\n        onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          },
          "onHidden": {
            "comment": "/**\n         * @private\n         */",
            "meta": {
              "range": [
                3411,
                3672
              ],
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 136,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000205",
                "name": "onHidden",
                "type": "FunctionExpression"
              },
              "vars": {
                "this.opened": "module.exports.methods.onHidden#opened"
              }
            },
            "access": "private",
            "name": "onHidden",
            "longname": "module.exports.methods.onHidden",
            "kind": "function",
            "memberof": "module.exports.methods",
            "scope": "static",
            "simpleName": "onHidden",
            "signature": "onHidden()",
            "code": "onHidden() {\n            this.getContent().$off(this.contentEvents);\n\n            /**\n             * triggered when the modal has been closed\n             * @event close\n             */\n            this.$emit('close');\n            this.opened = false;\n        }\n\n    }\n\n};"
          }
        },
        "emit": {
          "close": {
            "comment": "/**\n             * triggered when the modal has been closed\n             * @event close\n             */",
            "meta": {
              "filename": "cmmb0tzkvp6znma60bv56.js",
              "lineno": 139,
              "columnno": 12,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {}
            },
            "description": "triggered when the modal has been closed",
            "kind": "event",
            "name": "close",
            "longname": "event:close",
            "scope": "global"
          }
        },
        "slot": {
          "default": {
            "comment": "<!-- @slot default The slot for the\n                content if slotted method is used -->",
            "kind": "slot",
            "type": {
              "names": [
                null
              ]
            },
            "name": "default",
            "description": "The slot for the\n                content if slotted method is used"
          }
        }
      }
    },
    "src.vue.SpecialElement.vue": {
      "_events": {},
      "_eventsCount": 0,
      "package": "examples",
      "path": "/Users/jms/yootheme-doctools/examples/src/vue/SpecialElement.vue",
      "fileInPackage": "./src/vue/SpecialElement.vue",
      "name": "SpecialElement",
      "resource": "src.vue.SpecialElement.vue",
      "type": "VueComponent",
      "template": false,
      "script": "import Element from './Element.vue';\n\nexport default {\n    extends: Element,\n    computed: {\n\n        /**\n         * a fucking test memebers\n         * @private\n         * @type {String}\n        */\n        myPrivateMember() {\n            return \"test\"\n        }\n    }\n}",
      "module": {
        "all": [
          {
            "comment": "",
            "meta": {
              "range": [
                38,
                269
              ],
              "filename": "lwaz3bc2kpfhuix69bfbi9.js",
              "lineno": 3,
              "columnno": 0,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000006",
                "name": "module.exports",
                "type": "ObjectExpression"
              }
            },
            "undocumented": true,
            "name": "exports",
            "longname": "module.exports",
            "kind": "member",
            "memberof": "module",
            "scope": "static",
            "code": "export default {\n    extends: Element,\n    computed: {\n\n        /**\n         * a fucking test memebers\n         * @private\n         * @type {String}\n        */\n        myPrivateMember() {\n            return \"test\"\n        }\n    }\n}"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                59,
                75
              ],
              "filename": "lwaz3bc2kpfhuix69bfbi9.js",
              "lineno": 4,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000008",
                "name": "extends",
                "type": "Identifier",
                "value": "Element"
              }
            },
            "undocumented": true,
            "name": "extends",
            "longname": "module.exports.extends",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "extends: Element,\n    computed: {\n\n        /**\n         * a fucking test me"
          },
          {
            "comment": "",
            "meta": {
              "range": [
                81,
                267
              ],
              "filename": "lwaz3bc2kpfhuix69bfbi9.js",
              "lineno": 5,
              "columnno": 4,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000010",
                "name": "computed",
                "type": "ObjectExpression",
                "value": "{\"myPrivateMember\":\"\"}"
              }
            },
            "undocumented": true,
            "name": "computed",
            "longname": "module.exports.computed",
            "kind": "member",
            "memberof": "module.exports",
            "scope": "static",
            "code": "computed: {\n\n        /**\n         * a fucking test memebers\n         * @private\n         * @type {String}\n        */\n        myPrivateMember() {\n            return \"test\"\n        }\n    }\n}"
          },
          {
            "comment": "/**\n         * a fucking test memebers\n         * @private\n         * @type {String}\n        */",
            "meta": {
              "range": [
                206,
                261
              ],
              "filename": "lwaz3bc2kpfhuix69bfbi9.js",
              "lineno": 12,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000012",
                "name": "myPrivateMember",
                "type": "FunctionExpression"
              }
            },
            "description": "a fucking test memebers",
            "access": "private",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "myPrivateMember",
            "longname": "module.exports.computed.myPrivateMember",
            "kind": "function",
            "memberof": "module.exports.computed",
            "scope": "static",
            "simpleName": "myPrivateMember",
            "signature": "module.exports.computed.myPrivateMember()",
            "code": "myPrivateMember() {\n            return \"test\"\n        }\n    }\n}"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/lwaz3bc2kpfhuix69bfbi9.js"
            ]
          }
        ],
        "documented": [
          {
            "comment": "/**\n         * a fucking test memebers\n         * @private\n         * @type {String}\n        */",
            "meta": {
              "range": [
                206,
                261
              ],
              "filename": "lwaz3bc2kpfhuix69bfbi9.js",
              "lineno": 12,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000012",
                "name": "myPrivateMember",
                "type": "FunctionExpression"
              }
            },
            "description": "a fucking test memebers",
            "access": "private",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "myPrivateMember",
            "longname": "module.exports.computed.myPrivateMember",
            "kind": "function",
            "memberof": "module.exports.computed",
            "scope": "static",
            "simpleName": "myPrivateMember",
            "signature": "module.exports.computed.myPrivateMember()",
            "code": "myPrivateMember() {\n            return \"test\"\n        }\n    }\n}"
          },
          {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
              "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/lwaz3bc2kpfhuix69bfbi9.js"
            ]
          }
        ],
        "global": [],
        "types": {
          "function": [],
          "package": [
            {
              "kind": "package",
              "longname": "package:undefined",
              "files": [
                "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T/lwaz3bc2kpfhuix69bfbi9.js"
              ]
            }
          ]
        }
      },
      "component": {
        "computed": {
          "myPrivateMember": {
            "comment": "/**\n         * a fucking test memebers\n         * @private\n         * @type {String}\n        */",
            "meta": {
              "range": [
                206,
                261
              ],
              "filename": "lwaz3bc2kpfhuix69bfbi9.js",
              "lineno": 12,
              "columnno": 8,
              "path": "/var/folders/2r/5wpvzlts4cgghbc2x6s005gm0000gp/T",
              "code": {
                "id": "astnode100000012",
                "name": "myPrivateMember",
                "type": "FunctionExpression"
              }
            },
            "description": "a fucking test memebers",
            "access": "private",
            "type": {
              "names": [
                "String"
              ]
            },
            "name": "myPrivateMember",
            "longname": "module.exports.computed.myPrivateMember",
            "kind": "function",
            "memberof": "module.exports.computed",
            "scope": "static",
            "simpleName": "myPrivateMember",
            "signature": "module.exports.computed.myPrivateMember()",
            "code": "myPrivateMember() {\n            return \"test\"\n        }\n    }\n}"
          }
        }
      }
    }
  },
  "rootPackage": "examples"
}